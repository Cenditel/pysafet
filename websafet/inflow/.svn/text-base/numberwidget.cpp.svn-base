/*
* SAFET Sistema Automatizado para la Firma Electrónica y Estampado de Tiempo
* Copyright (C) 2008 Víctor Bravo (vbravo@cenditel.gob.ve), Antonio Araujo (aaraujo@cenditel.gob.ve
*
* CENDITEL Fundacion Centro Nacional de Desarrollo e Investigación en TecnologÃ­as Libres
*
* Este programa es software libre; Usted puede usarlo bajo los términos de la licencia de
* software GPL versión 2.0 de la Free Software Foundation.
*
* Este programa se distribuye con la esperanza de que sea útil, pero SI NINGUNA GARANTÍA;
* tampoco las implí­citas garantí­as de MERCANTILIDAD o ADECUACIÃ“N A UN PROPÓSITO PARTICULAR.
* Consulte la licencia GPL para más detalles. Usted debe recibir una copia de la GPL junto
* con este programa; si no, escriba a la Free Software Foundation Inc. 51 Franklin Street,
* 5º Piso, Boston, MA 02110-1301, USA.
*
*/
#include "numberwidget.h"
#include "SafetYAWL.h"

NumberWidget::NumberWidget(const QString& t, QWidget *parent, bool istextparent )
    :CmdWidget(t,parent, istextparent) {



}

void NumberWidget::setText(const QString &newText) {


}


QRect NumberWidget::getGeoParams() const {
     QRect result;
     result.setHeight( 40 );
     result.setWidth( 150 );
     return result;
}

void NumberWidget::buildWidget() {
     qDebug("...NumberWidget...buildWidget...");

/*     spinboxedit = NULL;
     if ( conf().contains("options"))  {

         setOptionsProperties(conf()["options"].toString().split(","));
         if ( conf()["options"].toString().split(",").contains("decimal") ) {
             spinboxedit = new QDoubleSpinBox();
         }
         else {
            spinboxedit = new QSpinBox();
            (qobject_cast<QSpinBox*>(spinboxedit))->setRange(0,9999);
         }
     }
     else {
         spinboxedit = new QSpinBox();
         (qobject_cast<QSpinBox*>(spinboxedit))->setRange(0,9999);
     }

     principalWidget = spinboxedit;
     QString mytip = tr("Campo Numérico. Escriba un número entero o decimal");
     if ( conf().contains("validation")) {
         QStringList mylist = conf()["validation"].toString().split("::");
         if (mylist.count() > 1 ) {
             QString usertip = mylist.at(1);
             mytip = usertip;
         }
     }
     _usertooltip = mytip;
     spinboxedit->setToolTip(mytip);

     setOptionsProperties(conf()["options"].toString().split(",")); // Colocar las propiedades
     spinboxedit->setGeometry(0,0,350,30);



     if (isTextParent()) {
         okbutton = new QToolButton;
         okbutton->setGeometry(0,0,25,30);
         okbutton->setIcon(QIcon(":/yes.png"));
         quitbutton = new QToolButton;
         quitbutton->setGeometry(0,0,25,30);
         quitbutton->setText( "X");
     }
     mainLayout = new QHBoxLayout;
     mainLayout->addWidget(spinboxedit);
     //mainLayout->addWidget(lblvalidator);
     mainLayout->setSpacing( 1 );

     if ( isTextParent()) {
        mainLayout->addWidget(quitbutton);
        mainLayout->addWidget(okbutton);
        connect(okbutton, SIGNAL(clicked()), _texteditparent, SLOT(insertAndClose()) );
        connect(quitbutton, SIGNAL(clicked()), _texteditparent, SLOT(cancelAndClose()) );
    }
//     setLayout(mainLayout);
*/
}

void NumberWidget::setFocus ( Qt::FocusReason reason ) {
/*     qDebug("...NumberWidget::setFocus....(text)");
     QWidget::setFocus ( reason );
     spinboxedit->setFocus( reason);*/

}
bool NumberWidget::isValid(QString& value) {
    bool okint, okfloat;
    int vi = value.toInt(&okint);
    float vf = value.toDouble(&okfloat);

    return okint || okfloat;

}


QString NumberWidget::text() const {
    QString result;
       return result;
 }
