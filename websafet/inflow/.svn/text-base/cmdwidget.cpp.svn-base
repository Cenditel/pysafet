/*
* SAFET Sistema Automatizado para la Firma Electrónica y Estampado de Tiempo
* Copyright (C) 2008 VÃ­ctor Bravo (vbravo@cenditel.gob.ve), Antonio Araujo (aaraujo@cenditel.gob.ve
*
* CENDITEL Fundacion Centro Nacional de Desarrollo e Investigación en TecnologÃ­as Libres
*
* Este programa es software libre; Usted puede usarlo bajo los términos de la licencia de
* software GPL versión 2.0 de la Free Software Foundation.
*
* Este programa se distribuye con la esperanza de que sea útil, pero SI NINGUNA GARANTÍA;
* tampoco las implí­citas garantí­as de MERCANTILIDAD o ADECUACIÃ“N A UN PROPÓSITO PARTICULAR.
* Consulte la licencia GPL para más detalles. Usted debe recibir una copia de la GPL junto
* con este programa; si no, escriba a la Free Software Foundation Inc. 51 Franklin Street,
* 5º Piso, Boston, MA 02110-1301, USA.
*
*/

#include "cmdwidget.h"
#include "SafetYAWL.h"
#include <QCryptographicHash>


CmdWidget::CmdWidget(const QString& t, QObject *parent,bool istextparent)
 : QObject(parent),
 _conf()
{
    Q_CHECK_PTR( parent );

    _istextparent = istextparent;
    if ( isTextParent()) {
//        _texteditparent = qobject_cast<QTextEdit*>(parent);
//        if ( _texteditparent == NULL ) {
//             qDebug(".......ERROR...ERROR...CmdWidget::CmdWidget...._texteditparent = NULL");
//        }
//        texteditpos = _texteditparent->textCursor().position();
    }
    lineedit = NULL;
    lblvalidator = NULL;
    quitbutton = NULL;
    mainLayout = NULL;
    label      = NULL;
    checkbutton = NULL;
    okbutton = NULL;
    _caption = t;    
    principalWidget = NULL;
    _validator = NULL;
    _ispassword = false;
    _typeinput = " type=\"text\" ";
    setFocus(Qt::ActiveWindowFocusReason);
    _options.append(QLatin1String(""));
}


QString CmdWidget::html() {
    QString result;
    QStringList options = conf()["options"].toString().split(",");
    foreach(QString option, options) {
        if (option.startsWith("type::")) {
            _typeinput = option.replace("::","=");
        }
    }
    result = QString("<input %2 name=\"%1\" alt=\"Esto es un campo tipo texto\" id=\"%1\""
                     "size=\"55\"></input>")
            .arg(_caption)
            .arg(_typeinput);

    return result;
}

QString CmdWidget::htmlForKey(const QString& k) {


    if ( conf().contains(QLatin1String("keyvalue"))) {
        return html();
    }

}

QRect CmdWidget::getGeoParams() const {
     QRect result;
     if ( lineedit == NULL) return QRect(0,0,280,36);

     result.setHeight( lineedit->height() );
     result.setWidth( lineedit->width()+lblvalidator->width()+quitbutton->width()+okbutton->width() );

     return result;
}


void CmdWidget::setText(const QString &newText)  {

}

void CmdWidget::setChangefor(const QString& c) {
    if (c.isEmpty()){
        SYE << tr("Se introdujo un campo vacío: \"%1\" para el widget")
               .arg(c);
        return;
    }
    _changefor = c.split(",",QString::SkipEmptyParts);


}

void CmdWidget::buildWidget() {
//     lineedit = new QLineEdit;

}


void CmdWidget::doReturn() {

}

CmdWidget::~CmdWidget()
{
    if ( lineedit != NULL ) {
        delete lineedit;
    }
}

bool CmdWidget::isValid(QString& value) {
    if (value.isEmpty()) {
        SYW << tr("No se lleno el valor para un widget");
        return false;
    }

    if ( !conf().contains("validation")) {
        return true;
    }
    QString mypattern = conf()["validation"].toString().trimmed();

    if (mypattern.isEmpty()) {
        return true;
    }

    QRegExp rx;
    rx.setPattern(mypattern);
    QString myvalue = value.trimmed();

    SYD << tr("...CmdWidget::isValid...mypattern:|%1|....myvalue=:|%2|")
           .arg(mypattern)
           .arg(myvalue);

    bool result = rx.exactMatch(myvalue);
    return result;
}

void CmdWidget::insertAndClose() {

}

void CmdWidget::setOptionsProperties(const QStringList ps) {
    if (principalWidget == NULL ) {
        qDebug("...principalWidget == NULL...");
        return;
    }
    foreach(QString p, ps){
        QStringList  fieldproperty = p.split("::");
        if ( fieldproperty.count() > 1 ) {
            QString localproperty = fieldproperty.at(0);
            QVariant value = fieldproperty.at(1);
            bool result = principalWidget->setProperty(qPrintable(localproperty),value);
            qDebug("      CmdWidget::setOptionsProperties...localproperty: %s", qPrintable(localproperty));
            qDebug("      CmdWidget::setOptionsProperties...value: %s", qPrintable(value.toString()));
            if (!result) {                
                qDebug("La propiedad de nombre \"%s\" no existe",qPrintable(localproperty));
            }
            else {
                if (QString("echoMode") == localproperty &&
                    QString("Password") == value.toString() ) {
                    qDebug("isPassword");
                    _ispassword = true;
                }
            }

        }
    }

}

void CmdWidget::cancelAndClose() {

}

QString CmdWidget::text() const {
    if (lineedit != NULL ) {
        return lineedit->text();
    }
    return QString("");
}

void CmdWidget::setFocus ( Qt::FocusReason reason ) {


/*     QWidget::setFocus ( reason );
     if ( lineedit != NULL ) {
          lineedit->setFocus( reason);
     }
  */   
}



void CmdWidget::changeLblValidator(const QString& text) {

    QString mytext = text;
    if ( validator() == NULL ) {
        if ( !text.isEmpty()) {
            lblvalidator->setText( "<b><font color=\"Green\">+</font></b>" );
        }
        else {
            lblvalidator->setText( "<b><font color=\"Red\">-</font></b>" );
        }
    }
    else  {
     int pos = 0;
     if ( validator()->validate(mytext, pos ) == QValidator::Acceptable ) {
	lblvalidator->setText( "<b><font color=\"Green\">+</font></b>" );
     }
     else {
	 lblvalidator->setText( "<b><font color=\"Red\">-</font></b>" );
       }      
    }

	
}
QStringList CmdWidget::options() const {

    return _options;
}


