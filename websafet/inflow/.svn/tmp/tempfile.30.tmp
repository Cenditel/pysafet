/****************************************************************************
**
** Copyright (C) 2006-2006 Trolltech ASA. All rights reserved.
**
** This file is part of the example classes of the Qt Toolkit.
**
** This file may be used under the terms of the GNU General Public
** License version 2.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of
** this file.  Please review the following information to ensure GNU
** General Public Licensing requirements will be met:
** http://www.trolltech.com/products/qt/opensource.html
**
** If you are unsure which license is appropriate for your use, please
** review the following information:
** http://www.trolltech.com/products/qt/licensing.html or contact the
** sales department at sales@trolltech.com.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/
/*
* SAFET Sistema Automatizado para la Firma Electr?nica y Estampado de Tiempo
* Copyright (C) 2008 V?ctor Bravo (vbravo@cenditel.gob.ve), Antonio Araujo (aaraujo@cenditel.gob.ve
*
* CENDITEL Fundacion Centro Nacional de Desarrollo e Investigaci?n en Tecnologías Libres
*
* Este programa es software libre; Usted puede usarlo bajo los t?rminos de la licencia de
* software GPL versi?n 2.0 de la Free Software Foundation.
*
* Este programa se distribuye con la esperanza de que sea ?til, pero SI NINGUNA GARANT?A;
* tampoco las impl??citas garant??as de MERCANTILIDAD o ADECUACIÓN A UN PROP?SITO PARTICULAR.
* Consulte la licencia GPL para m?s detalles. Usted debe recibir una copia de la GPL junto
* con este programa; si no, escriba a la Free Software Foundation Inc. 51 Franklin Street,
* 5? Piso, Boston, MA 02110-1301, USA.
*
*/

#include <QtGui>
#include <QtXml>
#include <QCloseEvent>
#include <QGraphicsSvgItem>
#include <QToolBar>
#include <QLatin1String>
#include <QWebFrame>
#include <QDesktopServices>


#include <getopt.h>
#include "mainwindow.h"
#include "textedit.h"
#include "qcmdcompleter.h"
#include "SafetTextParser.h"
#include "assistant.h"
#include "threadconsole.h"
#ifdef SAFET_OPENSSL
#include <openssl/rand.h>
#include "SafetCipherFile.h"
#endif
#include "dialogflowparameters.h"
#include "combowidget.h"
#include "getfilewidget.h"
#include "listwidget.h"
#include "texteditwidget.h"
#include "datetimewidget.h"
#include "numberwidget.h"
#include "suggestwidget.h"
#include "SafetBinaryRepo.h"

<<<<<<< .mine
=======
// Variables Estáticas

>>>>>>> .r1559
SafetYAWL* MainWindow::configurator = NULL;
QStatusBar* MainWindow::mystatusbar = NULL;
QStringList  MainWindow::sbmenulist;
MainWindow *MainWindow::mymainwindow = NULL;
QString MainWindow::currentaccount = "";
QString MainWindow::currentrole = "";
QString MainWindow::currentrealname = "";
QString MainWindow::showString = "";
bool MainWindow::_issigning = false;
QString MainWindow::_currentCommonName = "";
QMap<QString,QPair<QString,QString> > MainWindow::_graphs;

//ThreadConsole MainWindow::myThreadConsole(NULL);


QMap<QString,QStringList> MainWindow::permises; // Estructura para guardar los permisos

int MainWindow::gviewoutputwidth = 800;
int MainWindow::gviewoutputheight = 600;
bool MainWindow::_isrestarting = false;
QTimer MainWindow::_panelinfotimer;
int MainWindow::_seconstohide = 0;

//ThreadConsole * MainWindow::myThreadConsole = NULL;

MainWindow::MainWindow(const QString& path)
    : streamText( &outputText )
{

<<<<<<< .mine

    QCoreApplication::addLibraryPath ( "/home/comalameister/PySafet/plugins/sqldrivers" );
    QCoreApplication::addLibraryPath ( "/home/comalameister/PySafet/plugins" );
=======
    QCoreApplication::addLibraryPath ( "/home/victorrbravo/PySafet/plugins/sqldrivers" );
    QCoreApplication::addLibraryPath ( "/home/victorrbravo/PySafet/plugins" );
>>>>>>> .r1559

    _wfnumpars  = 0; // Contador temporal utilizado para calcular el número de parámetro en la función GetWidget
    MainWindow::_isrestarting = false;
     //** Inicializacion de variables
     //** ...

     _isloadeditactions = false;  // No se han cargado las acciones
     SafetYAWL::listDynWidget = NULL;

     parsed = false;
     MainWindow::mymainwindow = this; // Colocando direcci?n de MainWindow
     _listprincipalcount = 0; // Contador para la variable actual

     _checkgoprincipal = false;
     _issmartmenuvisible = false;
    // ** Colocar los manejadores para Los servicioes del Escritorio (QDesktopServices)


     // ** Configurando el Menu de la pantalla principal

     _currentjson = QLatin1String("");

     // Colocar estilo principal




     _dirInput = SafetYAWL::getConf()["Input/path"];
     if ( !_dirInput.endsWith("/") ) _dirInput.append("/");

     _pathdoc = SafetYAWL::getConf()["Input/file"];

     filecompleters.append( _dirInput+_pathdoc);

     filecompleters.append( _dirInput + SAFETCONSOLEFILE );
     filecompleters.append( _dirInput + SAFETCONFIGFILE );
     filecompleters.append( _dirInput + SAFETMANAGEMENTSIGNFILE );
     filecompleters.append( _dirInput + SAFETUSERSFILE );




     loadSettings();


     // ********* Cargar Widgets Plugins
     int countplug = 0;
     SafetYAWL::fileout.close();
     SafetYAWL::filelog.close();
     QString logpath = SafetYAWL::getConf()["Log/filepath"];
     foreach( QString s, plugs() ) {
          if ( loadWidgetPlugins( s  ) ) {
              qDebug("...loadWidgetPlugins: %s",qPrintable(s));
              countplug++;
          }
     }


     SafetYAWL::fileout.open(stdout, QIODevice::WriteOnly);
     SafetYAWL::streamout.setDevice(&SafetYAWL::fileout);



     SafetYAWL::filelog.setFileName(logpath + /*"/safet.log"*/ SafetYAWL::FILENAMELOG);
     qDebug("..asignado archivo log: %s",
            qPrintable(logpath + /*"/safet.log"*/ SafetYAWL::FILENAMELOG));
     SafetYAWL::filelog.open(QIODevice::Append);
     SafetYAWL::streamlog.setDevice(&SafetYAWL::filelog);

     SafetYAWL::streamlog.turnOnAll();




     _itemredraw = NULL;
     runningConsole = false;

     jscriptload = false; // No cargar el script


     // Conectando el timer del panel de resultados



    initApp = false;

    // *** Conexiones

    // para mostrar el assistant
    // Colocar la Configuracion Local
    QLocale::setDefault(QLocale::C);
//    setlocale(LC_ALL, "C");

    // Configurar lista de mensajes de Digidoc
    SafetDocument::configureDigidocErrorString();


// ------------------------
    // verificar la configuracion de la fuente de datos
    // se coloca luego de new SafetYAWL() para que los archivos de
    // configuracion ya esten leidos


    if (path.isEmpty()) {
        _currconfpath = QDir::homePath();
    }
    else {
        _currconfpath = path;
        SafetYAWL::pathconf = path + "/" + Safet::datadir;
    }
    if ( _currconfpath.isEmpty()) {
        _currconfpath = QLatin1String("/var/www/");
    }

    QString authconfbin = _currconfpath+ "/.safet/auth.conf.bin";
    if (!QFile::exists(authconfbin)) // no existe el auth.conf.bin asi que se hace todo el proceso
    {
     

    }

    MainWindow::configurator = new SafetYAWL(_currconfpath + "/" + Safet::datadir);
    //if ( countplug > 0 ) {
        SafetYAWL::loadAllConfFiles(3 /* AuthConf */ );
    //}


    if( MainWindow::configurator ) {
        MainWindow::configurator->openDataSources();
    }

    SYD << tr("....MainWindow::MainWindow...SafetYAWL::pathconf...:|%1|")
           .arg(SafetYAWL::pathconf);
    
    loadAuthorization();
    loadInfo();



}

QString MainWindow::loadReportTemplate(const QString& json,const QString &filename,
                                       const QString& nameoperation) {

    QString html;

    QStringList mylist = nameoperation.split(":",QString::SkipEmptyParts);

    QString shortnameop = mylist.at(mylist.count()-1);


        QString fullnamePage;
        if ( filename.isEmpty()) {
            fullnamePage = SafetYAWL::getConf()["Reports/general.template"];
        }
        else {
            fullnamePage = filename;
        }
//       QString namePage = fullnamePage.section("/",-1);


       QFile infile(fullnamePage);
       if ( !infile.open(QIODevice::ReadOnly) ) {

               SYE << tr("No es posible leer el archivo de plantilla: \"%1\" ")
                      .arg(fullnamePage);
           return html;
       }

       QTextStream in(&infile);
       in.setCodec("ISO 8859-1");
       bool isreplacing = false;
       while(!in.atEnd()) {
           QString line = in.readLine();
           if (line.indexOf("<SAFET/>") != -1 && !isreplacing) {
                line.replace("<SAFET/>",json);
                isreplacing = true;
           }

           if (line.indexOf("<SAFETCURRENTACCOUNT/>") != -1 && !isreplacing) {
               QString myformat = SafetYAWL::getConf()["GeneralOptions/account.format"].trimmed();
               if ( myformat.isEmpty()) {
                   myformat = "%1 - %2/%3";
               }
               else {
                   myformat.replace("%realname","%1");
                   myformat.replace("%accountname","%2");
                   myformat.replace("%rolname","%3");
               }

               QString curr;

               if ( !MainWindow::currentaccount.isEmpty()) {
               curr = QString(myformat)
                                      .arg(MainWindow::currentrealname)
                       .arg(MainWindow::currentaccount)
                       .arg(MainWindow::currentrole);
               }


               line.replace("<SAFETCURRENTACCOUNT/>",curr);
           }

           if ( line.indexOf("<TEMPLATEPATH/>")!= -1 )  {
               line.replace("<TEMPLATEPATH/>",templatePath());
           }
           if ( line.indexOf("<MODULESMENU/>")!= -1 )  {
               line.replace("<MODULESMENU/>",generateModulesMenu());
           }

           if ( line.indexOf("<SAFETRETURNCONSOLE/>")!= -1 )  {
               line.replace("<SAFETRETURNCONSOLE/>",returnFormLink(shortnameop));
           }

           html += line;
           html += "\n";

       }

       infile.close();

       return html;


}

QString MainWindow::returnFormLink(const QString& nameoperation) {
    QString result;
    result =  tr("<br/> <a href=\"%1\">Regresar a la consulta</b></a>")
            .arg(hostURL()+"/"+QString("defconsole:operacion:%1")
                 .arg(nameoperation));

     return result;

}

QString MainWindow::generateModulesMenu() {
    QString result;
    QString hurl = hostURL();
    result = QString("<div id=\"nav\">"
            "<ul class=\"sf-menu dropdown\">"
                    "<li><a href=\"%1\">Inicio</a></li>"
                "<li class=\"selected\"><a href=\"%2\">Agregar/Modificar información</a></li>"
                "<li><a href=\"%3\">Listar/Graficar/Consultar</a></li>"
                "<li><a href=\"%4\">Consulta Rápida</a></li>"
//                "<li><a href=\"%5\">Configuración</a></li>"
//                "<li><a href=\"%6\">Usuarios/Roles</a></li>"
                "<li><a href=\"%5\">Créditos</a></li>"
                "<li><a href=\"%6\">Cerrar Sesión</a></li>"
            "</ul>"
        "</div>")
            .arg(hurl+"/login")
            .arg(hurl+"/goinputform")
            .arg(hurl+"/goinputconsole")
            .arg(hurl+"/goquickconsole")
//            .arg(hurl+"/goconfigure")
//            .arg(hurl+"/gousers")
            .arg(hurl+"/goabout")
            .arg(hurl+"/logout");


    return result;
}

QString MainWindow::menuCommands() {
    QString result;
    QString TEMPL  = QString("<a href=\"%2\">%1</a><br/>");
    QString TEMPLONLY  = QString("%1<br/>");
    QString TEMPLTITLE  = QString("<br/><h3>%1</h3></a>");
    DomModel* mymodel = new DomModel(inputPath(),NULL);
    Q_CHECK_PTR( mymodel );

    QString modulename = inputPath().section("/",-1).split(".").at(0);

    QMap<QString,bool> myperms;

    QStringList commands = mymodel->getCommands(false,true);
    QString currtitle;
    QString curroperations;
    QMap<QString,QString> mypmap = loadPermisesHierarchy();
    foreach(QString k, mypmap.keys()) {
        SYD << tr("....MainWindow::menuCommands()...mymap[%1]=%2")
               .arg(k)
               .arg(mypmap[k]);
    }


    foreach(QString c, commands) {
        QString title = c;
        if (title.startsWith(QLatin1String("operacion:titulo::"))) {
            if (!curroperations.isEmpty()) {
                result += currtitle;
                result += curroperations;
                curroperations = "";
            }
            currtitle = "";
            title = c.mid(QString("operacion:titulo::").length());
            currtitle =  TEMPLTITLE
                    .arg(MainWindow::convertOpToTitle(title));
            continue;
        }

        myperms= MainWindow::doPermiseExecOperationAction(c);

        if (myperms.isEmpty()) {
            continue;
        }




        if (myperms.contains("execute") && myperms["execute"]) {
            curroperations += TEMPL
                    .arg(MainWindow::convertOpToTitle(title))
                    .arg(hostURL()+"/"+modulename+":"+title);

        }
        else {
            if (myperms.contains("read") && myperms["read"]) {
                curroperations += TEMPLONLY
                        .arg(MainWindow::convertOpToTitle(title));
            }
        }

    }
    if (!curroperations.isEmpty()) {
        result += currtitle;
        result += curroperations;
        curroperations = "";
    }


    return result;


}

QString MainWindow::convertOpToTitle(const QString& op) {
    QString result;
    if ( op.isEmpty()) {
        return op;
    }

    result = op;
    result.replace("operacion:","");
    result.replace("_"," ");
    QStringList mylist = result.split(QRegExp("\\b"),QString::SkipEmptyParts);

    if (mylist.isEmpty()) {
        return op;
    }

    bool isupper = true;
    QString myword = mylist.at(0);
    for (int j=0; j < myword.length();j++) {
        if (!myword.at(j).isUpper()) {
            isupper = false;
            break;
        }
    }
    if ( !isupper ) {
        result = myword.mid(0,1).toUpper()+myword.mid(1).toLower();
    }
    else {
        result = myword;
    }
    for(int i=1; i < mylist.count();i++) {
        QString myword = mylist.at(i);
        bool isupper = true;
        for (int j=0; j < myword.length();j++) {
            if (!myword.at(j).isUpper()) {
                isupper = false;
                break;
            }
        }
        if ( !isupper ) {
           myword =  myword.toLower();
        }
        result += " ";
        result += myword;
    }



    return result;
}

void MainWindow::registerLogin(const QString& user) {
    SYA << tr("LOGIN:El usuario \"%1\" ha ingresado al sistema SAFET")
           .arg(user);
}

void MainWindow::registerLogout(const QString& user) {

    MainWindow::currentaccount = "";
    MainWindow::currentrole = "";

    SYA << tr("LOGOUT:El usuario \"%1\" ha salido del sistema SAFET")
           .arg(user);

}

void MainWindow::log(const QString& message) {

    SYA << message;
}


QString MainWindow::generateFormHead(const QString& o) {
    QString purl = o.section("/",-1);
    QStringList purls = purl.split(":");
    if (purls.count() < 3) {
        SafetYAWL::streamlog
                << SafetLog::Error
                   <<  tr("Al obtener el formulario la operación \"%1\" es Inválida")
                      .arg(purl);
        return QLatin1String("");
    }
    QString modname = purls.at(0);
    int npos = purl.indexOf(":");
    purl = purl.mid(npos+1);
    DomModel* mymodel = new DomModel(inputPath(),NULL);
    Q_CHECK_PTR( mymodel );

    QString myflowname = "/home/vbravo/.safet/flowfiles/flujogeneralPorHitoYPropietario.xml";
    SYD << tr("generateFormHead: purl: %1")
           .arg(o);
    QStringList  keymodifyfields = mymodel->fieldsWithAttr(purl);
    SYD << tr("generateFormHead: operacion: %1")
           .arg(o);

    QString result;
    QString firstkeymodifyfield;

    result = QString("<html><head>"
            "<script src=\"%1/jquery-latest.js\"></script>\n"
            "<link type=\"text/css\" href=\"%1/css/ui-lightness/jquery-ui-1.8.8.custom.css\" rel=\"Stylesheet\" />\n"
            "<script src=\"%1/js/jquery.ui.custom.js\"></script>\n"
            "<script src=\"%1/jquery.jec-1.3.1.js\"></script>\n"
            "<script src=\"%1/development-bundle/ui/i18n/jquery.ui.datepicker-es.js\"></script>\n"
            "<script>\n")
            .arg(hostMediaPath());


    result += QString("$(document).ready(function(){\n");


    foreach(QString keymodifyfield, keymodifyfields) {
        if ( firstkeymodifyfield.isEmpty()) {
            if ( keymodifyfield.startsWith(QLatin1String("::literal:"))) {
                  firstkeymodifyfield = QString("\"%1\"").arg(keymodifyfield
                                                              .mid(QString("::literal:").length()));
            }
            else {
                    firstkeymodifyfield = QString("$(\"#%1\").val()").arg(keymodifyfield);
            }
            SYD << tr("generateFormHead....firstkeymodifyfield:|%1|")
                   .arg(firstkeymodifyfield);

        }
        SYD << tr("generateFormHead: ....keymodifyfield: |%1|")
               .arg(keymodifyfield);


         QString newresult =  QString(""

                          "$(\"#%2\").change(\n"
                          "function() "
                          "{\n"
                          "    $.post(\"%1/loaddata\",{ id:$(this).val(),\n"
                          "    op:document.getElementById(\"safetoperation\").value,\n"
                          "    modname:\"%3\",\n"
                          "    primary:this.id},\n"
                          " function(data)"
                          " {\n"
                          "  mylist = data.split(\"<SAFETSEPARATOR/>\");\n"
                          "  htmlsep = false;\n"
                          "  if (mylist.length < 2) {\n"
                          "    mylist = data.split(\"<SAFETHTMLSEPARATOR/>\");\n"
                          "    htmlsep = true;\n "
                          "  }\n"
                          "  for(i=0; i < mylist.length;i++){\n"
                          "       myname  = \"\";\n"
                          "       myvalue = \"\"; \n"
                          "       myname = mylist[i].substr(0,mylist[i].indexOf(\":\"));\n"
                          "       if (myname.length == 0 ) {\n"
                          "               continue;\n"
                          "       }\n"
                          "       myvalue = mylist[i].substr(mylist[i].indexOf(\":\")+1);\n"
                          "       j= 0;\n"
                          "       for(j=0; j<myname.length;j++){\n"
                          "               if ( (myname.charCodeAt(j)!=32) && (myname.charCodeAt(j)!=13) && (myname.charCodeAt(j)!= 10) ) {\n"
                          "                       break;\n"
                          "               }\n"
                          "       }\n"
                          "       myname = myname.substr(j);\n"
                          "       j=myvalue.length-1;\n"
                          "       lastpos = myvalue.length;\n"
                          "       for(j=myvalue.length-1;j>0;j--){\n"
                          "               if (myvalue.charAt(j) != ' ') {\n"
                          "                       break;\n"
                          "               }\n"
                          "               lastpos = lastpos -1;\n"
                          "       }\n"
                          "       myvalue = myvalue.substr(0,lastpos);\n"
                          "       if (document.getElementById(myname)) {\n"
                          "          if (htmlsep == true ) {\n"
                          "               $(\"#\"+myname).html(myvalue);\n"
                          "               if ( $(\"#\"+myname).is(\"input\") ) {\n "
                          "                  document.getElementById(myname).value = myvalue; \n   "
                          "               }                                     \n "
                          "               else {                                 \n"
                          "                 $(\"#\"+myname).html(myvalue);\n     \n"
                          "               }                                      \n"
                          "          } else {"
                          "               document.getElementById(myname).value = myvalue;\n"
                          "          }\n"
                          "      }\n"
                          "  }\n"
                          " });\n"
                          "});\n")
//                .arg(hostMediaPath())
                .arg(hostURL())
                .arg(keymodifyfield)
                 .arg(modname);


         result += newresult;

    }


    result +=  QString("$( \"#parsdialog\" ).dialog({\n"
                       "  autoOpen: false,\n"
                       "   height: 400,\n"
                       "  width: 510,\n"
                       "  modal: true,\n"
                       "  buttons: {\n"
                       "     \"Enviar\": function() {\n"
                       "       var newFields = document.getElementById('safetfieldset');\n"
                       "       var insertFormHere = document.getElementById('safetmarkup');\n"
                       "       insertFormHere.parentNode.insertBefore(newFields.cloneNode(true),insertFormHere);\n"
                       "       var copyFields = newFields;"
                       "       copyFields.style.display = 'none';\n"
                       "       var insertHere = document.getElementById('safetspan');\n"
                       "       insertHere.parentNode.insertBefore(copyFields,insertHere);\n"
                       "       $( this ).dialog( \"close\" );\n"
                       "       }\n"
                       "  },\n"
                       "  close: function() {\n"
                       "                 $( this ).dialog( \"close\" );\n"
                          "}\n"
                       "});\n"
                       "$( \"#parsbutton\" ).button().click(function() {\n"
                       "   $.post(\"%1/loadpars\",\n"
                       "          {op:document.getElementById(\"safetoperation\").value,\n"
                       "          modname:\"%3\",\n"                       
                       "         primary: %2 },\n"
                       "         function(data){\n"
                       "            if (data==\"SafetErrorFaltanDatos\") {\n"
                       "                  alert(\"Debe Seleccionar un opción de flujo de trabajo \\npara ver el Cuadro de Parámetros\");\n"
                       "                  return;\n"
                       "            }\n               "
                       "            document.getElementById(\"safetfieldset\").innerHTML = data;\n"
                       "            $( \"#parsdialog\" ).dialog( \"open\" );\n"
                       "         });\n"
                       "  });\n"
                       "$( \"#safetsubmit\" ).button().click( function() {\n"
                       "                 document.getElementById(\"safettable\").prepend(document.getElementById(\"safetfieldset\").innerHTML);\n"
                       "                 alert(document.getElementById(\"safetform\").innerHTML);"
                       "                 $( \"#safeform\" ).submit();\n"
                       "});\n"
                       "$( \"#safetcancel\" ).button().click(function() {\n"
                       "        $( \"#safeform\" ).reset();\n"
                       "});\n"
//                       "});\n"
                       "});\n\n"
                       "</script>\n"
                       "<style>\n"
                       "body { font-size: 80%; }\n"
                       "label, input { display:block; }\n"
                       "input.text { margin-bottom:12px; width:95%; padding: .4em; }\n"
                       "fieldset { padding:0; border:0; margin-top:25px; }\n"
                       "h1 { font-size: 1.2em; margin: .6em 0; }\n"
                       "div#users-contain { width: 350px; margin: 20px 0; }\n"
                       "div#users-contain table { margin: 1em 0; border-collapse: collapse; width: 100%; }\n"
                       "div#users-contain table td, div#users-contain table th { border: 1px solid #eee; padding: .6em 10px; text-align: left; }\n"
                       ".ui-dialog .ui-state-error { padding: .3em; }\n"
                       ".validateTips { border: 1px solid transparent; padding: 0.3em; }\n"
                       "</style>\n"

                       "</head>\n"
                       "<body>\n"
                       "")
            .arg(hostURL())
            .arg(firstkeymodifyfield)
            .arg(modname);



    return result;
}

QString MainWindow::generateModifyHTML(const QString& operation, const QString& fieldname,
                                       const QString& key) {
    QString result;
    SYD << tr("MainWindow::generateModifyHTML....operation:|%1|..."
              "fieldname:|%2|....key:|%3|")
           .arg(operation)
           .arg(fieldname)
           .arg(key);
    DomModel* mymodel = new DomModel(inputPath(),NULL);
    Q_CHECK_PTR( mymodel );
    QStringList mylist;
    SafetYAWL::streamlog
            << SafetLog::Debug
               << tr("MainWindow::generateModifyHTML...operacion: |%1|..fieldname:|%2|...key:|%3|")
                  .arg(operation)
                  .arg(fieldname)
                  .arg(key);

    if (operation.startsWith(QLatin1String("Listar_"))
            || operation.endsWith(QLatin1String("Siguiente_estado"),Qt::CaseInsensitive)
            || operation.startsWith(QLatin1String("Siguiente_estado"),Qt::CaseInsensitive)
             ||   operation.endsWith(QLatin1String("Generar_gráfico_coloreado"),Qt::CaseInsensitive)
             ||   operation.endsWith(QLatin1String("con_autofiltro"),Qt::CaseInsensitive)
             ||   operation.endsWith(QLatin1String("con_filtrorecursivo"),Qt::CaseInsensitive)
        ){
        result = QString("%1")
                .arg(formFieldsForKey(operation,fieldname, key,mymodel));
        SafetYAWL::streamlog
                << SafetLog::Debug
                   << tr("MainWindow::generateModifyHTML...result:|%1|")
                      .arg(result);
    }
    else if (operation.startsWith(tr("agregar_ticket") ) ) {
        SYD << tr("......MainWindow::generateModifyHTML....agregar_ticket....key:|%1|")
               .arg(key);
        QString pathflow = key;
        //pathflow = pathflow.section(SafetYAWL::LISTSEPARATORCHARACTER,1,1);
        SYD << tr("......**MainWindow::generateModifyHTML....pathflow:|%1|")
               .arg(pathflow);
        result = QString("%1")
                .arg(formFieldsForKey(operation,fieldname, pathflow,mymodel));
         SYD << tr("MainWindow::generateModifyHTML...result:|%1|")
                      .arg(result);
    }
    else if ( operation.startsWith(tr("Cambiar_fecha")) ) {

        doRestoreGraph(Safet::PLANNEDGRAPHSFILENAME);
        SYD << tr("......MainWindow::generateModifyHTML....key:|%1|")
               .arg(key);
        if (!graphs().contains(key)) {
            SYW << tr("No se encuentra en el repositorio el archivo de grafos planificados");
            return result;
        }
        QString pathflow = graphs()[key].second;
        pathflow = pathflow.section(SafetYAWL::LISTSEPARATORCHARACTER,1,1);

        SYD << tr("......MainWindow::generateModifyHTML....pathflow:|%1|")
               .arg(pathflow);

        result = QString("%1")
                .arg(formFieldsForKey(operation,fieldname, pathflow,mymodel));
        SafetYAWL::streamlog
                << SafetLog::Debug
                   << tr("MainWindow::generateModifyHTML...result:|%1|")
                      .arg(result);

    }
    else  {
        result = mymodel->getUpdateString(operation,fieldname,key,mylist);
        SafetYAWL::streamlog
                << SafetLog::Debug
                   << tr("generateModifyHTML: |%1|")
                      .arg(result);
    }
//    result = "Componente: AppPequenita";

    return result;
}

QString MainWindow::generateFormFooter(const QString& o) {
    QString purl = o.section("/",-1);
    if (purl.split(":").count() < 2) {
        SafetYAWL::streamlog
                << SafetLog::Error
                   <<  tr("Al obtener el formulario la operación \"%1\" es Inválida")
                      .arg(purl);
        return QLatin1String("");
    }

    QString result = "</body>\n"
    "</html>";
    return result;
}

QString MainWindow::formFieldsForKey(const QString& o, const QString& fieldname,
                                     const QString& keyvalue,
                                     DomModel* mymodel) {
    QString result;
    QString purl = o.section("/",-1);
    QString cmd;
    if (purl.split(":").count() > 1 ) {
        cmd = purl.split(":").at(1).trimmed();
    }
    else {
        cmd = purl;
    }


    Q_CHECK_PTR( mymodel );


//    result += QString("<tr><td></td><td><input name=\"safetoperation\""
//                     " id=\"safetoperation\" type=\"hidden\" value=\"%1\"/></td></tr>\n")
//            .arg(cmd);

    QStringList fields = mymodel->getFields(cmd);
    SafetYAWL::streamlog
            << SafetLog::Debug
               << tr("MainWindow::formFieldsForKey....fields.count():%1")
                  .arg(fields.count());

    foreach(QString f, fields) {
        QString newfield = f;
        QString trimfield = f;
        bool mandatory = false;

        if (newfield.endsWith("*")) {
            newfield.chop(1);
            trimfield = newfield.trimmed();
            mandatory = true;
        }
        if ( fieldname == trimfield) {
            continue;
        }
        SafetYAWL::streamlog
                << SafetLog::Debug
                   << tr("MainWindow::formFieldsForKey....trimfield:%1")
                      .arg(trimfield);

        CmdWidget* mywidget = mymodel->selWidgetFromField(cmd,trimfield);

        QString newitem;
        if (mywidget == NULL ) {
            SafetYAWL::streamlog
                    << SafetLog::Warning
                       << tr("No hay widget para \"%1\"").arg(trimfield);
            newitem = tr("No hay widget para \"%1\"\n").arg(trimfield);
        }
        else {
            if (!mywidget->conf().contains("changefor")) {
                continue;
            }
            SYD << tr("MainWindow::formFieldsForKey: |%1|")
                   .arg(fieldname);
            if ( !mywidget->conf()["changefor"].toString().split(",",QString::SkipEmptyParts).
                    contains(fieldname)) {
                continue;
            }
            newitem = QString("%3: %1%2\n")
                  .arg(mywidget->htmlForKey(keyvalue))
                   .arg(SafetYAWL::LISTHTMLSEPARATOR)
                   .arg(trimfield);
                SYD << tr("MainWindow::formFieldsForKey....newitem:%1")
                          .arg(newitem);


        }
          result += newitem;


    }
    if (result.count() > SafetYAWL::LISTSEPARATORCHARACTER.count()) {
        //result.chop(SafetYAWL::LISTSEPARATORCHARACTER.count());
    }
    return result;

}

QString MainWindow::menuForm(const QString& o) {
    QString result;
    QString purl = o;
    purl = purl.section("/",-1);
    QStringList purls = purl.split(":");
    if ( purls.count() < 3) {
        SafetYAWL::streamlog
                << SafetLog::Error
                   <<  tr("Al obtener el formulario la operación \"%1\" es Inválida")
                      .arg(purl);
        return QLatin1String("");
    }
    int npos = purl.indexOf(":");
    purl = purl.mid(npos+1);
    QString formurl = purl;

    if ( purls.at(0) == "deftrac" ) {
        formurl.replace("operacion:","forma:");
    }
    else if (purls.at(0) == "defconsole" ) {
        formurl.replace("operacion:","consola:");
    }
    SYD << tr("MainWindow::menuForm...menuForm....formurl:|%1|")
                  .arg(formurl);


    SYD << tr("(1)...MainWindow::menuForm...menuForm....SafetYAWL::pathconf:|%1|")
           .arg(SafetYAWL::pathconf);
    result = QString("<form action=\"%1\" id=\"safetform\" name=\"safetform\" "
               "class=\"signin\" method=\"post\"  enctype=\"multipart/form-data\">\n")
            .arg(hostURL() + "/" + formurl);

    DomModel* mymodel = new DomModel(inputPath(),NULL);
    Q_CHECK_PTR( mymodel );

    QString cmd = purl.split(":").at(1).trimmed();
    result += QString("<h3>%1</h3>")
            .arg(convertOpToTitle(cmd));

    result += QString("<br/><input name=\"safetoperation\""
                     " id=\"safetoperation\" "
                      "type=\"hidden\" value=\"%1\"/>\n<br/>")
            .arg(cmd);

    result += "<table id=\"safettable\" name=\"safettable\" style=\"\">\n";




    QStringList fields = mymodel->getFields(cmd);
    foreach(QString f, fields) {
        QString newfield = f;
        QString trimfield = f;
        bool mandatory = false;

        if (newfield.endsWith("*")) {
            newfield.chop(1);
            trimfield = newfield.trimmed();
            mandatory = true;
        }
        SYD << tr("...MainWindow::menuForm...menuForm....cmd:|%1|...trimfield:|%2|")
               .arg(cmd)
               .arg(trimfield);

        SYD << tr("...MainWindow:::menuForm...mywidget (1)");
        CmdWidget* mywidget = mymodel->selWidgetFromField(cmd,trimfield);
          SYD << tr("...MainWindow:::menuForm...mywidget (2)");

        if (mywidget == NULL ) {            
                       SYW << tr("No hay widget para \"%1\"").arg(trimfield);
            continue;
        }
          QString newitem = QString("<tr><td>%1</td><td>%2</td></tr>\n")
                  .arg(convertOpToTitle(f))
                  .arg(mywidget->html());

          SYD << tr("...MainWindow:::menuForm...mywidget->html():|%1|")
                 .arg(mywidget->html());

          SYD << tr("...MainWindow:::menuForm...newitem:|%1|")
                 .arg(newitem);

          result += newitem;


    }
    result += QString("<tr> <td></td><td></td>  </tr>\n</table>\n");

    result += QString("<span id=\"safetspan\" name=\"safetspan\"></span> \n");

    result += QString("<table><tr><td></td><td><button  id=\"safetsubmit\" "
                      "name=\"safetsubmit\""
                       " >Enviar</button>"
                      "<button id=\"safetcancel\" name=\"safetcancel\" type=\"reset\">Limpiar</button>"
                      "</td></tr>\n"
                      );
    result += QString("\n</table>"
                "\n</form>\n");
    result += addParametersDialog(formurl);
    return result;
}

QString MainWindow::addParametersDialog(const QString& nameoperation) {
    QString result;
    if ( !nameoperation.startsWith("consola:")) {
        return QString();
    }

    result =
            "<button id=\"parsbutton\" >Par&aacute;metros</button>"
            "<div class=\"demo\">\n"
            "<div id=\"parsdialog\" title=\"Par&aacute;metros\"  >\n"
                    "<p class=\"validateTips\">Cargue de nuevo la p&aacute;gina para ver los par&aacute;metros</p>\n"
                    "<form >\n"
                    "<span id=\"safetmarkup\" name=\"safetmarkup\"></span>"
                    "<div id=\"safetfieldset\" name=\"safetfieldset\">\n"
                            "Nombre<br/>\n"
                            "<input type=\"text\" name=\"name\" id=\"name\" class=\"text ui-widget-content ui-corner-all\" />\n"
                    "</div>\n"
                    "</form>\n"
            "</div>\n"
            "</div>\n";


    return result;

}

QStringList MainWindow::autoComplete(const QString& path) {

    QSet<QString> result;
    setInputPath(path);
    DomModel* mymodel = new DomModel(inputPath(),NULL);
    Q_CHECK_PTR( mymodel );

    QStringList commands = mymodel->getCommands();


    foreach(QString c, commands) {
        if ( !c.startsWith("operacion:")) {
            continue;
        }
        QString newcmd = QString("%1|").arg(c);
        result.insert(newcmd);
        if (c.split(":").count() < 2) {
            continue;
        }
        QString cmd = c.split(":").at(1).trimmed();
        QStringList fields = mymodel->getFields(cmd);
        foreach(QString f, fields) {
            QString newfield = f;
            QString trimfield = f;
            bool mandatory = false;

            if (newfield.endsWith("*")) {
                newfield.chop(1);
                trimfield = newfield.trimmed();
                mandatory = true;
            }
            CmdWidget* mywidget = mymodel->selWidgetFromField(cmd,trimfield);
            if (mywidget == NULL ) {
                result.insert(QString("No hay widget para \"%1\"").arg(trimfield));
                continue;
            }
            QStringList values = mywidget->options();
            QString namefield = newfield;
            foreach(QString v, values) {
                newfield = namefield + QLatin1String(": ") + v.trimmed() +
                        QString("|%1")
                        .arg(mandatory?QLatin1String("*"):QLatin1String(""));
                result.insert(newfield);
            }

        }



    }

    return result.toList();

}

MainWindow::~MainWindow() {

    if (SafetYAWL::listPlugins != NULL ) {
        for(int i=0; i < SafetYAWL::listPlugins->count();i++) {
            QPluginLoader* myplug = SafetYAWL::listPlugins->at(i);
            if (myplug) {

                QObject* myobject = myplug->instance();
                if (myobject) {
                    delete myobject;
                }
                myplug->unload();
            }
        }
        SafetYAWL::listPlugins->clear();
        SafetYAWL::listDynWidget->clear();
        delete SafetYAWL::listPlugins;
        delete SafetYAWL::listDynWidget;
        SafetYAWL::listPlugins = NULL;
        SafetYAWL::listDynWidget = NULL;

    }

}


void MainWindow::setToInputManagementSignDocument() {

}

void MainWindow::setToInputReports() {

}



void MainWindow::setToInputFlowGraph() {

}


QString MainWindow::getPrincipalCSS() const {
    return QString::fromUtf8(
    "* {\n"
    "color: #355670;\n"
    "font: 12px \"Arial, Liberation Sans\";\n"
    "}\n"
    "\n"
    "QTabWidget {"
    "    background-image: url(:/background.png);} \n"
    "#background\n"
    "{ background-image: url(\":/background.png\"); }\n"
    "\n"
    "/* widgets */\n"
    "QPushButton\n"
    "{\n"
    "background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #406A9E, stop: 0.75 #00355F);\n"
    "border: 0px;\n"
    "border-radius: 2px;\n"
    "color: white;\n"
    "margin-left: 1px;\n"
    "margin-right: 1px;\n"
    "min-width: 75px;\n"
    "padding: 1px 7px;\n"
    "}\n"
    "\n"
    "QDialogButtonBox QPushButton, #home QPushButton\n"
    "{ padding: 4px 7px; }\n"
    "\n"
    "QPushButton:hover, QPushButton:focus\n"
    "{\n"
    "background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #F1C157, stop:0.28 #FADF91, stop:1 #EBA927);\n"
    "color: #00355F;\n"
    "}\n"
    "\n"
    "QPushButton:disabled\n"
    "{ background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #A3AFC0, stop: 0.75 #80909D); }\n"
    "\n"
    "/* header */\n"
    "#headerLine, #headerLine2\n"
    "{ background-color: #00355F; }\n"
    "\n"
    "#cards, #languages\n"
    "{\n"
    "background-color: #00355F;"
            "\n"
    "border: 0px;\n"
    "margin-right: 0px;\n"
    "color: white;\n"
    "}\n"
    "\n"
    "#cards QListView, #languages QListView\n"
    "{\n"
    "background-color: white;\n"
    "border: 0px;\n"
    "color: #355670;\n"
    "}\n"
    "\n"
    "#cards::down-arrow, #languages::down-arrow\n"
    "{ image: url(\":/images/languages_button.png\"); }\n"
    "\n"
    "#cards::drop-down, #languages::drop-down\n"
    "{ border: 0px; }\n"
    "\n"
    "#settings, #help\n"
    "{\n"
    "background-color: #00355F;\n"
    "color: #afc6d1;\n"
    "font: bold;\n"
    "min-width: 0px;\n"
    "}\n"
    "\n"
    "#settings:hover, #settings:focus\n"
    "#help:hover, #help:focus\n"
    "{ text-decoration: underline; }\n"
    "\n"
    "#infoFrame\n"
    "{\n"
    "background-color: rgba( 255, 255, 255, 153 );\n"
    "border-radius: 3px;\n"
    "color: #668696;\n"
    "padding-left: 10px;\n"
    "padding-right: 10px;\n"
    "}\n"
    "\n"
    "#infoCard\n"
    "{ font: bold; }\n"
    "\n"
    "/* content */\n"
    "#homeButtonLabel,\n"
    "#viewContentLabel, #viewKeysLabel\n"
    "{\n"
    "color: #00355F;\n"
    "font: bold;\n"
    "}\n"
    "\n"
    "#home, #intro, #view,\n"
    "#viewContentView\n"
    "{ background-color: tra"
            "nsparent; }\n"
    "\n"
    "#viewContentFrame\n"
    "{\n"
    "background-color: rgba( 255, 255, 255, 200 );\n"
    "border: 1px solid gray;\n"
    "color: #355670;\n"
    "padding: 5px;\n"
    "}\n"
    "\n"
    "#viewKeysFrame\n"
    "{\n"
    "background-color: rgba( 255, 255, 255, 200 );\n"
    "border: 1px solid gray;\n"
    "padding: 5px;\n"
    "}\n"
    "\n"
    "#viewKeys, #viewKeysScroll\n"
    "{\n"
    "background-color: transparent;\n"
    "color: #71889A;\n"
    "}");
}

void MainWindow::setToInputForm() {

}


void MainWindow::goPrincipal() {

}

void MainWindow::setToInputConsole() {




}


void MainWindow::linkClickedSbMenu(const QUrl& url) {
    Q_ASSERT( url.toString().split(":", QString::SkipEmptyParts).count() > 1 );
    QString action = url.toString().split(SafetYAWL::LISTSEPARATORCHARACTER, QString::SkipEmptyParts).at(1);
    Q_ASSERT(!action.isEmpty());
}

void MainWindow::linkClickedSbResult(const QUrl& url) {


}

void MainWindow::createDockWindow() {

}
void MainWindow::createDockShowResultWindow() {
 
}




void MainWindow::buildMenuOnPanelsbMenu(const QString& option) {

}






void MainWindow::loadSettings() {
     int count;
     bool ok;
     QMap<QString,QVariant> conf;
     QSettings settings("CENDITEL","Safet");
     settings.beginGroup("Inflow");
     QVariant vcount(count);
     QVariant vconf(conf);
     QVariant myvar(_plugs);
     _plugs = settings.value("plugs", myvar).toStringList();
     count = settings.value("confscount", vcount).toInt(&ok);
     if ( ok == false ) {
         count = 0;
     }

     for ( int i = 0; i < count; i++) {
          QString valuename = QString("confscount%1").arg(i);
          conf = settings.value(valuename, conf).toMap();
     }

     settings.endGroup();

}

void MainWindow::writeSettings() {

     

 }


void MainWindow::setModelCompleter(int opt) {


}


void MainWindow::toDelAllWorkflow() {

}

void MainWindow::toDelOneWorkflow() {

}

void MainWindow::toClearTextEdit() {
   // limpiar la barra de estado

}


QMap<QString,bool> MainWindow::doPermiseExecOperationAction(const QString& op) {

    QMap<QString,bool> result;

    QString nameop = op;
    if (op.startsWith(QLatin1String("operacion:titulo::"))) {
        return result;
    }
    if (op.startsWith(QLatin1String("operacion:"))) {
        nameop = op.mid( QString("operacion:").length() );
    }


    if (!MainWindow::permises.contains(nameop))  {

        SYD
                << tr("La operación \"\"%1\"\" no existe en el archivo de autorización<br/>."
                      "Consulte con el administrador para que asigne el permiso solicitado").arg(op);
        return result;
    }

    if ( MainWindow::permises[ nameop ].count() < 3) {
                SYE << tr("La operación \"%1\" solo tiene \"%2\" elementos de información.<br/>Es "
                      "probable que el archivo de autorización no esté correctamente formado")
                .arg(nameop).arg(MainWindow::permises[ nameop ].count());

                return result;
    }

    QStringList mytypes = MainWindow::permises[ nameop ].at(1).split(";");

    QStringList myusers = MainWindow::permises[ nameop ].at(0).split(";");
    QStringList myroles = MainWindow::permises[ nameop ].at(2).split(";");


    foreach(QString t, mytypes) {
        QStringList mylist = t.split(":",QString::SkipEmptyParts);
        if (mylist.count()>1) {
            if (currentaccount == mylist.at(0)) {
                result[mylist.at(1)] = true;
             }
            else {
               if (myusers.contains(currentaccount) || myroles.contains(MainWindow::currentrole)) {
                     result[mylist.at(1)] = true;
               }
               else {
                   result[mylist.at(1)] = false;
               }
            }
        }
        else {
            if (myusers.contains(currentaccount) || myroles.contains(MainWindow::currentrole)) {
                result[mylist.at(0)] = true;
            }
            else {
                result[mylist.at(0)] = false;
            }
        }


    }



    return result;
}

QMap<QString,QString> MainWindow::loadPermisesHierarchy() {
    int i = 1;
    QMap<QString,QString> result;
    while(true) {
        QString mykeyconf = QString("Hierarchy/path.%1").arg(i);
        QString mypath = SafetYAWL::getAuthConf()[mykeyconf].trimmed();
        if (mypath.isEmpty() || i>10) {
            break;
        }

        QStringList mylist = mypath.split(",",QString::SkipEmptyParts);
        if (mylist.size() > 0 ) {
            if ( !result.contains(mylist.at(mylist.size()-1)) ) {
                result[ mylist.at(mylist.size()-1)] = "";
            }
            else {
                result[ mylist.at(mylist.size()-1)] += ",";
            }
            for(int j=mylist.size()-2;j>=0;j--) {
                result[ mylist.at(mylist.size()-1)] += mylist.at(j);
                result[ mylist.at(mylist.size()-1)] += ",";
            }
             result[ mylist.at(mylist.size()-1)].chop(1);
        }

        i++;
    }

    return result;
}


bool MainWindow::doPermiseExecOperation(const QString& op, QMap<QString,QString>& phierarchy,
                                        const QString& permise) {

//    SYD << tr("...MainWindow::doPermiseExecOperation...MainWindow::permises....:|%1|...permise:"
//              "|%2|")
//           .arg(MainWindow::permises.count())
//           .arg(permise);

    QString nameop = op;
    if (op.startsWith(QLatin1String("operacion:titulo::"))) {
        return true;
    }
    if (op.startsWith(QLatin1String("operacion:"))) {
        nameop = op.mid( QString("operacion:").length() );
    }
    if (!MainWindow::permises.contains(nameop))  {

        SYD
                << tr("La operación \"\"%1\"\" no existe en el archivo de autorización<br/>."
                      "Consulte con el administrador para que asigne el permiso solicitado").arg(op);
        return false;
    }

    if ( MainWindow::permises[ nameop ].count() < 3) {
                SYE << tr("La operación \"%1\" solo tiene \"%2\" elementos de información.<br/>Es "
                      "probable que el archivo de autorización no esté correctamente formado")
                .arg(nameop).arg(MainWindow::permises[ nameop ].count());
        return false;
    }
    QStringList myusers = MainWindow::permises[ nameop ].at(0).split(";");
    QStringList myroles = MainWindow::permises[ nameop ].at(2).split(";");
    if (!myusers.contains(currentaccount) && !myroles.contains(MainWindow::currentrole)) {
           SYD  << tr("El usuario <b>%1</b> no está autorizado para utilizar la operación <b>\"%2\"</b>.<br/>"
                      "Consulte con el administrador para que asigne el permiso solicitado")
                .arg(currentaccount).arg(nameop);
        return false;
    }
    QStringList mytypes = MainWindow::permises[ nameop ].at(1).split(";");

    QString realtypes;
    foreach(QString t, mytypes) {
        QStringList mylist = t.split(":",QString::SkipEmptyParts);
        if (mylist.count()>1) {
            if (currentaccount == mylist.at(0) || currentrole == mylist.at(0)) {
                realtypes += mylist.at(1);
                realtypes += ",";
            }
        }
        else {
            realtypes += mylist.at(0);
            realtypes += ",";
        }
    }
    realtypes.chop(1);

    if (!realtypes.contains(permise) && !MainWindow::checkPermiseInHierarchy(permise,phierarchy,realtypes)) {
                SYE << tr("El usuario \"%1\" no tiene autorizado  el permiso del tipo \"%3\" "
                      "que le permita utilizar la operación \"%2\"<br/>"
                      "Consulte con el administrador para que asigne el permiso solicitado")
                .arg(currentaccount).arg(nameop).arg(permise);
                SYD << tr("...MainWindow::doPermiseExecOperation...permise:|%2|...realtypes:|%1|")
                       .arg(realtypes)
                       .arg(permise);
        return false;
    }


    return true;
}

bool MainWindow::checkPermiseInHierarchy(const QString& permise,
                                         const QMap<QString,QString>& myphierarchy,
                                         const QString& realtypes) {
    SYD << tr("...MainWindow::checkPermiseInHierarchy...myphierarchy.size():|%1|")
           .arg(myphierarchy.size());
    if (!myphierarchy.contains(permise)) {
        return false;
    }
    QStringList  mylist = myphierarchy[permise].split(",",QString::SkipEmptyParts);

    foreach(QString s, mylist) {
        if (realtypes.contains(s)) {
            return true;
        }
    }
    return false;

}

void MainWindow::setupToolbar() {
}




void MainWindow::setEnabledToolBar(bool e) {

}


void MainWindow::checkSelInputTab(int opt) {
}


void MainWindow::selInputTab(int opt)  {

}


void MainWindow::toLoadWeb() {

    QString code;
    code = "SAFETlist = ["
     "{areacode: \"201\", state: \"Merida\"},"
     "{areacode: \"203\", state: \"Zulia\"},"
     "{areacode: \"204\", state: \"Trujillo\"},"
     "{areacode: \"205\", state: \"Bolivar\"}"
     "];"
     "myColumnDefs = ["
     "{key:\"areacode\",label:\"C?digo\",width:100,resizeable:true,sortable:true},"
     "{key:\"state\",label:\"Estado\",width:100,resizeable:true,sortable:true}"
     "];"
     " safetproccessData()";

    //code = "doListTable()";

    evalJS(code);

}


QString MainWindow::getScriptLen(const QSqlField& f) {

//    qDebug("...MainWindow::getScriptLen...f.type():%d",f.type());
    QString result = "40";
    switch ( f.type()) {

    case QVariant::String:
        if (f.value().toString().length() > 50 || f.name().contains("desc")) {
            result = "300";
        }
        else {
            result = "130";
        }
        break;
    case QVariant::Date:
    case QVariant::DateTime:
                result = "150";
    default:;

    }
//    qDebug("...MainWindow::getScriptLen...f.type():%d...result:|%s|...len:%d",f.type(),
//           qPrintable(result),f.value().toString().length());
//    qDebug();
    return result;
}

void MainWindow::executeJSCodeAfterLoad(/* bool ok */ ) {


    // ** Reemplazar caracteres especiales, hacen falta pruebas aqui
     currentDocuments.replace("\n","");
     // ** Reemplazar caracteres especiales, hacen falta pruebas aqui
     QString data;
    data =  QString( "safetvariable = '%1';\n").arg(_listprincipalvariable);
    data += QString("safetkey = '%1';\n").arg(_listprincipalkey);
    QStringList mylist = _listprincipaltitle.split(SafetYAWL::LISTSEPARATORCHARACTER,QString::SkipEmptyParts);
    data += QString("safettitle = '%1';\n").arg(mylist.at(0));
    if ( mylist.count() > 1 ) {
            data += QString("safetreport = '%1';\n").arg(mylist.at(1));
    }
    else {
        data += QString("safetreport = '%1';\n").arg("Reporte");
    }

    data += QString("safetlistcount = %1;\n").arg(_listprincipalcount);
    SYD << tr("....MainWindow::listDocuments..._listprincipaltitle:|%1|")
           .arg(_listprincipaltitle);

    QString jsondata;
    jsondata += "safetlist = [";
    jsondata += currentDocuments;
    jsondata += "];\n";




    jscriptcolumns = "safetcolumns  = [";
    int i = 0;
    foreach(QSqlField f, currentFields ) {

        QString scriptlen = getScriptLen(f);
         jscriptcolumns
                 += QString("{ key: \"%1\",label:\"%1\",width:%2,"
                            "resizeable:true,sortable:true},\n")
                    .arg(f.name())
                    .arg(scriptlen);

         i++;
    }
    if ( i > 0 ) {
        jscriptcolumns.chop(2);
    }
    jscriptcolumns += "];\n";
    jsondata += jscriptcolumns;

    data += jsondata;
//    qDebug("...data:\n%s\n",
//           qPrintable(data));

//    qDebug("...jscriptcolumns:\n%s\n",
//           qPrintable(jscriptcolumns));

    QString code;
    code = data;
    // Colocando los datos JSON
    _currentjson = data;
//    _currentjson = jsondata;


    // Colocando los datos JSON
    code += " ";
    code += jscriptcolumns;
    code += " ";
//    qDebug();
//    qDebug("code:\n%s",qPrintable(code));
//    qDebug();


    code = "safetproccessData();";




}

void MainWindow::generateJScriptreports(const QString& documents,
                                        const QList<QSqlField>& fields) {

     currentDocuments = documents;
     currentFields = fields;
     jscriptload = true;

}


QString MainWindow::evalJS(const QString &js) {
//     Q_CHECK_PTR( weboutput );
//     qDebug(".....evalJS...QWebFrame *frame = weboutput->page()->mainFrame();");
//    QWebFrame *frame = weboutput->page()->mainFrame();
//    return frame->evaluateJavaScript(js).toString();
    return QString("");
}

void MainWindow::toSend(bool sign) {

    
}

void MainWindow::toInputUsers() {

    SafetTextParser parser;
    QString texto;
//    texto = completingTextEdit->toPlainText().toLatin1();
    //qDebug(".. ...(1)..texto: \n|%s|\n", qPrintable(texto));

    parser.setStr( texto.toLatin1() );
    QString str = "agregar,eliminar,actualizar,mostrar";
    QString commandstr = "INSERT INTO,DELETE,UPDATE,SELECT";
    parser.setCommands(str.split(","),commandstr.split(","));
    //qDebug("....xml...(1): \n|%s|\n", qPrintable(parser.str()));
    QString xml = parser.toXml();
    //qDebug("....xml...(2): \n|%s|\n", qPrintable(xml));
    SafetYAWL::streamlog << SafetLog::Debug << tr("Cadena XML generada de la entrada: \n\"%1\"").arg(xml);
    myoutput->setPlainText(xml);


    parser.processInput( xml.toLatin1() );
    QString filepath = SafetYAWL::getConfFile().getValue("Input", "input.path").toString();
    QString filename = "defusers.xml";

    parser.openXml(filepath + "/" + filename);
    QStringList names = parser.loadNameConfs();

    foreach(QString n, names) {
//         QMap<QString,QVariant> conf = centraledit()->findConf(n);
//         parser.addConf(conf, n);
    }

    QStringList results = parser.processXml(false);

   if ( queryForErrors() ) {
       qDebug(".......****..queryforerror....");
            return;
    }

    QString fileconf = SafetYAWL::pathconf+ "/" + "auth.conf";
    if (QFile::exists(fileconf)) {
         foreach(QString s, results) {
            qDebug("(toInputUsers)toInputConfigure.......result: %s", qPrintable(s));
            proccessConfFile(s,fileconf,true);
        }


         doCipherFile(true);
         SafetYAWL::readAuthConfFile();
         qDebug("     ----toInputUsers...SafetYAWL::readAuthConfFile() ");
     }
    else {
        SafetYAWL::streamlog.initAllStack();
        SafetYAWL::streamlog
                << SafetLog::Error
                << tr("No se pueden realizar los cambios. No se encuentra el archivo :\"%1\"")
                .arg(fileconf);

        if ( queryForErrors() ) {
            qDebug(".......****..queryforerror....(2)");
                 return;
         }


    }

    showSuccessfulMessage(tr("La operación de <b>configuración</b> fue exitosa"
                             "....<b>ok!</b>"));

}

void MainWindow::showSuccessfulMessage(const QString& m) {
    QString message = QString("<table><tr><td><font color=green>%1</font>"
                              "</td></tr></table>")
            .arg(m);

}

void MainWindow::configureStatusBar() {


}



void MainWindow::showSmartMenu() {


}


void MainWindow::timeHideResult() {

}




bool MainWindow::queryForErrors() {


    QStack<QPair<QDateTime,QString> > mystack = SafetYAWL::streamlog.stopErrorStack();
    SafetYAWL::streamlog << SafetLog::Debug << trUtf8("Hay \"%1\" errores guardados en la lista. De inmediato se procede"
                                                      " a inicializar la lista de errores.")
            .arg(mystack.count());
    SafetYAWL::streamlog.stopAllStack();
    if (mystack.count() > 0 ) { // Verificacion NO exitosa
        qDebug("........mostrando ... queryerror: (******)");
        QString message = renderMessageStack(mystack,SafetLog::Error);
        QString messagew = renderMessageStack(mystack,SafetLog::Warning);
	_currenterror = message;
	if ( !messagew.isEmpty()) {
	}
        return true;
    }
    return false;

}

void MainWindow::checkSafetArguments(const QString &s) {
    SafetYAWL::argsflow.clear();
    SafetYAWL::argsflow.resize(10);
    qDebug("...entrando...MainWindow::checkSafetArguments---");
    QString argument = SafetYAWL::getConf()["Widgets/arguments.*"];
    QStringList arguments  = argument.
                     split(SafetYAWL::LISTSEPARATORCHARACTER,QString::SkipEmptyParts);

    QStringList  input = s.split(":");
    if ( input.count() != 2 ) {
        return;
    }

    qDebug("......procesando lista de argumentos....(1)...arguments.count():%d",arguments.count());
    int i = 0;
    foreach(QString a, arguments) {
        QString inputfield = "_"+a;
        qDebug("...inputfield: |%s|", qPrintable(inputfield));
        qDebug("...input.at(0).trimmed(): |%s|", qPrintable(input.at(0).trimmed()));
        if ( inputfield == input.at(0).trimmed() ) {
            qDebug("..procesando i:%d...|%s|",i,qPrintable(input.at(1).trimmed()));
            SafetYAWL::argsflow[i] = input.at(1).trimmed();
        }
        i++;

    }
    qDebug("...i: %d",i);


}

bool  MainWindow::toInputForm(const QString& action) {


     SafetTextParser parser;

     _isgui = false;
     
     SYD << tr("MainWindow::toInputForm:...... |%1|")
            .arg(action);

     SafetYAWL::streamlog.initAllStack();

     if (action.indexOf(SafetYAWL::ENDOFFLOW) >= 0 ) {
         QString message =   tr("El estado de un documento no puede cambiar al estado \"%1\"")
                             .arg(SafetYAWL::ENDOFFLOW);
         message.replace("<","&lt;");
         message.replace(">","&gt;");
         SafetYAWL::streamlog
                 << SafetLog::Error
                 << message;
         queryForErrors();
         return false;

     }

     _listprincipaltitle = "**SAFET**" + action;


     parser.setStr( action );
     QString str = "agregar,eliminar,actualizar,mostrar";
     QString commandstr = "INSERT INTO,DELETE,UPDATE,SELECT";
     parser.setCommands(str.split(","),commandstr.split(","));

     QString xml = parser.toXml();

     SafetYAWL::streamlog << SafetLog::Debug << tr("*Cadena XML generada de la entrada: \n\"%1\"").arg(xml);
     QString filepath = SafetYAWL::getConfFile().getValue("Input", "input.path").toString();
     QString filename = "deftrac.xml";

     parser.processInput( xml );
     parser.openXml(filepath + "/" + filename);
     QStringList names = parser.loadNameConfs();

     QStringList results = parser.processXml(true,true);

     if ( results.isEmpty() ) {
            if ( queryForErrors() ) {
		return false;
	    }
     }
     else {

         QString message = QString("<table><tr><td><font color=green>%1</font>"
                                   "</td></tr></table>").arg(tr("La operación fue exitosa"
                                   "....<b>ok!</b>"));
     }

     return true;

}

QString MainWindow::getFlowParameters(const QString& flowfilename){
    QString result;
    SYD << tr("MainWindow::getFlowParameters: %1...._currconfpath:%2")
                  .arg(flowfilename)
                  .arg(_currconfpath);


    if ( configurator != NULL ) {
         delete configurator;
         configurator = new SafetYAWL(_currconfpath+ "/" + Safet::datadir);
    }

    configurator->setAutofilters( commands['a']);
    configurator->setRecursivefilters( commands['r']);
    SafetYAWL::streamlog.initAllStack();
    configurator->openXML(flowfilename);

    if (queryForErrors()) {
        //delete configurator;
        qDebug("...retornando.....executedParsed");
        return QString("Ocurrió un error inesperado. Consulte al administrador");
    }

    configurator->openDataSources();

    configurator->convertXMLtoObjects();
    qDebug(".....configurator->convertXMLtoObjects();....(1)...");



//           bool showdlgpar = SafetYAWL::getConf()["GeneralOptions/parameters.showdialog"]
//                             .compare("on",Qt::CaseSensitive) == 0;

    SafetWorkflow* mywf = configurator->getWorkflow();


    if (mywf != NULL ) {
        qDebug();
        int n = mywf->getParameterlist().count();
        _wfnumpars = 0;
        for(int i=0; i < n; i++) {
            SafetParameter *p = mywf->getParameterlist().at(i);
            Q_CHECK_PTR(p);
            result += QString("%1: ")
                    .arg(p->title());
            result += QString("%1<br/>\n").arg(getWidget(p));

        }
        _wfnumpars  = 0;

    }

    SYD << tr("...MainWindow::getFlowParameters....result:\n\n%1\n\n")
           .arg(result);
    return result;
}


QString MainWindow::getWidget(SafetParameter* p) {
    QMap<QString,QVariant> myconf;
    CmdWidget* mywidget = NULL;
    Q_CHECK_PTR( p );
    SafetYAWL::streamlog
            << SafetLog::Debug
               << tr("getWidget: title:%1")
                  .arg(p->title());

    if ( !p->options().isEmpty()) {
        myconf.insert("options",p->options());
    }
    if ( !p->path().isEmpty()) {
        myconf.insert("keyvalue",p->path());
    }
    if ( !p->filter().isEmpty()) {
        myconf.insert("filter",p->filter());
    }
    if ( !p->literal().isEmpty()) {
        myconf.insert("literal",p->literal());
    }
    if ( !p->format().isEmpty()) {
        myconf.insert("format",p->format());
    }
    if ( !p->order().isEmpty()) {
        myconf.insert("order",p->order());
    }
    if ( !p->validation().isEmpty()) {
        myconf.insert("validation",p->validation());
    }
    if ( !p->input().isEmpty()) {
        myconf.insert("input",p->input());
    }


    QString mytype = p->type();
    DomModel::TypeField enumtype = DomModel::typeFieldFromString(mytype);

    QWidget* parent = NULL;
    QString defaultvalue;
    defaultvalue = p->defaultvalue();
    QString currid;
    if (!p->configurekey().isEmpty()) {
        currid = QString("configurekey.%1")
                .arg(p->configurekey());
    }
    else {
        currid = QString("parameters.%1")
                .arg( _wfnumpars );
           _wfnumpars++;
    }

    switch (enumtype) {
    case DomModel::FileName:
        mywidget = new GetFileWidget(currid,parent,false);
        Q_CHECK_PTR( mywidget );
        mywidget->setConf(myconf);
        mywidget->buildWidget();
        // mywidget->setValidator( validator);
        if (!defaultvalue.isEmpty()) {
//            mywidget->setText(defaultvalue);
        }
        return mywidget->html();
    case DomModel::DateTime:
        mywidget = new DateTimeWidget(currid, parent,false);
        Q_CHECK_PTR( mywidget );
        mywidget->setConf(myconf);
        if (!defaultvalue.isEmpty()) {
//            mywidget->setText(defaultvalue);
        }

        return mywidget->html();
    case DomModel::String:
        mywidget = new CmdWidget(currid, NULL,false);
        mywidget->setConf(myconf);
        Q_CHECK_PTR( mywidget );
        mywidget->buildWidget();
        //  mywidget->setValidator( validator);
//        if (!defaultvalue.isEmpty()) {
//            mywidget->setText(defaultvalue);
//        }
        return mywidget->html();
    case DomModel::Suggest:
        mywidget = new SuggestWidget(currid, NULL,false);
        mywidget->setConf(myconf);
        Q_CHECK_PTR( mywidget );
//        mywidget->buildWidget();
        // mywidget->setValidator( validator);
        if (!defaultvalue.isEmpty()) {
//            mywidget->setText(defaultvalue);
        }

        return mywidget->html();

    case DomModel::Number:
        mywidget = new NumberWidget(currid, NULL, false);
        mywidget->setConf(myconf);
        Q_CHECK_PTR( mywidget );
//        mywidget->buildWidget();
        // mywidget->setValidator( validator);
        if (!defaultvalue.isEmpty()) {
//            mywidget->setText(defaultvalue);
        }

        return mywidget->html();
    case DomModel::StringBox:
        mywidget = new TextEditWidget(currid, NULL,false);
        Q_CHECK_PTR( mywidget );
        mywidget->setConf(myconf);
        mywidget->buildWidget();
        // mywidget->setValidator( validator);
        if (!defaultvalue.isEmpty()) {
//            mywidget->setText(defaultvalue);
        }

        return mywidget->html();

     case DomModel::ComboListTable:
        qDebug("....combotable.....(1)...");
        mywidget = new ComboWidget(currid,ComboWidget::ListTable, NULL,false);
        qDebug("....combotable.....(2)...");
        mywidget->setConf(myconf);
        mywidget->buildWidget();
        qDebug("....combotable.....(3)...");

        return mywidget->html();
     case DomModel::ComboListLiteral:
        mywidget = new ComboWidget(currid,ComboWidget::ListLiteral, parent);
        mywidget->setConf(myconf);
        mywidget->buildWidget();

        return mywidget->html();
     case DomModel::ComboColor:
        mywidget = new ComboWidget(currid,ComboWidget::ColorSafet, parent,false);
        mywidget->setConf(myconf);
        mywidget->buildWidget();

        return mywidget->html();
        break;
     case DomModel::ComboConffile:
     case DomModel::ListConffile:
        if (   enumtype  == DomModel::ComboConffile ) {
            mywidget = new ComboWidget(currid,ComboWidget::ConffileSafet, parent,false);
        }
        else {
            mywidget = new ListWidget(currid,ListWidget::ConffileSafet, parent);

        }

        mywidget->setConf(myconf);
        mywidget->buildWidget();

        return mywidget->html();
     case DomModel::ListTable:
        mywidget = new ListWidget(currid,ListWidget::ListTable, parent,false);
        mywidget->setConf(myconf);
        mywidget->buildWidget();
        qDebug("ListTable...mywidget->setConf(myconf)...(2)...");
        return mywidget->html();
     case DomModel::ListLiteral:
        mywidget = new ListWidget(currid,ListWidget::ListLiteral, parent,false);
        mywidget->setConf(myconf);
        mywidget->buildWidget();
        qDebug("ListLiteral...mywidget->setConf(myconf)...(2)...");
        return mywidget->html();
        default:
            mywidget = NULL;
    }


    if (mywidget != NULL ) {
        return mywidget->html();
    }

}


QString MainWindow::replaceMarks(const QString& s) {
    QString result = s;

    result.replace(Safet::COLONMARK,":");
    return result;
}

QString MainWindow::delNodeToXMLWorkflow(const QString& fname,
                          const QString& nodename) {
    QString result;
    QDomDocument doc;
    QFile file(fname);
    if (!QFile::exists(fname) ) {
        SYE << tr("El archivo de flujo de trabajo \"%1\" no existe en el sistema de archivos"
                  ".No es posible agregar un estado al archivo")
               .arg(fname);

        return result;
    }

    bool isopen = file.open(QIODevice::ReadOnly);
    if (!isopen ) {
        SYE << tr("El archivo de flujo de trabajo \"%1\" no se puede leer"
                  ".No es posible agregar un estado al archivo")
               .arg(fname);


        return result;
    }


    result = doc.setContent(&file);
    file.close();
    QDomElement docElem = doc.documentElement();
    QDomNode root = docElem.firstChild();

    qDebug("...MainWindow::delNodeToXMLWorkflow.....(1)...");


    QDomNode n = root.firstChild();


    QDomElement mydelelement, oldbeforeelement;

    QList<QDomElement> beforeelements;
    QString afternode;

    while( !n.isNull() ) {

        if ( n.isElement() ) {
            QDomElement e = n.toElement(); // try to convert the node to an element.
            QDomNamedNodeMap attributeMap = e.attributes();
            QDomNode attribute = attributeMap.namedItem("id");
            if (!attribute.isNull()) {
                QString myid = attribute.nodeValue();
                qDebug("...***MainWindow::delNodeToXMLWorkflow..id:|%s|",
                       qPrintable(myid));

                QDomElement myport = e.firstChildElement("port");
                QDomElement myconn = myport.firstChildElement("connection");

                if (myid == nodename ) {
                    mydelelement  = e;
                    afternode = myconn.attribute("source").simplified();
                    n = n.nextSibling();
                    continue;
                }

                while( !myconn.isNull()) {
                    if (myconn.attribute("source").simplified() == nodename) {
                        qDebug("....delNodeToXmlWorkflow...beforenode..:|%s|",
                               qPrintable(myid));
                        beforeelements.append(e);
                    }
                    myconn = myconn.nextSiblingElement("connection");
                }
            }
            else {
                qDebug("...No atributo ID");

            }

        }

        n = n.nextSibling();
    }

    qDebug("...delNodeTo....afternode:|%s|",qPrintable(afternode));
    if (afternode.isEmpty()) {
        SYE << tr("Error en los enlaces del flujo de trabajo (enlace del siguiente nodo)");
        qDebug("afternode is empty");
        return result;
    }



    foreach(QDomElement beforeelement, beforeelements) {
        // cambiar enlace del anterior  (beforenode)
        oldbeforeelement = beforeelement;
        QDomElement myport = beforeelement.firstChildElement("port");
        QDomElement oldport = myport;
        QDomElement myconn, oldconn, searchconn;
        oldconn = myconn;
        int howconns = 0;

        myconn = myport.firstChildElement("connection");

        qDebug("....nodename:|%s|", qPrintable(nodename));
        while(!myconn.isNull()) {
            qDebug("....before...myconn.attribute:|%s|", qPrintable(myconn.attribute("source")));
            if ( myconn.attribute("source").simplified() == nodename ) {
                searchconn = myconn;
                oldconn = myconn;
            }
            howconns++;
            myconn = myconn.nextSiblingElement("connection");
        }

        Q_ASSERT(howconns >= 1);
        Q_ASSERT(!searchconn.isNull());

        qDebug(".....howconns...:|%d|",howconns);
        if ( howconns > 1 ) {

            qDebug("...>1");
            myport.removeChild(searchconn);
            howconns--;
            if (howconns == 1 ) {
                myport.setAttribute("pattern","none");
            }
        }
        else {
            // Obtener el siguiente elemento
            QDomElement mydelport = mydelelement.firstChildElement("port");
            QDomElement mydelconn = mydelport.firstChildElement("connection");

            searchconn.setAttribute("options",mydelconn.attribute("options"));
            searchconn.setAttribute("query",mydelconn.attribute("query"));
            searchconn.setAttribute("source",mydelconn.attribute("source"));
            myport.replaceChild(searchconn,oldconn);

        }

        beforeelement.replaceChild(myport, oldport);
        root.replaceChild(beforeelement,oldbeforeelement);
    }



    // eliminar el nodo

    root.removeChild(mydelelement);

//        QDomElement oldautofilter = myautofilter;
//        myautofilter.setAttribute("source",nodename);
//        mydelelement.replaceChild(myautofilter,oldautofilter);
//        myautofilter = myautofilter.nextSiblingElement("autofilter");

//    root.replaceChild(beforeelement, olde);


    qDebug("...MainWindow::delNodeToXMLWorkflow.....(2)...:|%s|",
           qPrintable(fname));
    QFile myfile(fname);
    if ( !myfile.open(QIODevice::WriteOnly))  {
                SYE << tr("No es posible escribir el archivo \"%1\" con el nodo \"%2\" agregado")
                .arg(fname)
                       .arg(nodename);
                qDebug("error open file writeonly");
        return result;
    }

    result = fname;

    QTextStream out(&myfile);

    out << doc.toString();

    myfile.close();

    return result;
}


QString MainWindow::addNodeToXMLWorkflow(const QString& fname,
                          const QString& beforenode,
                          const QString& nodename,
                          bool isparallel,
                          const QString& options,
                          const QString& query,
                          const QString& nodetitle,
                          const QString &documentsource
                          ) {

    qDebug("... MainWindow::addNodeToXMLWorkflow....");
    QString result;
    QDomDocument doc;
    QFile file(fname);
    if (!QFile::exists(fname) ) {
        SYE << tr("El archivo de flujo de trabajo \"%1\" no existe en el sistema de archivos"
                  ".No es posible agregar un estado al archivo")
               .arg(fname);

        return result;
    }

    bool isopen = file.open(QIODevice::ReadOnly);
    if (!isopen ) {
        SYE << tr("El archivo de flujo de trabajo \"%1\" no se puede leer"
                  ".No es posible agregar un estado al archivo")
               .arg(fname);


        return result;
    }


    result = doc.setContent(&file);
    file.close();
    QDomElement docElem = doc.documentElement();
    QDomNode root = docElem.firstChild();

    qDebug("...MainWindow::addNodeToXMLWorkflow.....(1)...");


    QDomNode n = root.firstChild();


    QDomElement mynewelement, beforeelement, afterelement;

    QString afternode;
    while( !n.isNull() ) {

        if ( n.isElement() ) {
            QDomElement e = n.toElement(); // try to convert the node to an element.
            QDomNamedNodeMap attributeMap = e.attributes();
            QDomNode attribute = attributeMap.namedItem("id");
            if (!attribute.isNull()) {
                QString myid = attribute.nodeValue();
                qDebug("...*MainWindow::addNodeToXMLWorkflow..id:|%s|",
                       qPrintable(myid));

                if (myid == beforenode) {
                    beforeelement = e;
                    QDomElement myport = beforeelement.firstChildElement("port");
                    QDomElement myconn = myport.firstChildElement("connection");
                    afternode = myconn.attribute("source");
                }
                if (myid == afternode) {
                    afterelement = e;
                    break;
                }


            }
            else {
                qDebug("...No atributo ID");

            }

        }

        n = n.nextSibling();
    }

    qDebug("...afternode:|%s|",qPrintable(afternode));
    if (afternode.isEmpty()) {
        SYE << tr("Error en los enlaces del flujo de trabajo");
        qDebug("afternode is empty");
        return result;
    }
    QDomElement olde = beforeelement;

    // Connection After Node
    QDomElement myafterport, oldp;
    QDomElement myafterconn, oldc;
    myafterport = afterelement.firstChildElement("port");
    myafterconn = myafterport.firstChildElement("connection");
    QString myaftersource = myafterconn.attribute("source");
    QString myafteroptions = myafterconn.attribute("options");
    QString myafterquery = myafterconn.attribute("query");
    qDebug("................myaftersource:|%s|", qPrintable(myaftersource));
    qDebug("...............myafteroptions:|%s|", qPrintable(myafteroptions));



    mynewelement = beforeelement.cloneNode().toElement();
    QString oldnodename = mynewelement.attribute("id");
    mynewelement.setAttribute("id",nodename);
    mynewelement.setAttribute("title",nodetitle);
    if ( isparallel) {
        myafterport = mynewelement.firstChildElement("port");
        oldp = myafterport;
        myafterconn = myafterport.firstChildElement("connection");
        oldc = myafterconn;
        myafterconn.setAttribute("source",myaftersource);
        myafterconn.setAttribute("query",myafterquery);
        myafterconn.setAttribute("options",myafteroptions);
        myafterport.replaceChild(myafterconn,oldc);
        mynewelement.replaceChild(myafterport,oldp);
    }



    // Variable
    QDomElement myvariable = mynewelement.firstChildElement("variable");
    QDomElement oldvariable = myvariable;

    myvariable.setAttribute("id",QString("v%1")
                            .arg(nodename));
    if (!documentsource.isNull()) {
        myvariable.setAttribute("documentsource",
                                documentsource);
    }
    QString myrolfield = myvariable.attribute("rolfield");
    QString timestampfield = myvariable.attribute("timestampfield");

    myrolfield.replace(QString("'%1'").arg(oldnodename),QString("'%1'").arg(nodename));
    timestampfield.replace(QString("'%1'").arg(oldnodename),QString("'%1'").arg(nodename));
    myvariable.setAttribute("rolfield",myrolfield);
    myvariable.setAttribute("timestampfield",timestampfield);

    // reemplazando variable
    mynewelement.replaceChild(myvariable,oldvariable);


    root.insertAfter(mynewelement,beforeelement);

    // Connection
    QDomElement myport = beforeelement.firstChildElement("port");
    QDomElement oldport = myport;
    QDomElement myconn, oldconn;
    myconn = myport.firstChildElement("connection");
    oldconn = myconn;
    if (isparallel ) {
        myconn = myconn.cloneNode().toElement();
    }

    myconn.setAttribute("source",nodename);
    if (!query.isNull()) {
        myconn.setAttribute("query",query);
    }
    if (!options.isNull()) {
        myconn.setAttribute("options",options);
    }
    else {
        myconn.setAttribute("options",nodename);
    }
    if (isparallel) {
        myport.appendChild(myconn);
        myport.setAttribute("pattern", "or");
        beforeelement.replaceChild(myport, oldport);
    }
    else {
        myport.replaceChild(myconn,oldconn);
    }
    beforeelement.replaceChild(myport, oldport);

    // Autofilter
    if (isparallel) {
        QDomElement myautofilter = mynewelement.firstChildElement("autofilter");
        while(!myautofilter.isNull()) {

            QDomElement oldautofilter = myautofilter;
            myautofilter.setAttribute("source",myaftersource);
            mynewelement.replaceChild(myautofilter,oldautofilter);
            myautofilter = myautofilter.nextSiblingElement("autofilter");
        }

    }
    else {
        QDomElement myautofilter = mynewelement.firstChildElement("autofilter");
        while(!myautofilter.isNull()) {

            QDomElement oldautofilter = myautofilter;
            myautofilter.setAttribute("source",nodename);
            mynewelement.replaceChild(myautofilter,oldautofilter);
            myautofilter = myautofilter.nextSiblingElement("autofilter");
        }
    }

    root.replaceChild(beforeelement, olde);


    qDebug("...MainWindow::addNodeToXMLWorkflow.....(2)...");

    //QString mynamefile = SafetYAWL::getTempNameFiles(1).at(0);

    qDebug("...MainWindow::addNodeToXMLWorkflow.....(2)...:|%s|",
           qPrintable(fname));
    QFile myfile(fname);
    if ( !myfile.open(QIODevice::WriteOnly))  {
                SYE << tr("No es posible escribir el archivo \"%1\" con el nodo \"%2\" agregado")
                .arg(fname)
                       .arg(nodename);
                qDebug("error open file writeonly");
        return result;
    }

    result = fname;

    QTextStream out(&myfile);

    out << doc.toString();

    myfile.close();

    return result;
}


QString MainWindow::extractParameters(const QString& action) {
    QString result = action;

    int pos = 0;
    QRegExp rxpars("(parameters\\.)([a-zA-Z0-9_\\-\\./]+)\\s*:\\s*([a-zA-Z_0-9áéíóúñÑ'\\*=\\.\\-\\(\\),;%#\\x3c\\x3e\\x2f\\[\\]/]+)");
    QRegExp rxconf("(configurekey\\.)([a-zA-Z0-9_\\-\\./]+)\\s*:\\s*([a-zA-Z_0-9áéíóúñÑ'\\*=\\.\\-\\(\\),;%#\\x3c\\x3e\\x2f\\[\\]/]+)");
    QMap<QString,QString> mypars;
    QMap<QString,QString> myconfigs;

    while (pos < action.length()) {
        pos = action.indexOf(rxpars,pos);
        if (pos==-1) {
            break;
        }
        mypars[rxpars.cap(2)] = rxpars.cap(3);
        pos += rxpars.cap(0).length()+1;
        result.replace(rxpars.cap(0),"");

    }
    SYD << tr("...MainWindow::extractParameters...mypars.count()):|%1|")
           .arg(mypars.count());

    // para configuraciones
    pos = 0;
    while (pos < action.length()) {
        pos = action.indexOf(rxconf,pos);
        if (pos==-1) {
            break;
        }
        myconfigs[rxconf.cap(2)] = rxconf.cap(3);
        pos += rxconf.cap(0).length()+1;
        result.replace(rxconf.cap(0),"");

    }
    if (mypars.count()> 0 ) {
        setParsValues(mypars);
    }
    if (myconfigs.count() > 0 ) {
        setConffileValues(myconfigs);
    }


    return result;
}

bool  MainWindow::toInputConsole(const QString& action) {


    // icono de progreso en barra de estado

    SYD << tr("...**MainWindow::toInputConsole...action (1):|%1|")
           .arg(action);

    QString newaction = extractParameters(action);
    SYD << tr("...MainWindow::toInputConsole...action (extractParameters):|%1|")
           .arg(newaction);

    SafetTextParser parser;

    SYD << tr("...SafetTextParser parser(this);.....(2)");

//    texto  = completingTextEdit->toPlainText().toLatin1();


    _listprincipaltitle = SafetYAWL::LISTSEPARATORCHARACTER + newaction;

    _listprincipaltitle.replace("\n"," ");
    _listprincipaltitle.replace("\r"," ");

    parser.setStr( newaction );

    QString str = "agregar,eliminar,actualizar,mostrar";
    QString commandstr = "INSERT INTO,DELETE,UPDATE,SELECT";
    parser.setCommands(str.split(","),commandstr.split(","));

    qDebug("....toXml()...1");
    QString xml = parser.toXml();
    SafetYAWL::streamlog << SafetLog::Debug << tr("Cadena XML generada de la entrada: \n\"%1\"").arg(xml);
    //myoutput->setPlainText(xml);


    parser.processInput( xml.toLatin1() );
    QString filepath = SafetYAWL::getConfFile().getValue("Input", "input.path").toString();
    QString filename = "defconsole.xml";


    SafetYAWL::streamlog.initAllStack();
    parser.openXml(filepath + "/" + filename);
    qDebug("...console...SafetYAWL::streamlog.initAllStack();....(2)...");
    if ( queryForErrors() ) {
        return false;
    }

    QStringList results = parser.processXml(false,true);
    if ( results.isEmpty() ) {
        if ( queryForErrors() ) {
            return false ;
        }
    }


    ParsedSqlToData data;
    showString = QString("<a href=\"operacion:::%1\" title=\"%1\">%1</a>&nbsp;&nbsp;&nbsp;").arg("Ver gráfico de flujo de trabajo");
    if ( results.count() > 0) {
        data = SafetTextParser::parseSql(results.at(0),true);

        SYD  << tr("MainWindow::toInputConsole.............results.at(0):|%1|")
                .arg(results.at(0));

        SYD  << tr("MainWindow::toInputConsole.............parser.operationName():|%1|")
                .arg(parser.operationName());

        if ( parser.operationName().startsWith("Listar_",Qt::CaseSensitive)
                && parser.operationName().indexOf("_autofiltro") == -1
                && parser.operationName().indexOf("_filtrorecursivo") == -1
                && parser.operationName().indexOf("_para_clave") == -1
                ) {
            showString = QString("<a href=\"operacion:::%1\" title=\"%1\">%1</a>&nbsp;&nbsp;&nbsp;").arg("Ver reporte");
            QString texto = QString("-f %1 -d -v %2")
                    .arg(data.map["Cargar_archivo_flujo"])
                    .arg(data.map["Variable"]);
            parseArgs( texto );

            //                loadReportTemplate();
            if (! executeParsed() ) {
                return false;
            }


        }
        else if (parser.operationName().compare("Listar_datos_con_autofiltro",Qt::CaseSensitive) == 0 ) {
            showString = QString("<a href=\"operacion:::%1\" title=\"%1\">%1</a>&nbsp;&nbsp;&nbsp;").arg("Ver reporte");
            QString texto = QString("-f %1 -d -v %2 -a %3")
                    .arg(data.map["Cargar_archivo_flujo"])
                    .arg(data.map["Variable"])
                    .arg(data.map["Autofiltro"]);

            qDebug("*Listar_datos_con_autofiltro.....:|%s|",qPrintable(texto));
            parseArgs( texto );

            //                loadReportTemplate();
            if (! executeParsed() ) {
                return false;
            }



        }
        else if (parser.operationName().compare("Listar_datos_con_filtrorecursivo",Qt::CaseSensitive) == 0 ) {
            showString = QString("<a href=\"operacion:::%1\" title=\"%1\">%1</a>&nbsp;&nbsp;&nbsp;").arg("Ver reporte");
            QString texto = QString("-f %1 -d -v %2 -r %3")
                    .arg(data.map["Cargar_archivo_flujo"])
                    .arg(data.map["Variable"])
                    .arg(data.map["Filtro_recursivo"]);

            qDebug("*Listar_datos_con_filtrorecursivo.....:|%s|",qPrintable(texto));
            parseArgs( texto );

            //                loadReportTemplate();
            if (! executeParsed() ) {
                return false;
            }



        }
        else if (parser.operationName().startsWith("Listar_datos_para_clave") ) {
            showString = QString("<a href=\"operacion:::%1\" title=\"%1\">%1</a>&nbsp;&nbsp;&nbsp;")
                    .arg("Ver reporte");
            QString texto = QString("-f %1 -d -k %2")
                    .arg(data.map["Cargar_archivo_flujo"])
                    .arg(data.map["Clave"]);

            SYD << tr("..............MainWindow::toInputCOnsole...Listar_datos_para_clave.....texto:"
                      "|%1|").arg(texto);
            parseArgs( texto );

            if (! executeParsed() ) {
                return false;
            }



        }

        else if ( parser.operationName().compare(QString::fromLatin1("Generar_gráfico_básico"),Qt::CaseSensitive) == 0) {
            QString texto = QString("-f %1 -p graphviz -g %2")
                    .arg(data.map["Cargar_archivo_flujo"]);

            parseArgs( texto );
            if (! executeParsed() ) {
                return false;
            }


            //processMainWindowThread();
            //return false;
        }
        else if ( parser.operationName().compare(QLatin1String("Generar_gráfico_coloreado"),Qt::CaseSensitive) == 0) {
            QString texto = QString("-f %1 -p graphviz -g -k coloured")
                    .arg(data.map["Cargar_archivo_flujo"]);

            parseArgs( texto );
            if (! executeParsed() ) {
                qDebug("...no generado grafico coloreado...");
                return false;
            }


        }
        else if ( parser.operationName().compare("Generar_gráfico_con_autofiltro",Qt::CaseSensitive) == 0) {
            QString texto = QString("-f %1 -p graphviz -g -k coloured -a %2")
                    .arg(data.map["Cargar_archivo_flujo"])
                    .arg(data.map["Autofiltro"]);

            qDebug("Listar_datos_con_autofiltro.....:|%s|",qPrintable(texto));
            parseArgs( texto );
            if (! executeParsed() ) {
                return false;
            }


            //processMainWindowThread();
            //return false;

        }
        else if ( parser.operationName().compare("Generar_gráfico_con_filtrorecursivo",Qt::CaseSensitive) == 0) {
            QString texto = QString("-f %1 -p graphviz -g -k coloured -r %2")
                    .arg(data.map["Cargar_archivo_flujo"])
                    .arg(data.map["Filtro_recursivo"]);
            qDebug("**** FILTRO RECURSIVO TEXTO: ||%s||", qPrintable(texto));
            parseArgs( texto );
            qDebug( "****  commands.count(): %d", commands.count());
            if (! executeParsed() ) {
                return false;
            }


            //processMainWindowThread();
            //return false;

        }
        else if (parser.operationName().startsWith("Generar_gráfico_para_clave")) {
            QString texto = QString("-f %1 -p graphviz -g -k %2 ")
                    .arg(data.map["Cargar_archivo_flujo"])
                    .arg(data.map["Clave"]);
            qDebug("**** TEXTO: ||%s||", qPrintable(texto));
            parseArgs( texto );
            qDebug( "****  commands.count(): %d", commands.count());
            if (! executeParsed() ) {
                return false;
            }
            SYD << tr("...MainWindow::toInputConsole....SafetYAWL::lastgraph..:\n|%1|")
                   .arg(SafetYAWL::lastgraph);
            SYD << tr("...MainWindow::toInputConsole....SafetYAWL::lastinfodate..:|%1|")
                   .arg(SafetYAWL::lastinfodate);


        }
        else if (parser.operationName().startsWith("Restaurar_gráfico_de_flujo")) {

            QString namegraph = MainWindow::replaceMarks(data.map["Nombre_grafo"]);
            SYD << tr("......**MainWindow::toInputConsole....namegraph: |%1|")
                   .arg(namegraph);
            if ( configurator == NULL ) {
                SYE << tr("No se ha cargardo el Objeto para generar flujos de trabajo");
                return false;
            }
            evalConffileValues();
            doRestoreGraph();

            QString code;
            if ( !graphs().contains(namegraph)) {
                SYE << tr("No se encuentra el nombre de grafo seleccionado : \"%1\"")
                       .arg(namegraph);
                return false;

            }
            code = graphs()[namegraph].first;
            SYD << tr("MainWindow::toInputConsole....code: |%1|")
                   .arg(code);

            QString datetag = graphs()[namegraph].second;
            doRenderGraph(code,datetag);


            //processMainWindowThread();
            //return false;
        }
        else if (parser.operationName().startsWith(tr("Agregar_planificación"))) {
            QString pathgraph = MainWindow::replaceMarks(data.map["Cargar_archivo_flujo"]);
            SYD << tr("......***MainWindow::toInputConsole....compare...pathgraph: |%1|")
                   .arg(pathgraph);
            QString namegraph = MainWindow::replaceMarks(data.map["Nombre_grafo"]);
            SYD << tr("......***MainWindow::toInputConsole....compare...namegraph: |%1|")
                   .arg(namegraph);

            if ( doGeneratePlannedGraph(pathgraph, namegraph) ) {
                _currentjson = tr("Se guardo el grafo de planificacion \"%1\" con éxito##SAFETMESSAGE##")
                        .arg(namegraph);
            }
            else {
                _currentjson = tr("No se guardó  el grafo de planificacion. Vea el registro para detalles##SAFETMESSAGE##");
            }


        }
        else if (parser.operationName().startsWith(tr("Ver_listado_estadísticas"))) {
            bool ok;
            uint seconds = data.map["Desde"].toUInt(&ok);
            QDateTime myfromdate = QDateTime::fromTime_t(seconds);
            QString fromdate = myfromdate.toString("dd/MM/yyyy hh:mmap");
            seconds = data.map["Hasta"].toUInt(&ok);
            QDateTime mytodate = QDateTime::fromTime_t(seconds);
            QString todate = mytodate.toString("dd/MM/yyyy hh:mmap");

                SYD << tr("...MainWindow::toInputConsole....fromdate:|%1|")
                       .arg(fromdate);
                SYD << tr("...MainWindow::toInputConsole....todate:|%1|")
                       .arg(todate);

                SYD << tr("...MainWindow::toInputConsole....Incluir_todas_las_estadisticas:|%1|")
                       .arg(data.map.contains("Incluir_todas_las_estadisticas"));


                SafetBinaryRepo myrepo;

                if (!myrepo.fileExists()) {

                    _currentjson = "No hay estadisticas guardadas actualmente##SAFETMESSAGE##";

                }
                else {
                    QStringList todatelist, tospandatelist;
                    todatelist.append("timeprev");
                    todatelist.append("timecurr");
                    tospandatelist.append("secondswait");
                    myrepo.open();
                    QPair<QString,QString> myfields = myrepo.dataJSON("graphs","",
                                                                      todatelist,
                                                                      tospandatelist);

                    _currentjson += myfields.first;
                    _currentjson += "\n";
                    _currentjson += myfields.second;
                    _currentjson += "\n";

                }
//            _currentjson = "safetcolumns = ["
//                            "{ key:\"flujo\",label:\"flujo\","
//                            "width:100,resizeable:true,sortable:true},"
//                            "{ key:\"Actividad\",label:\"Actividad\","
//                            "width:100,resizeable:true,sortable:true}"
//                            "];\n";

//            _currentjson += "safetlist = ["
//                            "{flujo:\"AppPlanificacionSoftware\",Actividad:\"Propuesta_Solucion\"}"
//                            "];\n";

            SYD << tr("..........MainWindow::toInputConsole..._currentjson:\n|%1|\n")
                   .arg(_currentjson);


        }


        else if (parser.operationName().startsWith(tr("Cambiar_fecha_de_planificación"))) {
            QString namegraph = MainWindow::replaceMarks(data.map["Nombre_grafo"]);
            SYD << tr("......**MainWindow::toInputConsole....Cambiar_fecha_de_planificación...namegraph: |%1|")
                   .arg(namegraph);
            QString nametask = MainWindow::replaceMarks(data.map["Tarea"]);
            SYD << tr("......**MainWindow::toInputConsole....Cambiar_fecha_de_planificación...nametask: |%1|")
                   .arg(nametask);

            bool ok;
            uint seconds = data.map["fecha_planificada"].toUInt(&ok);
            QDateTime mydate = QDateTime::fromTime_t(seconds);
            QString namedate = mydate.toString("dd/MM/yyyy hh:mmap");

            SYD << tr("\n\n......**MainWindow::toInputConsole....Cambiar_fecha_de_planificación...namedate: |%1|")
                   .arg(namedate);

            doRestoreGraph(Safet::PLANNEDGRAPHSFILENAME);

            Q_ASSERT( MainWindow::graphs().contains(namegraph));
            QString code = MainWindow::graphs()[namegraph].first;

            code = doModifyDateGraph(nametask,mydate,code);
            MainWindow::graphs()[namegraph].first = code;
            doSaveCompleteMapGraphs(Safet::PLANNEDGRAPHSFILENAME);

            _currentjson = tr("¡Del grafo \"%3\" Se cambió la fecha de la tarea \"%1\" a \"%2\" satisfactoriamente!##SAFETMESSAGE##")
                    .arg(nametask)
                    .arg(namedate)
                    .arg(namegraph);


        }
        else if (parser.operationName().startsWith(tr("Comparar_gráfico_de_flujo"))) {


            // Colocando configuración de comparación por defecto
            SafetYAWL::getConf().getMap()["Plugins.Graphviz/plugins.graphviz.extrainfo.show"]
                    = "InfoText,InfoDate";
            // Colocando configuración de comparación por defecto

            QString namegraph = MainWindow::replaceMarks(data.map["Nombre_grafo"]);
            SYD << tr("......**MainWindow::toInputConsole....compare...namegraph: |%1|")
                   .arg(namegraph);
            QString nameplannedgraph = MainWindow::replaceMarks(data.map["Planificado"]);
            SYD << tr("......**MainWindow::toInputConsole....compare...nameplannedgraph: |%1|")
                   .arg(nameplannedgraph);

            if ( configurator == NULL ) {
                SYE << tr("No se ha cargardo el Objeto para generar flujos de trabajo");
                return false;
            }
            QString code, codeplanned; // Código Real y Planificado
            evalConffileValues();

            doRestoreGraph();

            if ( !graphs().contains(namegraph)) {
                SYE << tr("No se encuentra el nombre de grafo seleccionado : \"%1\"")
                       .arg(namegraph);
                return false;

            }
            code = graphs()[namegraph].first;
            SYD << tr("MainWindow::toInputConsole....Comparar_grafico...code: |%1|")
                   .arg(code);


            QString datetag = graphs()[namegraph].second;

            // Para Gráfico Planificado ********

            doRestoreGraph(Safet::PLANNEDGRAPHSFILENAME);
            if ( !graphs().contains(nameplannedgraph)) {
                SYE << tr("No se encuentra el nombre de grafo seleccionado (Planificado) : \"%1\"")
                       .arg(nameplannedgraph);
                return false;

            }

            codeplanned = graphs()[nameplannedgraph].first;

            SYD << tr(".......................MainWindow::toInputConsole....**codeplanned**:\n%1\n-------------\n")
                   .arg(codeplanned);
            QString compcode = doCompareGraphs(code,codeplanned);



            if ( !compcode.isEmpty()) {
                doRenderGraph(compcode,datetag);
            }
            SYD << tr("....***MainWindow::toInputConsole....regresando...(1)...");


        }
        else if (parser.operationName().compare("Borrar_estadística",Qt::CaseSensitive) == 0 ) {

            QString namestats = data.map["Clave_completa"];
            SYD << tr("....MainWindow::toInputConsole...Borrar_estadística...(1)...namestats:"
                      "|%1|")
                   .arg(namestats);

            QString delall = data.map["borrar_todos"];
            SYD << tr("....MainWindow::toInputConsole...Borrar_estadística...(1)...borrar_todos:"
                      "|%1|")
                   .arg(delall);

            QString whereclause = "1";
            if (delall.isEmpty()) {
                whereclause = QString("completekey= '%1'")
                        .arg(namestats);
            }
            SafetBinaryRepo myrepo;

            if (!myrepo.fileExists()) {

                _currentjson = tr("La base de datos de estadísticas está vacía."
                                 "No se eliminó ningún registro.##SAFETMESSAGE##");

                return true;
            }
            myrepo.open();

            if ( myrepo.deleteRecords("graphs",whereclause) > 0 ) {
                _currentjson = tr("Se ha(n) eliminado el(los) registro(s) seleccionado(s) "
                                  "de la base de datos de Estadísticas##SAFETMESSAGE##");
            }





        }
        else if (parser.operationName().startsWith("Borrar_gráfico_de_flujo") ||
                 parser.operationName().startsWith("Borrar_planificación") ) {

            QString mygraphfilename = Safet::GRAPHSFILENAME;
            QString namegraph = MainWindow::replaceMarks(data.map["Nombre_grafo"]);
            SYD << tr("......**MainWindow::toInputConsole....namegraph: |%1|")
                   .arg(namegraph);
            if ( configurator == NULL ) {
                SYE << tr("No se ha cargardo el Objeto para generar flujos de trabajo");
                return false;
            }
            if (parser.operationName().startsWith("Borrar_planificación") ) {
                mygraphfilename = Safet::PLANNEDGRAPHSFILENAME;
            }
            if ( deleteGraph(namegraph,mygraphfilename) ) {

                    SYA << tr("Borrado correctamente Grafo \"%1\"")
                           .arg(namegraph);
                _currentjson = tr("Borrado correctamente Grafo \"%1\"##SAFETMESSAGE##")
                        .arg(namegraph);
            }


        }
    }
    return true;


}

QString MainWindow::doModifyDateGraph(const QString& nametask,const QDateTime& mydate,
                                      const QString& code) {
    QString result;



    QStringList mytasks = code.split("\n", QString::SkipEmptyParts);


    foreach(QString mytask, mytasks) {

        if ( mytask.split(",").at(0) == QString("Nodo:%1").arg(nametask)) {
            SYD << tr(".....**MainWindow::doModifyDateGraph....(1)...");
            QString patterndate = QString(",0...1...%2...%1")
                    .arg(mydate.toString("dd/MM/yyyy hh:mmap"))
                    .arg(MainWindow::currentaccount);
            mytask = mytask.section(",",0,-2)+patterndate;

        }
        SYD << tr(".....MainWindow::doModifyDateGraph....mytask:\n%1")
               .arg(mytask);

        result += mytask;
        result += "\n";

    }

    return result;
}

bool MainWindow::doGeneratePlannedGraph(const QString &pathflow, const QString& name) {

    QString texto = QString("-f %1 -p graphviz -g -k %2 ")
            .arg(pathflow)
            .arg(Safet::NOKEY);
    SYD << tr(".....MainWindow::doGeneratePlannedGraph....Texto: |%s|").arg(texto);

    parseArgs( texto );

    if (! executeParsed() ) {
        SYE << tr("No fue posible ejecutar la accion \"%1\"")
               .arg(texto);
        return false;
    }

    SYD << tr(".......MainWindow::doGeneratePlannedGraph....SafetYAWL::lastgraph..:\n|%1|\n\n")
           .arg(SafetYAWL::lastgraph);


    QStringList nodes = SafetYAWL::lastgraph.split("\n", QString::SkipEmptyParts);

    QString newgraph;
    QDateTime now = QDateTime::currentDateTime();
    foreach(QString nd, nodes) {

        QDateTime nowplus = now.addMonths(1);
        QString patterndate = QString(",0...1...%2...%1")
                .arg(nowplus.toString("dd/MM/yyyy hh:mmap"))
                .arg(MainWindow::currentaccount);
        QString n = nd.section(",",0,-2)+patterndate;

        newgraph += n +"\n";
    }

    SYD << tr("...MainWindow::doGeneratePlannedGraph....newgraph..:\n|%1|")
           .arg(newgraph);


    QString pathgraphfile = SafetYAWL::pathconf+ "/graphs" + "/"+
            Safet::PLANNEDGRAPHSFILENAME +".gph";

    SYD << tr("...MainWindow::doSaveGraph...doGeneratePlannedGraph: |%1|").arg(pathgraphfile);


    QFile myfile(pathgraphfile);
    if( !myfile.open(QIODevice::WriteOnly | QIODevice::Append)) {
        SYE << tr("No es posible escribir en la ruta: \"%1\"")
               .arg(pathgraphfile);
        return false;
    }
    QString msg = SafetYAWL::getConf()["Graphs/infotext.format"];
    QString date = now.toString("dd MMM yyyy");
    QString time = now.toString("h:mm:ssap");
    QString datetime = now.toString("dd MMM yyyy hh:mm:ssap");
    msg.replace("%time",time);
    msg.replace("%datetime",datetime);
    msg.replace("%date",date);

    QDataStream out(&myfile);   // we will serialize the data into the file
        out << name;
        out <<  newgraph;
        out <<  msg+SafetYAWL::LISTSEPARATORCHARACTER+pathflow;
    myfile.close();

    SYA << tr("Se guardó un gráfico de flujo de trabajo con el nombre: "
              "\"%1\"")
           .arg(name);




    return true;

}

bool MainWindow::doSaveCompleteMapGraphs(const QString& gfn) {
    QString pathgraphfile = SafetYAWL::pathconf+ "/graphs" + "/"+
            gfn +".gph";
    SYD << tr("...MainWindow::deleteGraph.....pathgraphfile: |%1|")
           .arg(pathgraphfile);
    QFile myfile(pathgraphfile);

    if( !myfile.open(QIODevice::WriteOnly)) {
        SYE << tr("No es posible escribir en la ruta: \"%1\"")
               .arg(pathgraphfile);
        return false;
    }
    QDataStream out(&myfile);   // we will serialize the data into the file

    for(int i=0; i < graphs().keys().count();i++) {
        QString title = graphs().keys().at(i);
        QPair<QString,QString> mypair = graphs()[title];
        out << title;
        out << mypair;
    }
    myfile.close();

    return true;

}

bool MainWindow::deleteGraph(const QString& n, const QString& gfn) {
    SYD << tr("...MainWindow::deleteGraph....n:|%1|")
           .arg(n);
    QString pathgraphfile = SafetYAWL::pathconf+ "/graphs" + "/"+
            gfn +".gph";
    SYD << tr("...MainWindow::deleteGraph.....pathgraphfile: |%1|")
           .arg(pathgraphfile);
    QFile myfile(pathgraphfile);
    if( !myfile.open(QIODevice::ReadOnly)) {
        SYE  << tr("No es posible leer gráficos de la ruta: \"%1\"")
                .arg(pathgraphfile);
        return false;
    }

    QDataStream in(&myfile);


    QString newn = n;
    newn.replace(QRegExp("\\s+")," ");
    graphs().clear();
    int i = 0;
    while( !in.atEnd()) {
        QString title;
        QPair<QString,QString> mypair;
        in >> title;
        in >> mypair;
        title.replace(QRegExp("\\s+")," ");

        if (title.compare(newn,Qt::CaseSensitive) == 0 ) {
            continue;
        }
        if (!title.isNull()) {
            title.replace(QRegExp("\\s+")," ");
            graphs() [ title ] = mypair;
            i++;
       }

    }


    SYD << tr("Se restauraron \"%1\" graficos de \"%2\"")
           .arg(i)
           .arg(pathgraphfile);

    myfile.close();


    if( !myfile.open(QIODevice::WriteOnly)) {
        SYE << tr("No es posible escribir en la ruta: \"%1\"")
               .arg(pathgraphfile);
        return false;
    }
    QDataStream out(&myfile);   // we will serialize the data into the file

    for(i=0; i < graphs().keys().count();i++) {
        QString title = graphs().keys().at(i);
        QPair<QString,QString> mypair = graphs()[title];
        out << title;
        out << mypair;
    }
    myfile.close();

    return true;

}

void MainWindow::threadEndJob()
{


}

QStringList MainWindow::lastInfoGraph() {
    QStringList mylist;
    mylist.append(SafetYAWL::lastgraph);
    mylist.append(SafetYAWL::lastinfodate);
    return mylist;
}

void MainWindow::processMainWindowThread(){
    // deshabilitar el boton de enviar consulta hasta que termine el thread
    completingButtonForm->setEnabled(false);
    completingButtonCons->setEnabled(false);
    completingButtonSign->setEnabled(false);
    completingButtonConf->setEnabled(false);
    completingButtonUsers->setEnabled(false);
    // deshabilitar el boton de enviar de la barra de herramientas
    standardbar->actionAt(60,30)->setEnabled(false);

//    qDebug("despues de myThreadConsole->start();");
}

void MainWindow::toInputSign() {
    // icono de progreso en barra de estado


    SafetTextParser parser;

    QString texto; 
//    texto = completingTextEdit->toPlainText().toLatin1();
    qDebug("toInputSign....texto: \n|%s|\n", qPrintable(texto));

    parser.setStr( texto.toLatin1() );
    QString str = "agregar,eliminar,actualizar,mostrar";
    QString commandstr = "INSERT INTO,DELETE,UPDATE,SELECT";
    parser.setCommands(str.split(","),commandstr.split(","));
    qDebug("....xml...(1): \n|%s|\n", qPrintable(parser.str()));
    QString xml = parser.toXml();
    qDebug("....xml...(2): \n|%s|\n", qPrintable(xml));
    SafetYAWL::streamlog << SafetLog::Debug << tr("Cadena XML generada de la entrada: \n\"%1\"").arg(xml);
    myoutput->setPlainText(xml);


    qDebug("\n\n....MainWindow::toInputFormxml:\n%s", qPrintable(xml));
    parser.processInput( xml.toLatin1() );
    QString filepath = SafetYAWL::getConfFile().getValue("Input", "input.path").toString();
    QString filename = "defmanagementsignfile.xml";
    qDebug("toInputSign.filepath + \"/\" + filename: %s", qPrintable(filepath + "/" + filename));
    parser.openXml(filepath + "/" + filename);


    QStringList results = parser.processXml(false);
    if ( queryForErrors() ) {
        return;
    }


    ParsedSqlToData data;
    foreach(QString s, results) {
        data = SafetTextParser::parseSql(s);
        if ( parser.operationName().startsWith("Firmar",Qt::CaseInsensitive) ) {
            qDebug("...signDocumentsFromData...");

            if ( parser.operationName().endsWith("Tarjeta")) {
                QString nametowrite;
                QStringList list;
                SafetDocument mydoc;
                Q_CHECK_PTR( configurator );
                bool result = configurator->signDocumentsFromData(data,nametowrite,list,mydoc);
                if (result ) {
                    setPathOfSafetDocument(nametowrite);
                    successVerification(list,tr("Firma electrónica (digidoc) realizada "
                                                "exitosamente sobre \"%1\"....ok!")
                                        .arg(nametowrite), mydoc);
                    return;
                }


                QStack<QPair<QDateTime,QString> > mystack = SafetYAWL::streamlog.stopErrorStack();
                SafetYAWL::streamlog << SafetLog::Debug << trUtf8("Hay \"%1\" errores guardados en la lista. De inmediato se procede"
                                                                " a inicializar la lista de errores.")
                                                                .arg(mystack.count());
                SafetYAWL::streamlog.stopAllStack();
                qDebug("ERRORES DE VERIFICACION: %d", mystack.count());
                if ( mystack.count() > 0 ) {
                    QString message = renderMessageStack(mystack,SafetLog::Error);
                    QString messagew = renderMessageStack(mystack,SafetLog::Warning);
                    SafetYAWL::streamlog << SafetLog::Action << tr("<b>Firma Electronica</b> sobre"
                                                                "el archivo INVALIDA");


                }
                qDebug("toInputSign()");
            }
            else if ( parser.operationName().endsWith("P12")) {
                qDebug("...signDocumentsFromData..P12.");

                QString nametowrite;
                QStringList list;
                SafetDocument mydoc;
                Q_CHECK_PTR( configurator );

                bool exec = configurator->signDocumentsFromData(data,nametowrite,list,mydoc,false);

                if ( !exec ) {
                    return;
                }
                setPathOfSafetDocument(nametowrite);
                successVerification(list,tr("Firma electrónica (digidoc) realizada "
                                            "exitosamente sobre \"%1\"....ok!")
                                    .arg(nametowrite), mydoc);
                QStack<QPair<QDateTime,QString> > mystack = SafetYAWL::streamlog.stopErrorStack();
                SafetYAWL::streamlog << SafetLog::Debug << trUtf8("Hay \"%1\" errores guardados en la lista. De inmediato se procede"
                                                                " a inicializar la lista de errores.")
                                                                .arg(mystack.count());
                SafetYAWL::streamlog.stopAllStack();
                qDebug("ERRORES DE VERIFICACION: %d", mystack.count());
                if ( mystack.count() > 0 ) {
                    QString message = renderMessageStack(mystack,SafetLog::Error);
                    QString messagew = renderMessageStack(mystack,SafetLog::Warning);
                    SafetYAWL::streamlog << SafetLog::Action << tr("<b>Firma Electronica</b> sobre"
                                                                "el archivo INVALIDA");


                }
            }

        }
        else if (parser.operationName().startsWith("Verificar",Qt::CaseInsensitive)) {
            SafetYAWL::streamlog << SafetLog::Action << tr("Se va a realizar la verificacion...ok!");

            SafetDocument doc;
            Q_CHECK_PTR( configurator );
            configurator->verifyDocumentsFromData(data,doc);
            setPathOfSafetDocument(doc.getPathOfSafetDocument());
            QStringList list;
            int nsigns = doc.numberOfSignaturesOnOpenXAdESContainer();

            list << tr("Ver firmas del documento(%1)").arg(nsigns) << tr("Mostrar carpeta del contenedor") << tr("Enviar contenedor por correo-e");


            successVerification(list,tr("Verificada correctamente la <b>Firma Electrónica</b>"
                                        " sobre el archivo \"<b>%1</b>\"...ok!")
                                //.arg(digidocfilename), safetDocument);
                                .arg(doc.getPathOfSafetDocument()), doc);

            QStack<QPair<QDateTime,QString> > mystack = SafetYAWL::streamlog.stopErrorStack();
            SafetYAWL::streamlog << SafetLog::Debug << trUtf8("Hay \"%1\" errores guardados en la lista. De inmediato se procede"
                                                              " a inicializar la lista de errores.")
                    .arg(mystack.count());

            SafetYAWL::streamlog.stopAllStack();

            qDebug("**ERRORES DE VERIFICACION: %d", mystack.count());
            if ( mystack.count() > 0 ) {
                QString message = renderMessageStack(mystack,SafetLog::Error);
                QString messagew = renderMessageStack(mystack,SafetLog::Warning);
                SafetYAWL::streamlog << SafetLog::Action << tr("<b>Firma Electronica</b> sobre el archivo \"<b>%1</b>\""
                                                               " INVALIDA").arg(doc.getPathOfSafetDocument());

            }
        }
    }
    if ( false) {
        qDebug("Verificación de Firma(s) INVÁLIDA...*NOT NOT NOT*");
    }
    else {

    }

}

void MainWindow::toInputConfigure() {

     SafetTextParser parser;
     QString texto;
//     texto  = completingTextEdit->toPlainText().toLatin1();
     qDebug("**.. ...(1)..texto: \n|%s|\n", qPrintable(texto));

     parser.setStr( texto.toLatin1() );
     QString str = "agregar,eliminar,actualizar,mostrar";
     QString commandstr = "INSERT INTO,DELETE,UPDATE,SELECT";
     parser.setCommands(str.split(","),commandstr.split(","));
     qDebug("....xml...(1): \n|%s|\n", qPrintable(parser.str()));
     QString xml = parser.toXml();
     qDebug("....xml...(2): \n|%s|\n", qPrintable(xml));
     SafetYAWL::streamlog << SafetLog::Debug << tr("Cadena XML generada de la entrada: \n\"%1\"").arg(xml);
     //myoutput->setPlainText(xml);



     parser.processInput( xml.toLatin1() );
     QString filepath = SafetYAWL::getConfFile().getValue("Input", "input.path").toString();
     QString filename = "defconfigure.xml";

     parser.openXml(filepath + "/" + filename);
     qDebug("...toInputConfigure....filepath: %s", qPrintable(filepath));

     QStringList names = parser.loadNameConfs();

     foreach(QString n, names) {
//          QMap<QString,QVariant> conf = centraledit()->findConf(n);
//          parser.addConf(conf, n);
     }

     QStringList results = parser.processXml(false);

    if ( queryForErrors() ) {
        qDebug(".......****..queryforerror....");
             return;
     }


      foreach(QString s, results) {
         qDebug("toInputConfigure.......result: %s", qPrintable(s));
         proccessConfFile(s);
     }

      if ( MainWindow::configurator  /* && user say yes */ ) {
          configurator->closeDataSources();
          delete MainWindow::configurator;
          MainWindow::configurator = new SafetYAWL();
          Q_CHECK_PTR( configurator);
          configurator->openDataSources();
      }

//     QString message = QString("<table><tr><td><font color=green>%1</font>"
//                               "</td></tr></table>").arg(tr("La operación de <b>configuración</b> fue exitosa"
//                               "....<b>ok!</b>"));;


}




void MainWindow::proccessConfFile(const QString& sql, const QString& filename, bool multiplefields) {

     qDebug("...replaceTextInFile...(1)");
     QString fileconf = filename;
     if ( filename.isEmpty() ) {
         fileconf = SafetYAWL::pathconf+ "/" + "safet.conf";

     }
     qDebug("....proccessConfFile...fileconf: %s", qPrintable(fileconf));

     QRegExp rx;
     QString newsql = sql;
     newsql.replace("'","");
     qDebug("...newsql: %s", qPrintable(newsql));
     QString updatePattern = "UPDATE\\s+([áéíóúñÑa-zA-Z0-9_\\.\\(\\)#%][áéíóúñÑa-zA-Z0-9_,'\\.\\(\\)\\-#%\\x3c\\x3e\\x2f]*)"
                             "\\s+SET\\s+"
                             "([áéíóúñÑa-zA-Z0-9_\\.\\(\\)\\*;#%][áéíóúñÑa-zA-Z0-9_,'\\=\\.\\(\\)\\-\\s\\*;#%]*"
                             "[áéíóúñÑa-zA-Z0-9_,'\\=\\.\\(\\)\\-\\*;#]\\s+)?WHERE\\s+"
                             "([áéíóúñÑa-zA-Z0-9_\\.\\(\\)\\*;#%][áéíóúñÑa-zA-Z0-9_,'\\=\\.\\(\\)\\s\\-\\*;#%\\x3c\\x3e\\x2f]*"
                             "[áéíóúñÑa-zA-Z0-9_,'\\=\\.\\(\\)\\-\\*;#%\\x3c\\x3e\\x2f])";

     //UPDATE lista SET database.user.1='vbravo' WHERE database.db.1='dbtracrootve'
     qDebug("        (###)......updatePattern: |%s|", qPrintable(updatePattern));

     QString insertPattern = "INSERT INTO\\s+([a-zA-Z0-9_][a-zA-Z0-9_\\.\\-]*)\\s+"
                             "\\(([a-zA-Z0-9_\\.\\(\\)][a-zA-Z0-9_,'\\=\\.\\(\\)\\-\\*]*)\\)\\s+"
                             "VALUES\\s+\\(([a-zA-Z0-9_'\\./\\(\\)][a-zA-Z0-9_,'\\=\\.\\-/\\*\\s\\x3c\\x3e\\x2f]*)\\)\\s*";


     QString deletePattern = "DELETE FROM\\s+([áéíóúñÑa-zA-Z0-9_\\.\\(\\)][áéíóúñÑa-zA-Z0-9_,'\\.\\(\\)\\-]*)"
                             "\\s+WHERE\\s+"
                             "([áéíóúñÑa-zA-Z0-9_\\.\\(\\)\\*;][áéíóúñÑa-zA-Z0-9_,'\\=\\.\\(\\)\\s\\-\\*;\\x3c\\x3e\\x2f]*"
                             "[áéíóúñÑa-zA-Z0-9_,'\\=\\.\\(\\)\\-\\*;\\x3c\\x3e\\x2f])";


     bool isdeleting = false;
     rx.setPattern(updatePattern);
     int pos = rx.indexIn(newsql);

     qDebug(".........newsql: %s", qPrintable(newsql));
     if ( pos == -1 ) {

        // qDebug("        (###)......insertPattern: |%s|", qPrintable(insertPattern));
         rx.setPattern(insertPattern);
         pos = rx.indexIn(newsql);
         qDebug("  ...pos: %d", pos);
         if (pos == -1 ) {
             //qDebug("        (###)......deletePattern: |%s|", qPrintable(deletePattern));
             rx.setPattern(deletePattern);
             pos = rx.indexIn(newsql);
          //   qDebug("  ...deletePattern...pos: %d", pos);
             if (pos == -1 ) {

                 SafetYAWL::streamlog << SafetLog::Error << tr("Ocurrio un error con la sentencia SQL \"%1\" formada por la entrada"
                                                               " Realice una lectura del registro para conocer donde se encuentra"
                                                               "el error").arg(newsql);
                 return;
             }
             else {
                 isdeleting = true;
            //     qDebug("...deletepattern: newsql: %s",qPrintable(newsql));
                 //doInsertInAuthConfFile(rx,MainWindow::DELETEPATTERN);

             }
         }
         else {

             doInsertInAuthConfFile(rx);


             return;
         }
     }

     QString keyfield, fields;
     if ( !isdeleting ){
         keyfield = rx.cap(3);
         fields = rx.cap(2);
     }
     else {
         keyfield = rx.cap(2);
     }


     qDebug("...pattern: |%s|",qPrintable(rx.pattern()));
     // Para el keyfield
     if ( keyfield.split("=",QString::SkipEmptyParts).count() != 2 ) {
         SafetYAWL::streamlog << SafetLog::Error << tr("Ocurrio un error con la sentencia SQL \"%1\" formada por la entrada."
                                                       "No se encuentra la asignación de campos con el operador '='."
                                                       " Realice una lectura del registro para conocer donde se encuentra"
                                                      "el error").arg(newsql);
         return;
     }
     QString firstkeyfield = keyfield.split("=",QString::SkipEmptyParts).at(0);
     //qDebug("         proccessConfFile...firstkeyfield...(1):%s", qPrintable(firstkeyfield));
     int numberreg = 0;
     QString prefixkey;
     QString secondkeyfield = keyfield.split("=",QString::SkipEmptyParts).at(1);
     qDebug("         proccessConfFile...secondkeyfield...(1):%s", qPrintable(secondkeyfield));


     if (multiplefields) {
         if (firstkeyfield.endsWith(".*")  ) {

             prefixkey = firstkeyfield.mid(0,firstkeyfield.length()-2);
             //qDebug("**prefixkey: %s", qPrintable(prefixkey));
             numberreg = SafetYAWL::getAuthConf().getNumberRegister(secondkeyfield,prefixkey,true);

             //qDebug("**numberreg: %d", numberreg);
             if (numberreg > 0 ) {
                 firstkeyfield = QString("%1.%2").arg(prefixkey)
                                 .arg(numberreg);
               //  qDebug("   (*)proccessConfFile...firstkeyfield...(2):%s", qPrintable(firstkeyfield));
             }


         }
     }

     //qDebug("   processConffile...(1)...firstkeyfield: %s", qPrintable(firstkeyfield));
     QString searchtext = tr("\\s*(%1)\\s*\\=\\s*([áéíóúñÑa-zA-Z0-9\\$\\#/\\-\\._/:!\\?\\^\\$\\(\\)#%\\x3c\\x3e\\x2f]"
                             "[áéíóúñÑa-zA-Z0-9\\$\\#/\\-\\._/:!\\?\\^\\$\\s\\(\\);#%\\x3c\\x3e\\x2f]*)"
                             "[áéíóúñÑa-zA-Z0-9\\$\\#/\\-\\._/:!\\?\\^\\$\\(\\);#%\\x3c\\x3e\\x2f]")
             .arg(firstkeyfield);
     QString replacetext;
     QString currentfirstkeyfield;
     if ( !isdeleting ) {
        replacetext = tr ("%1 = %2").arg(firstkeyfield).arg(secondkeyfield);

     }
     else {
          replacetext = "";
     }
     currentfirstkeyfield = firstkeyfield;


     SafetYAWL::replaceTextInFile(fileconf,
                                  searchtext,
                                  replacetext);


     // Para los otros campos que no son claves

     if (isdeleting) {
        fields = searchFieldsInAuthConf(firstkeyfield);
    }

     //qDebug("   processConffile...(2)...fields.count():%d",fields.count());
     QStringList listfields;
     listfields = fields.split(",",QString::SkipEmptyParts);


     foreach( QString s, listfields ) {
         if ( s.split("=",QString::SkipEmptyParts).count() != 2 && !isdeleting) {
             continue;
         }
         if (!isdeleting) {
            firstkeyfield = s.split("=",QString::SkipEmptyParts).at(0);
        }
         else {
            firstkeyfield = s;
         }
         //qDebug("...firstkeyfield: %s", qPrintable(firstkeyfield));
         if (multiplefields && !isdeleting) {
             //qDebug("numberreg: %d", numberreg);
             if (firstkeyfield.endsWith(".*")  && numberreg > 0 ) {
                 firstkeyfield = QString("%1.%2").arg(firstkeyfield.mid(0,firstkeyfield.length()-2))
                                 .arg(numberreg);
                 //qDebug("...proccessConfFile...firstkeyfield...(2):%s", qPrintable(firstkeyfield));


             }
         }
         if (!isdeleting) {
            secondkeyfield = s.split("=",QString::SkipEmptyParts).at(1).trimmed();
        }
         else {
             secondkeyfield = "";
         }
         searchtext = tr("\\s*(%1)\\s*\\=\\s*([áéíóúñÑa-zA-Z0-9\\$\\#/\\-\\._/:!\\?\\^\\$,;\\x3c\\x3e\\x2f]"
                         "[áéíóúñÑa-zA-Z0-9\\$\\#/\\-\\._/:!\\?\\^\\$\\s,;\\x3c\\x3e\\x2f]*"
                         "[áéíóúñÑa-zA-Z0-9\\$\\#/\\-\\._/:!\\?\\^\\$,;\\x3c\\x3e\\x2f])").arg(firstkeyfield);
         if (!isdeleting) {
            replacetext  = tr("%1 = %2").arg(firstkeyfield).arg(secondkeyfield);

        }
         else {
             //qDebug("searchtext: %s", qPrintable(searchtext));
             replacetext ="";
         }

        // qDebug("           ...processConfUsers...replacetext:|%s|",qPrintable(replacetext));
         SafetYAWL::replaceTextInFile(fileconf,
                                      searchtext,
                                      replacetext);

     }

     // Reorganizar los otros campos mayotres a numberreg
     if (isdeleting) {

         numberreg++;
         int result;
         listfields.push_front(currentfirstkeyfield);
         while(true){


             foreach( QString s, listfields ) {
             QString currprefkey = s.split(".").at(0)+"."+
                                  s.split(".").at(1);
             QString nextkey = QString("%1.%2").arg(currprefkey)
                               .arg(numberreg);

             //qDebug("...nextkey: %s",qPrintable(nextkey));
             searchtext = tr("\\s*(%1)\\s*\\=\\s*([áéíóúñÑa-zA-Z0-9\\$\\#/\\-\\._/:!\\?\\^\\$,;\\(\\)\\x3c\\x3e\\x2f]"
                             "[áéíóúñÑa-zA-Z0-9\\$\\#/\\-\\._/:!\\?\\^\\$\\s,;\\(\\)\\x3c\\x3e\\x2f]*"
                             "[áéíóúñÑa-zA-Z0-9\\$\\#/\\-\\._/:!\\?\\^\\$,;\\(\\)\\x3c\\x3e\\x2f])").arg(nextkey);

             QString replacekey = QString("%1.%2").arg(currprefkey)
                                  .arg(numberreg-1);
             //qDebug("...replacekey: %s",qPrintable(replacekey));

             replacetext  = tr("%1 = ||cap||").arg(replacekey);
             result = SafetYAWL::replaceTextInFile(fileconf,
                                          searchtext,
                                          replacetext,
                                          Qt::CaseSensitive,
                                          2);


             }
             if ( !result ) break;
             numberreg++;


         }
     }

}


QString MainWindow::searchFieldsInAuthConf(const QString& key) {
    qDebug("searchFieldsInAuthConf...Clave...key: %s", qPrintable(key));
    QString retfields;
    QString exp;

    if ( key.split(".").count() < 3 ) {
        return QString("");
    }
    exp = "[a-zA-Z0-9]+/("+key.split(".").at(0)+"\\.[a-zA-Z0-9]+\\."+key.split(".").at(2)+")";

    QRegExp rx(exp);
    //qDebug("searchFieldsInAuthConf...Clave...RegExp: %s", qPrintable(exp));
    for(int i =0; i < SafetYAWL::getAuthConf().keys().count() ; i++){
        QString currentkey = SafetYAWL::getAuthConf().keys().at(i);

        int pos = rx.indexIn(currentkey);
        if ( pos >= 0 ) {
            if ( rx.cap(1) != key ) {
                retfields += rx.cap(1) +",";
                //qDebug("searchFieldsInAuthConf...Clave...CurrentKey: %s", qPrintable(rx.cap(1)));
            }
        }
    }
    if ( !retfields.isEmpty()){
        retfields.chop(1);
    }

    qDebug("...retfields: %s", qPrintable(retfields));
    return retfields;

}

void MainWindow::doInsertInAuthConfFile(QRegExp& rx) {


    //qDebug("...doInsertInAuthConfFile...capturas...1: %s", qPrintable(rx.cap(1)));
    //qDebug("...doInsertInAuthConfFile...capturas...2: %s", qPrintable(rx.cap(2)));
    //qDebug("...doInsertInAuthConfFile...capturas...3: %s", qPrintable(rx.cap(3)));

    QStringList fields, values;

    fields = rx.cap(2).split(",");
    values = rx.cap(3).split(",");

    QString fileconf = SafetYAWL::pathconf+ "/" + "auth.conf";
        int countuser = 1;
        QString replacetext,newfield;

        bool isreplacing = true;
        QString sectiontext;
        while (isreplacing ) {

            QString  newtext;

            if (sectiontext.isEmpty() && fields.count() > 0 ) {
                QString firstfield = fields.at(0);
                sectiontext = firstfield.mid(0,1).toUpper()+firstfield.mid(1);
                sectiontext = sectiontext.split(".").at(0);
                //qDebug("    ..........sectiontext:%s", qPrintable(sectiontext));
            }
            for(int i = 0; i < fields.count(); i++) {
                newfield = fields.at(i);
                newfield.chop(2);
                //qDebug("...fields.at(%d): %s", i, qPrintable(newfield));
                QString subfield = newfield.mid(0,1).toUpper()+newfield.mid(1);
                newfield = QString("%1.%2").arg(subfield).arg(countuser);
                QString firstfield = newfield.split(".").at(0);
                QString key = firstfield +"/"+newfield.mid(firstfield.length()+1);
               // qDebug("...key: %s",qPrintable(key));

                newfield = newfield.toLower();
                if (!SafetYAWL::getAuthConf().contains(key) ) {
                    newtext = QString("%1").
                              arg(newfield)
                              +" = " + values.at(i) + "\n";
                    replacetext += newtext;
                   // qDebug("! replacing:%s",qPrintable(newtext));
                    isreplacing = false;
                }
                else {
                    replacetext += QString("%1").arg(newfield)
                                   +" = " + SafetYAWL::getAuthConf()[ key ] + "\n";
                }
            }

            replacetext += "\n";
            countuser++;


        }



        qDebug();
        qDebug("...**replaceSectionInFile...:\n%s",
               qPrintable(replacetext));
        qDebug();

        SafetYAWL::replaceSectionInFile(fileconf,sectiontext,replacetext);

}

void MainWindow::restoreWindowState()
{
}



void MainWindow::saveWindowState()
{
}


void MainWindow::closeEvent(QCloseEvent *event)
{
}


void MainWindow::toChangeUser() {
    qDebug("...MainWindow::toChangeUser()...");
            checkGoPrincipal();

}

void MainWindow::resizeEvent(QResizeEvent *event) {
}


void MainWindow::checkGoPrincipal() {

}

void MainWindow::moveEvent(QMoveEvent *event)
{
}



void MainWindow::showEvent(QShowEvent *event)
{
}


void MainWindow::doExit() {
}

bool MainWindow::maybeSave() {

        return false;
}


void MainWindow::setupStackedWebviews(const QIcon& icon, const QString& name, const QString& desc) {



}

bool MainWindow::searchInHistoryList(const QString& str) {

}

void MainWindow::saveToHistoryList() {
}

void MainWindow::addToHistoryList() {


}

QMap<QString,QString> MainWindow::loadEditActions() {
    QMap<QString,QString> result;

    QStringList actions  = SafetYAWL::getConf()["GeneralOptions/consoleactions.*"].split(SafetYAWL::LISTSEPARATORCHARACTER,QString::SkipEmptyParts);

    foreach(QString s, actions) {
        QStringList tlist = s.split(";",QString::SkipEmptyParts);
        if ( tlist.count() < 2 ) continue;
        QString mykey = tlist.at(0);
        QString myvalue = tlist.at(1);
        result[mykey] = myvalue;
    }
    return result;
}

void MainWindow::insertFromHistoryList(QListWidgetItem* item) {

}

void MainWindow::editToHistoryList() {

}

void MainWindow::delToHistoryList() {
}

void MainWindow::setupTabWidget() {

    // Para la consola de salida


}

QString MainWindow::drawWorkflow(const QString& filename) {

    QString newfile = filename.section("/",-1)+"."+SafetYAWL::getConf()["Plugins.Graphviz/graphtype"];
    QFile::copy(filename,mediaPath()+ "/"+  newfile);
    return newfile;

}


void MainWindow::setMediaPath(const QString& m) {
    _mediapath = m;
    if (_mediapath.endsWith("/")) {
        _mediapath.chop(1);
    }

}
QString MainWindow::mediaPath() {
    return _mediapath;
}


void MainWindow::setHostMediaPath(const QString& m) {
    _hostmediapath = m;
    if (_hostmediapath.endsWith("/")) {
        _hostmediapath.chop(1);
    }

}

QString MainWindow::hostMediaPath() {
    return _hostmediapath;
}


void MainWindow::buildModel(QMap<QString,QVariant>& mymap) {



}


void MainWindow::refreshListView(const QString& doc) {

}

void MainWindow::doQuit() {

     if (maybeSave() ) {
          saveWindowState();
          qApp->quit();
     }
}

void MainWindow::doPrint() {


}



void MainWindow::doPrintPreview() {

}



void MainWindow::doAssistantHelp() {



}



void MainWindow::doWidgetsOptions() {

}

void MainWindow::doGeneralOptions() {
}


bool MainWindow::loadWidgetPlugins(const QString& f, bool add) {
    if (!configurator->loadWidgetPlugins(f)) {
        SafetYAWL::streamlog
                << SafetLog::Warning
                << tr("No se cargo correctamente el plugins: \"%1\"")
                .arg(f);
        return false;
    }
     QMap<QString,QVariant> conf;
     qDebug("....MainWindow::loadWidgetPlugins...f: %s", qPrintable(f));
     if ( add ) {
          Q_CHECK_PTR( SafetYAWL::listDynWidget );

          Q_ASSERT( SafetYAWL::listDynWidget->count() > 0 );
          WidgetInterface* mywid = SafetYAWL::listDynWidget->at(SafetYAWL::listDynWidget->count()-1);
          Q_CHECK_PTR( mywid );
          conf = mywid->conf();
          qDebug("....loadWidgetPlugins...conf[namewidget]: %s f: %s",
                    qPrintable(conf["namewidget"].toString()), qPrintable(f));
          //Q_ASSERT( conf["namewidget"] == f );
     }
     return true;
}



void MainWindow::createMenu() {

}

bool MainWindow::doSaveGraph(const QStringList& mypars) {

   QString pathgraphfile = SafetYAWL::pathconf+ "/graphs" + "/"+
               Safet::GRAPHSFILENAME +".gph";
    SYD << tr("...MainWindow::doSaveGraph.....pathgraphfile: |%1|")
           .arg(pathgraphfile);
    QFile myfile(pathgraphfile);
    if( !myfile.open(QIODevice::ReadOnly)) {
        SYE  << tr("No es posible leer gráficos de la ruta: \"%1\"")
                .arg(pathgraphfile);
        return false;
    }

    QDataStream in(&myfile);

    graphs().clear();
    int i = 0;
    bool graphexists = false;

    QString newtitle = mypars.at(0);
    newtitle.replace(QRegExp("\\s+")," ");

    while( !in.atEnd()) {
        QString title;
        QPair<QString,QString> mypair;
        in >> title;
        in >> mypair;
        title.replace(QRegExp("\\s+")," ");


        if (title.compare(newtitle,Qt::CaseSensitive) == 0 ) {
            mypair.first = mypars.at(1);
            mypair.second = mypars.at(2);
            graphexists = true;
        }

        if (!title.isNull()) {
            title.replace(QRegExp("\\s+")," ");
            graphs() [ title ] = mypair;
            i++;
       }

    }

    if (!graphexists ) {
        QPair<QString,QString> mypair;
        mypair.first = mypars.at(1);
        mypair.second = mypars.at(2);
        graphs()[ newtitle ] = mypair;
    }


    myfile.close();

    if( !myfile.open(QIODevice::WriteOnly)) {
        SYE << tr("No es posible escribir en la ruta: \"%1\"")
               .arg(pathgraphfile);
        return false;
    }
    QDataStream out(&myfile);   // we will serialize the data into the file

    for(i=0; i < graphs().keys().count();i++) {
        QString title = graphs().keys().at(i);
        QPair<QString,QString> mypair = graphs()[title];
        out << title;
        out << mypair;
    }
    myfile.close();

    return true;


//    QString pathgraphfile = SafetYAWL::pathconf+ "/graphs" + "/"+
//            Safet::GRAPHSFILENAME +".gph";

//    SYD << tr("...MainWindow::doSaveGraph...pathgraphfile: |%1|").arg(pathgraphfile);

//    QFile myfile(pathgraphfile);
//    if( !myfile.open(QIODevice::WriteOnly | QIODevice::Append)) {
//        SYE << tr("No es posible escribir en la ruta: \"%1\"")
//               .arg(pathgraphfile);
//        return false;
//    }
//    if ( mypars.count() < 3 ) {
//        SYE << tr("El número de parametros para guardar un grafo es tres(3): "
//                  "nombre,codigo y etiqueta de fecha...El actual es \"%1\"")
//               .arg(mypars.count());
//        return false;

//    }
//    SYD << tr("SAFET SAVEGRAPH....Grafo Guardado:-----\n%1\n-------")
//           .arg(mypars.at(1));
//    QDataStream out(&myfile);   // we will serialize the data into the file
//        out << mypars.at(0);
//        out <<  mypars.at(1);
//        out <<  mypars.at(2);
//    myfile.close();

//    SYA << tr("Se guardó un gráfico de flujo de trabajo con el nombre: "
//              "\"%1\"")
//           .arg(mypars.at(0));

//    return true;

}


void MainWindow::doRestoreGraph(const QString& gfn) {
    QString pathgraphfile = SafetYAWL::pathconf+ "/graphs" + "/"+
            gfn +".gph";
    SYD << tr("...MainWindow::doRestoreGraph.....pathgraphfile: |%1|")
           .arg(pathgraphfile);
    QFile myfile(pathgraphfile);
    if( !myfile.open(QIODevice::ReadOnly)) {
        SYE  << tr("No es posible leer gráficos de la ruta: \"%1\"")
                .arg(pathgraphfile);
        return;
    }

    QDataStream in(&myfile);
    QString title;

    graphs().clear();
        int i = 0;
    while( !in.atEnd()) {
        QPair<QString,QString> mypair;
        in >> title;
        in >> mypair;
        SYD << tr("...MainWindow::doRestoreGraph....title:|%1|").arg(title);
        title.replace(QRegExp("\\s+")," ");
        if (!title.isNull()) {
            graphs() [ title ] = mypair;
            i++;
        }
    }
    SYD << tr("Se restauraron \"%1\" graficos de \"%2\"")
           .arg(i)
           .arg(pathgraphfile);


}

void MainWindow::doRenderGraph(const QString& code, const QString& datetag) {
    Q_CHECK_PTR( configurator );
    if ( configurator == NULL ) {

        SYD << tr("MainWindow::doRenderGraph...configurator is null");
        return;
    }

    if ( SafetYAWL::curOutputInterface == NULL ) {

        SYD << tr("...curOutputInterface is null");
        configurator->loadPlugins("graphviz");
    }

    //QMap<QString,QString> mymap = SafetYAWL::getConfFile().readFile(SafetYAWL::pathconf + "/" + SafetYAWL::fileconf);
    QMap<QString,QString> mymap =  SafetYAWL::getConf().getMap();

    SYD << tr("...MainWindow::doRenderGraph...Plugins.Graphviz/extrainfo.show:|%1|")
           .arg(SafetYAWL::getConf()["Plugins.Graphviz/extrainfo.show"]);

    SYD << tr("trying curOutputInterface...(1)");
    Q_ASSERT ( SafetYAWL::curOutputInterface == NULL );
    QString parsedCodeGraph = SafetYAWL::curOutputInterface->parseCodeGraph(code, mymap);
    SYD << tr("trying configurator...(2)");
    SafetYAWL::filelog.close();
    SafetYAWL::filelog.open(QIODevice::Append);
    SafetYAWL::streamlog.setDevice(&SafetYAWL::filelog);

    char type[4];

    strncpy(type,qPrintable(SafetYAWL::getConf()["Graphviz.Plugins/graphtype"]),3);
    //********* QUITAR *************
    strncpy(type,"svg",3);
    //********* QUITAR *************
            type[3] = 0;


    SYD << tr("...*MainWindow::doRenderGraph.....graphtype:|%1|")
                   .arg(type);
            QString img = SafetYAWL::curOutputInterface->renderGraph(parsedCodeGraph, type, mymap);
    if (img.startsWith("ERROR")) {
        SafetYAWL::streamlog
            << SafetLog::Error
            << tr("Ocurrió el siguiente error al generar el gráfico de flujo \"%1\"")
            .arg(img);
        queryForErrors();
        return ;
    }
    SafetYAWL::filelog.close();
    SafetYAWL::filelog.open(QIODevice::Append);
    SafetYAWL::streamlog.setDevice(&SafetYAWL::filelog);

    SafetYAWL::lastgraph = code;
    SafetYAWL::lastinfodate = datetag;
    _currentjson = drawWorkflow(img); // Dibujar el flujo
    SafetYAWL::streamlog.stopAllStack();


}

QString MainWindow::doCompareGraphs(const QString& firstgraph, const QString& secondgraph) {

    QString newgraph = generateGraphCompared(firstgraph, secondgraph);

    return newgraph;

}


QString MainWindow::addInfoGraphDateText() {
    QString result;
    QString inc = SafetYAWL::getConf()["Graphs/infotext.include"].trimmed();

    if ( inc.compare("on") != 0 ) {
        SYD << tr("MainWindow::addInfoGraphDateText....inc:|%1|")
               .arg(inc);
        return result;
    }

    result = SafetYAWL::getConf()["Graphs/infotext.format"];
    QDateTime now = QDateTime::currentDateTime();
    QString date = now.toString("dd MMM yyyy");
    QString time = now.toString("h:mm:ssap");
    QString datetime = now.toString("dd MMM yyyy hh:mm:ssap");
    result.replace("%time",time);
    result.replace("%datetime",datetime);
    result.replace("%date",date);

    SafetYAWL::lastinfodate = result;
    SYD << tr("............*MainWindow::addInfoGraphDateText....SafetYAWL::lastinfodate:|%1|")
           .arg(result);

    return result;
}



QString MainWindow::currentGraphTitle() {
    QString curtitle = SafetYAWL::getConf()["GeneralOptions/currentflowtitle"].trimmed();
    return curtitle;
}

QString MainWindow::generateGraphCompared(const QString& first, const QString& second) {
    QString result;
    QStringList myfirstnodelist, mysecondnodelist;
    myfirstnodelist = first.split("\n",QString::SkipEmptyParts);
    mysecondnodelist = second.split("\n",QString::SkipEmptyParts);
    bool ok;
    int prodays = SafetYAWL::getConf()["DefaultValues/graphs.daysproject"].toInt(&ok);
    if (prodays <= 0 ) {
        SYE << tr("El parámetro \"%1\" no tiene un valor válido")
               .arg("DefaultValues/graphs.daysproject");
        return QString();
    }
//    if ( myfirstnodelist.count() != mysecondnodelist.count()) {
//                SYE << tr("Los gráficos seleccionados son diferentes."
//                      " No tienen la misma cantidad de nodos."
//                      " El primer gráfico tiene \"%1\" nodos. "
//                      " El segundo gráfico tiene \"%2\" nodos." )
//                   .arg(myfirstnodelist.count()-1)
//                   .arg(mysecondnodelist.count()-1);
//        return QString();
//    }



    QString currentnode;
    for(int i=0; i < myfirstnodelist.count(); i++ ) {
        QString myfirst = myfirstnodelist.at(i);
        QStringList myfirstlist = myfirst.split(",",QString::SkipEmptyParts);
        int rlnodes = myfirstlist.count();
        Q_ASSERT(rlnodes > 0 );
        QStringList statsreal = myfirstlist.at(rlnodes-1).split("...",QString::SkipEmptyParts);
        if (statsreal.count() < 2) {
            continue;
        }

        int ntokens = statsreal.at(0).toInt(&ok);
        if (ntokens > 0 ) {
            currentnode = myfirstlist.at(0);
            break;
        }

    }
    SYD << tr(".....MainWindow::generateGraphCompared....currentnode:|%1|")
           .arg(currentnode);


    if ( currentnode.isEmpty()) {
        SYE << tr("NO se encuentra el nodo donde se encuentra la clave para el gráfico a comparar");
        return QString();
    }

    bool passnode = false;

    for(int i=0; i < myfirstnodelist.count(); i++ ) {
        int days = 0;
        SYD << tr ("....MainWindow::generateGraphCompared...:|%1|")
               .arg(i);

        QPair<double,int>  mypair;
        mypair.first = 0;
        mypair.second = 0;
        QString myfirst = myfirstnodelist.at(i);
        QString mysecond;
        QStringList myfirstlist = myfirst.split(",",QString::SkipEmptyParts);

        bool issecondfound = false;
        for(int j=0; j < mysecondnodelist.count(); j++ ) {
            if ( myfirstlist.at(0) == mysecondnodelist.at(j).section(",",0,0) ) {
                mysecond =  mysecondnodelist.at(j);
                issecondfound = true;
                break;
            }
        }
        if ( !issecondfound ) {
            SYE << tr(" Generando comparación de grafos: no se encontró el \"%1\"")
                   .arg(myfirstlist.at(0));
            return QString();
        }
        QStringList mysecondlist = mysecond.split(",",QString::SkipEmptyParts);

        if (myfirstlist.count() == 0 ) {
            SYD << tr(" Error 1");
            break;
        }
        if (mysecondlist.count() == 0 ) {
            SYD << tr(" Error 2");
            break;
        }
        if (myfirstlist.count() != mysecondlist.count()) {
            SYD << tr(" Error 3");
            break;
        }

        QString realnode = myfirstlist.at(0).trimmed();
        QString plannode = mysecondlist.at(0).trimmed();
        SYD << tr("....MainWindow::generateGraphCompared....realnode:|%1|...plannode:|%2|")
               .arg(realnode)
               .arg(plannode);
        if ( realnode != plannode ) {
            SafetYAWL::streamlog
                    << SafetLog::Error
                    << tr("Los gráficos seleccionados son diferentes."
                          " No tienen los mismos nodos en la misma posición."
                          " El primer nodo tiene nombre \"%1\". "
                          " El segundo nodo tiene nombre \"%2\"." )
                       .arg(myfirstlist.at(0))
                       .arg(mysecondlist.at(0));
            return QString();

        }

        int rlnodes = myfirstlist.count();
        int plnodes = mysecondlist.count();
        QStringList statsreal = myfirstlist.at(rlnodes-1).split("...",QString::SkipEmptyParts);
        QStringList statsplanned = mysecondlist.at(plnodes-1).split("...",QString::SkipEmptyParts);


        int nstatsreal = 0;
        if ( statsreal.count() > 2 ) {
             nstatsreal = 1;
        }
        double porc = 0;

        QString datestrp;
        QDateTime dateplanned;


        QString statsinfo;

        bool isdelay = false;


        if (statsreal.count() < 4 ) {

            if ( statsplanned.count() < 4 ) {
                   statsinfo =  tr("0...1...n/a...n/a\n");
            }
            else {
                QDateTime mynow = QDateTime::currentDateTime();
                datestrp  = statsplanned.at(3);
                dateplanned = QDateTime::fromString(datestrp,"dd/MM/yyyy hh:mmap");

                if (mynow < dateplanned) {

                    statsinfo = tr("0...1...n/a...Debe entregar en <br/>%1<br/>(%2)\n")
                        .arg(SafetWorkflow::humanizeDate(days,mynow
                                                         .toString("dd/MM/yyyy hh:mmap"),
                                                         "dd/MM/yyyy hh:mmap",
                                                         dateplanned),
                                                         datestrp);

                }
                else {
                    statsinfo = tr("0...1...n/a...Debio entregar hace <br/>%1<br/>(%2)\n")
                        .arg(SafetWorkflow::humanizeDate(days,dateplanned
                                                         .toString("dd/MM/yyyy hh:mmap"),
                                                         "dd/MM/yyyy hh:mmap",
                                                         mynow),
                                                         datestrp);
                    isdelay = true;

                }
            }
            QRegExp rx;
            rx.setPattern("info\\.task\\.color:\\s*([\\-a-zA-Z0-9_\\.]+)\\s*,?");

            for(int j=0; j < myfirstlist.count()-nstatsreal; j++) {
                QString nextfield =  myfirstlist.at(j);
                if ( rx.indexIn( nextfield ) != -1 ) {
                    if ( days >= prodays ) {
                        porc = 1;
                    }
                    else {
                        porc = double(days)/double(prodays);
                    }

                    porc = 1-porc;

                    if ( isdelay) {
                        porc = porc*-1;
                    }


                    nextfield = QString("info.task.color:%1")
                            .arg(porc,0,'g',2);

                }

                result += nextfield;
                result += ",";

            }
            result += statsinfo;
            continue;
        }


        if  (statsplanned.count() < 4 ) {
            SYD << tr(" Error 20");
            break;
        }


        if  (statsreal.count() < 4 ) {
            SYD << tr(" Error 5");
            break;
        }

        datestrp  = statsplanned.at(3);
        dateplanned = QDateTime::fromString(datestrp,"dd/MM/yyyy hh:mmap");



        QString datestr = statsreal.at(3).section("<br/>",0,0);
        QDateTime  datereal = QDateTime::fromString(datestr,"dd/MM/yyyy hh:mmap");




        if ( realnode == currentnode) {
            passnode = true;
            if ( datereal < dateplanned) {
                statsinfo = tr("0...1...(a tiempo) AQUI...%1\n")
                        .arg(SafetWorkflow::humanizeDate(days,datestr,"dd/MM/yyyy hh:mmap",
                                                         dateplanned));
            }
            else {
                statsinfo = tr("0...1...(retraso) AQUI...%1\n")
                        .arg(SafetWorkflow::humanizeDate(days,datestrp,"dd/MM/yyyy hh:mmap",
                                                         datereal));
                  isdelay = true;

            }
        }
        else {
            if (!passnode) {
                if ( datereal < dateplanned) {
                    statsinfo = tr("0...1...a tiempo...%1 (adelanto)\n")
                            .arg(SafetWorkflow::humanizeDate(days,datestr,"dd/MM/yyyy hh:mmap",
                                                             dateplanned));
                }
                else {
                    statsinfo = tr("0...1...atraso...%1\n")
                            .arg(SafetWorkflow::humanizeDate(days,datestrp,"dd/MM/yyyy hh:mmap",
                                                             datereal));
                    isdelay = true;

                }
            }
            else {
                if ( datereal < dateplanned) {
                    statsinfo = tr("0...1...a tiempo...%1 (adelanto)\n")
                            .arg(SafetWorkflow::humanizeDate(days,datestr,"dd/MM/yyyy hh:mmap",
                                                             dateplanned));
                }
                else {
                    statsinfo = tr("0...1...atraso...%1\n")
                            .arg(SafetWorkflow::humanizeDate(days,datestrp,"dd/MM/yyyy hh:mmap",
                                                             datereal));
                    isdelay = true;

                }

            }

        }

        QRegExp rx;
        rx.setPattern("info\\.task\\.color:\\s*([a-zA-Z0-9_\\.]+)\\s*,?");

        for(int j=0; j < myfirstlist.count()-nstatsreal; j++) {
            QString nextfield =  myfirstlist.at(j);

            if ( rx.indexIn( nextfield ) != -1 ) {
                if ( days >= prodays ) {
                    porc = 1;
                }
                else {
                    porc = double(days)/double(prodays);
                }

                porc = 1-porc;
                if (isdelay ) {
                  porc = porc*-1;
                }


                nextfield = QString("info.task.color:%1")
                        .arg(porc,0,'g',2);

            }

            result += nextfield;
            result += ",";

        }

        result += statsinfo;

        SYD << tr(".......................**MainWindow::generateGraphCompared...days:|%1|")
               .arg(days);


    }


    SYD << tr("........ ...**MainWindow:generateGraphCompared.....result completed:\n-------------\n|%1|\n------")
               .arg(result);

    return result;
}


void MainWindow::evalEventOnExit(SafetLog::Level l) {
        if ( l == SafetLog::ExitApp ) {

        }
}



QString MainWindow::evalEventOnInput(SafetYAWL::TypeInput p, const QString& message, bool& ok) {
        QString str;

        return str;
}

QAbstractItemModel *MainWindow::modelFromFile(const QString& fileName)
{
    QFile file(fileName);
    if (!file.open(QFile::ReadOnly))
        return new QStringListModel(completer);

    QApplication::setOverrideCursor(QCursor(Qt::WaitCursor));
    QStringList words;

    while (!file.atEnd()) {
        QByteArray line = file.readLine();
        if (!line.isEmpty())
            words << line.trimmed();
    }

    QApplication::restoreOverrideCursor();
    return new QStringListModel(words, completer);
}



void MainWindow::about()
{

    QString alpha, beta, release;
    QRegExp rx;
    rx.setPattern("([0-9]+)\\.([0-9]+)\\.([0-9]+)\\.([0-9]+)");

    int pos = rx.indexIn(SafetYAWL::getNumberVersion());
    qDebug("...version: pos: %d",pos);
    if (pos >= 0 ) {
        alpha = rx.cap(2);
        beta = rx.cap(3);
        release = rx.cap(4);
    }

}

// *****************************************************************************************
// Método para la Consola


void MainWindow::doGetSignDocument() {

}


void MainWindow::doSendSignDocument() {

}


bool MainWindow::executeParsed() {

     //QMutexLocker locker(mutexConsole());


      if  (!commands.contains('f') ) {
           if ( !commands.contains('h') && !commands.contains('V') && !commands.contains('T') ) {
               streamText << tr("*** No se especifico la ruta del archivo de flujo de trabajo (.xml) *** \n");
               streamText  <<  tr("Opcion: -f <archivo> o --file <archivo> \n");
               sendStreamToOutput();
               return false;
          }
      } else {
           if ( configurator != NULL ) {
                delete configurator;
                configurator = new SafetYAWL(_currconfpath+ "/" + Safet::datadir);
           }

           configurator->setAutofilters( commands['a']);
           configurator->setRecursivefilters( commands['r']);
           SafetYAWL::streamlog.initAllStack();
           configurator->openXML(commands['f']);

           if (queryForErrors()) {
               //delete configurator;
               qDebug("...retornando.....executedParsed");
               return false;
           }

           configurator->openDataSources();

           configurator->convertXMLtoObjects();
           evalConffileValues(); // Evaluar el mapa de configuración actual
           Q_CHECK_PTR(configurator);
           SafetWorkflow* mywf = configurator->getWorkflow();
           Q_CHECK_PTR(mywf);
           evalParsValues(mywf);

      }



     if ( commands.contains('c') ) {
          streamText << tr("Chequeado...!") << endl;
     }

   QMap<int, QString>::const_iterator i;
   for (i = commands.constBegin(); i != commands.constEnd(); ++i) {
        if ( i.key() != 'f' ) {
                bool result = processCommand(i.key() );
                if ( !result ) {
                    return false;
                }
        }
  }

   sendStreamToOutput();

   return true;



}


bool MainWindow::parseArgs(const QString& a) {

    commands.clear();
    QStringList args = a.split(QRegExp("\\s+"), QString::SkipEmptyParts);

    int currentOption = 0;
    foreach( QString par, args) {
         QRegExp rx;
         rx.setPattern("\\-[a-zA-Z]");
         int pos = rx.indexIn(par);
         if ( pos > -1 )  {
               Q_ASSERT( par.length() == 2 );
               currentOption = (int)(par.at(1).toAscii());
               qDebug("currentOption: %c", currentOption);
               commands.insert(currentOption,"");
         }
         else {
              Q_ASSERT( commands.contains(currentOption) );
              qDebug("commands['%c'] = %s", currentOption, qPrintable(par));
              commands[currentOption] = par;
         }

    }

}

bool MainWindow::parse(int &argc, char **argv) {
       int c;
       int verbose_flag = 0;
       qDebug("argv[0]: |%s|", argv[0]);
       qDebug("argv[1]: |%s|", argv[1]);
        parsed = true;
       while (1)
         {
             struct option long_options[] =
             {
               /* These options set a flag. */
               {"verbose", no_argument,       &verbose_flag , 1},
               {"brief",   no_argument,       &verbose_flag, 0},
               /* These options don't set a flag.
                  We distinguish them by their indices. */
               {"listtasks",   no_argument,       0, 'l'},
               {"listconditions",   no_argument,       0, 'C'},
               {"check",    no_argument,       0, 'c'},
               {"listdocuments",    no_argument,       0, 'd'},
               {"data",    no_argument,       0, 'D'},
               {"file",  required_argument, 0, 'f'},
               {"autofilter",  required_argument, 0, 'a'},
               {"recursivefilter",  required_argument, 0, 'r'},
               {"task",  required_argument, 0, 't'},
                {"template",  no_argument, 0, 'T'},
               {"variable",  required_argument, 0, 'v'},
               {"json",  required_argument, 0, 'j'},
               {"graph",  required_argument, 0, 'g'},
               {"sign",  no_argument, 0, 's'},
               {"keyvalue",  required_argument, 0, 'k'},
               {"plugins",  required_argument, 0, 'p'},
               {"stat",  required_argument, 0, 'S'},
               {"help",  no_argument, 0, 'h'},
               {"version",  no_argument, 0, 'V'},
               {0, 0, 0, 0}
             };
           /* getopt_long stores the option index here. */
           int option_index = 0;

           c = getopt_long (argc, argv, "lCcf:a:t:Tj:dv:g:k:sS:hVD:p:",
                            long_options, &option_index);

           if (c == -1)
             break;
//           qDebug("optarg: %s", optarg);
           switch (c)
             {
             case 0:
               /* If this option set a flag, do nothing else now. */
               if (long_options[option_index].flag != 0)
                 break;
               streamText << tr("Opcion: ") << long_options[option_index].name ;
               if (optarg)
                 streamText << tr(" con argumento: ") <<  optarg << endl;
               break;
             case 'l':
                        commands['l'] = "list";
               break;
             case 'C':
                        commands['C'] = "list";
               break;
             case 'd':
                        commands['d'] = "documents";
               break;
             case 'D':
                        commands['D'] = optarg;
               break;
             case 'c':
                        commands['c'] = "check";
                       break;
             case 'p':
                        commands['p'] = optarg;
                       break;
              case 'f':
                        commands['f'] = optarg;
                       break;
              case 'a':
                       if (!commands.contains('a') ) {
                            commands['a'] = optarg;
                       }
                       else {
                            commands['a'] = commands['a']+"," +QString(optarg);
                       }
                       break;
              case 'r':
                       if (!commands.contains('r') ) {
                            commands['r'] = optarg;
                       }
                       else {
                            commands['r'] = commands['r']+"," +QString(optarg);
                       }
                       break;
              case 'g':
                        commands['g'] = optarg;
                       break;
             case 'v':
                        commands['v'] = optarg;
                        //(*SafetYAWL::evalExit())( SafetYAWL::streamlog.eval(!commands['v'].trimmed().startsWith("-"), tr("Debe especificar un nombre de variable, falta este parametro")) );
                        if (commands['v'].trimmed().startsWith("-") ) {
                            SafetYAWL::streamlog
                                    << SafetLog::Error
                                    <<
                            tr("Debe especificar un nombre de variable, falta este parametro");
                        }
                       break;
             case 'k':
                        commands['k'] = optarg;
//			(*SafetYAWL::evalExit())( SafetYAWL::streamlog.eval(!commands['k'].trimmed().startsWith("-"), tr("Debe especificar un valor para la clave, falta este parametro")) );
                        break;
             case 't':
                        commands['t'] = optarg;
                        break;
             case 'T':
                        commands['T'] = "template";
                        break;
             case 's':
                        commands['s'] = "sign";
                        break;
             case 'S':
                        commands['S'] = optarg;
                        break;
             case 'h':

                        commands['h'] = "help";
                        break;
             case 'V':
                        commands['V'] = "version";
             case '?':
               /* getopt_long already printed an error message. */
               break;

             default:
                        parsed = false;
             }
         }

       //	qDebug("!commands.contains('f'): %d", !commands.contains('f'));
        if ( commands.contains('h') || commands.contains('V') || commands.contains('T')) return true;
        if ( !commands.contains('f')  ) {
                streamText << tr("*** No se especifico la ruta del archivo de flujo de trabajo (.xml) *** \n");
                streamText  <<  tr("Opcion: -f <archivo> o --file <archivo> \n");
//		streamText.flush();
                sendStreamToOutput();
                parsed = false;
                processCommand('f');
        }

       if (verbose_flag)
         streamText << tr("La opción (verbose) está activa\n");

       /* Print any remaining command line arguments (not options). */
       if (optind < argc)
         {
//	   qDebug("optind: %d argc: %d", optind, argc);
           streamText << tr("Parametro(s) invalido(s): ");
           while (optind < argc)
             streamText <<  argv[optind++];
             streamText << endl;
                parsed = false;
         }

        if (!parsed ) return false;

        configurator->openXML(commands['f']);
  //      configurator->openDataSources();
        configurator->convertXMLtoObjects();

        // llamada a la funcion que habilita las fuentes de datos
        //qDebug("MainWindow: configurator->openDataSources()");

        //qDebug("SafetYAWL::databaseOpen: %d", SafetYAWL::databaseOpen);

        //configurator->loadPlugins();

        if ( commands.contains('c') ) {
                streamText << tr("Chequeado...!") << endl;
        }

        return parsed;
}


void MainWindow::sendStreamToOutput() {
     streamText.flush();
    outputText = "";

}


bool MainWindow::processCommand(int command) {
        bool result = true;
        Q_CHECK_PTR( configurator->getWorkflows().at(0) );
        switch ( command ) {
        case 'f':
            if (commands['f'].length() == 0 ) {
                return false;
            }
// 		e = QFile::exists( commands['f'] );
// 		if (!e) {
// 			streamText << tr("No es posible leer el archivo de flujo de trabajo de nombre: \"%1\" ").arg(commands['f']) << endl;
// 			parsed = false;
// 			quit();
// 		}
                break;
        case 'l':
                listTasks();
                break;
        case 'd':
                qDebug("...listDocuments...(1)...");
                listDocuments();
                break;
        case 'D':
                manageData();
                break;
        case 'g':
                result = genGraph();
                break;
        case 's':
                signDocument();
                break;
        case 'S':
                calStatistics();
                break;
        case 'T':
                /* now Nothing */
                break;
        case 'h':
                displayUsage();
                break;
        case 'V':
                version();
                break;

        default:;
        }

        return result;
}



void MainWindow::displayUsage() {
streamText << tr("Uso: safet --file <archivo de flujo de trabajo> [comandos]") << endl;
streamText << tr("     safet -f <archivo de flujo de trabajo> [comandos]") << endl;
streamText << tr("Cliente Safet de linea de comandos, version 0.1.beta") << endl;
streamText << tr("Tipee 'safet --help ' para ayuda sobre los comandos.") << endl;
streamText << tr("Tipee 'safet --version' o 'safet -V' para ver la version del cliente de linea de comandos.") << endl;
streamText << endl;
streamText << endl;
streamText << tr("Los comandos reciben parametros de tipo variable, clave o subcomando, o algunos") << endl;
streamText << tr("de los comandos no requieren ningun parametro. Si no se proveen parámetros a") << endl;
streamText << tr("estos comandos, se generara un mensaje de error.") << endl;
streamText << endl;
streamText << tr("Comandos disponibles:") << endl;
streamText << endl;
streamText << tr("-f --file=ARCHIVO\tIndica el archivo (ARCHIVO) de flujo de trabajo a procesar]") << endl;
streamText << tr("\t\t\tGeneramente debe tener extension .xml y se valida con el archivo de") << endl;
streamText << tr("\t\t\tdefinicion yawlworkflow.dtd") << endl;
streamText << endl;
streamText << tr("-v --variable=NOMBRE\tSelecciona el nombre de la variable a procesar. La variable") << endl;
streamText << tr("\t\t\tdebe estar incluida en el archivo de flujo de trabajo a procesar, e identificada") << endl;
streamText << tr("\t\t\tcon el atributo 'id'.") << endl;
streamText << endl;
streamText << tr("-k --key=CLAVE\t\tIndica la clave para un comando de firma, u otro comando que") << endl;
streamText << tr("\t\t\tlo requiera, generalmente debe ir acompanada del parametro que selecciona el nombre") <<endl;
streamText << tr("\t\t\tde la variable") << endl;
streamText << endl;
streamText << tr("-s --stat=SUBCOMANDO\tGenera la estadistica seleccionada en el subcomando SUBCOMANDO.") << endl;
streamText << tr("\t\t\tLos subcomandos posibles son \"ndocs\" (lista la cantidad de documentos para todas las") << endl;
streamText << tr("\t\t\tvariables) y \"path\" (indica en que actividad/tarea se encuentra el token segun") << endl;
streamText << tr("\t\t\tla clave indicada con el comando -k o --key)") << endl;
streamText << endl;
streamText << tr("-g --graph=ARCHIVO\tGenera un archivo grafico (png,svg,etc.) del flujo") << endl;
streamText << tr("\t\t\tde trabajo. La extension del archivo indica el formato en que se escribe.") << endl;
streamText << tr("\t\t\tSi no se especifica parametro se genera por defecto un archivo con ") << endl;
streamText << tr("\t\t\tel nombre 'output.png' en el directorio actual") << endl;
streamText << endl;
streamText << tr("-c --check\t\tChequea que el archivo de flujo de trabajo indicado") << endl;
streamText << tr("\t\t\ten la opcion -f o --file cumpla todas las reglas (Sintaxis,enlace con") << endl;
streamText << tr("\t\t\trepositorio de datos, etc.) para ser procesado por un comando") << endl;
streamText << endl;
streamText << tr("-l --listtasks\t\tLista todas las tareas/actividades que contiene el archivo") << endl;
 streamText << tr("\t\t\tde flujo de trabajo indicado en la opcion -f o --file") << endl;
streamText << endl;
streamText << tr("-V --version\t\tMuestra la version actual de la aplicacion de linea ") << endl;
streamText << tr("\t\t\tde comandos 'safet'.") << endl;
streamText << endl;
streamText << tr("-h --help\t\tMuestra este texto de ayuda") << endl;
streamText << endl;
streamText << tr("-d --listdocuments\tMuestra los documentos presentes en la variable indicada") << endl;
streamText << tr(" \t\t\tcon el parametro -v o --variable") << endl;
streamText << endl;
streamText << endl;
streamText << tr("Safet es una herramienta para gestion de flujos de trabajos basados en Redes de ") << endl;
streamText << tr("Petri y patrones (AND,OR,XOR, etc), y que incorpora Firma ") << endl;
streamText << tr("Electronica bajo el modelo de Infraestructura de Clave Publica.") << endl;
streamText << endl;
streamText << endl;
streamText << tr("  Software utilizado principalmente en safet:") << endl;
streamText << endl;
streamText << tr("  Libreria Qt:  referirse a: http://www.trolltech.com") << endl;
streamText << tr("   LibDigidoc:  referirse a: http://www.openxades.org") << endl;
streamText << tr("     Graphviz:  referirse a: http://www.graphviz.org") << endl;
streamText << tr("        DbXml:  referirse a: http://www.sleepycat.com") << endl;
streamText << endl;

}


void MainWindow::calStatistics() {

        if ( commands['S'].compare("ndocs", Qt::CaseInsensitive ) == 0 ) {
                streamText << "Estadisticas para el archivo: <" << commands['f'] << ">:" << endl;
                foreach(QString name,configurator->getWorkflows().at(0)->variablesId()){
                        SafetVariable *v = configurator->getWorkflows().at(0)->searchVariable( name );
                        Q_CHECK_PTR( v );
                        streamText << tr("Variable <") << name << tr(">  Numero de fichas: <") << configurator->getWorkflows().at(0)->numberOfTokens(*v) << ">" << endl;
                }
                streamText << endl;
        } else if ( commands['S'].compare("path", Qt::CaseInsensitive ) == 0 ) {
                //(*SafetYAWL::evalExit())( SafetYAWL::streamlog.eval(commands['k'].length() > 0 , tr("No se especifico el valor de la clave (--keyvalue <valor>) para firmar (sign) el documento")) );
                SafetYAWL::evalAndCheckExit(commands['k'].length() > 0 , tr("No se especifico el valor de la clave (--keyvalue <valor>) para firmar (sign) el documento"));

                QString info = 	commands['k'];
                (*SafetYAWL::evalExit())( SafetYAWL::streamlog.eval(commands['t'].length() > 0 , tr("No se especifico un nombre de tarea  (--task <nombre>) para calcular e imprimir los caminos")) );
                QString result = configurator->getWorkflows().at(0)->printPaths(commands['t'],info);
                streamText << tr("Camino(s) para : ") << info << endl;
                streamText << result << endl;
        } else {
                streamText << tr("Argumento del comando Estadisticas -S <arg> o -stat <arg> invalido. Opciones: ndocs, percent, path") << endl;
        }
}



void MainWindow::signDocument() {
        //(*SafetYAWL::evalExit())( SafetYAWL::streamlog.eval(commands['k'].length() > 0 , tr("No se especifico el valor de la clave (--keyvalue <valor>) para firmar (sign) el documento")) );
        SafetYAWL::evalAndCheckExit(commands['k'].length() > 0 , tr("No se especifico el valor de la clave (--keyvalue <valor>) para firmar (sign) el documento"));

        //(*SafetYAWL::evalExit())( SafetYAWL::streamlog.eval(commands['v'].length() > 0 , tr("No se especifico un nombre de variable  (--variable <nombre>) para firmar (sign) el documento")) );
        SafetYAWL::evalAndCheckExit(commands['v'].length() > 0 , tr("No se especifico un nombre de variable  (--variable <nombre>) para firmar (sign) el documento"));


        SafetVariable *v = configurator->getWorkflows().at(0)->searchVariable( commands['v'] );

        //(*SafetYAWL::evalExit())( SafetYAWL::streamlog.eval(v != NULL , tr("No existe la variable : \"%1\" en el documento de flujo de trabajo").arg(commands['v'])) );
        SafetYAWL::evalAndCheckExit(v != NULL , tr("No existe la variable : \"%1\" en el documento de flujo de trabajo").arg(commands['v']));

        QString derror;
        QString documentid = configurator->getWorkflows().at(0)->signDocument(v, commands['k'],derror);
        if (documentid.length() > 0 ) {
          streamText << tr("Documento con id:")  << documentid << " firmado correctamente OK!" << endl;
        }
        else {
           streamText << " NO se introdujo la CLAVE del documento a firmar. NO se realizo la FIRMA." << endl;
        }

}


bool MainWindow::genGraph() {
       char buffer[512];



        QString info;
        if ( commands.contains('p') ) {
            qDebug("***...command['p']: |%s|",qPrintable(commands['p']));
          configurator->loadPlugins(commands['p']);
        }

        if ( commands.contains('k') ) {
                info = 	commands['k'];
        }

        strncpy(buffer, qPrintable(SafetYAWL::getConf()["Plugins.Graphviz/graphtype"]), 4);
        SYD << tr("...MainWindow::doRenderGraph.....buffer:|%1|")
               .arg(buffer);

        SafetYAWL::streamlog.initAllStack();
        QString img = configurator->getWorkflows().at(0)->generateGraph(buffer, info);


        if ( img.isEmpty() ) {
               queryForErrors();

            return false ;
        }

        //SafetYAWL::lastinfodate = "";
        _currentjson =  drawWorkflow(img); // Dibujar el flujo



        return true;
}


void MainWindow::doCipherFile(bool iscipher) {

#ifdef SAFET_OPENSSL // Criptosistema OpenSSL
    // ** Cifrando
    if (iscipher) {
        QString fileconf = SafetYAWL::pathconf+ "/" + "auth.conf";
        SafetCipherFile myfile(fileconf);
        qDebug("doCipherFile fileconf: %s", qPrintable(fileconf));
        myfile.open(QIODevice::ReadOnly);
        myfile.setPassword("caracas");
        QString fileconfcipher = SafetYAWL::pathconf+ "/" + "auth.conf.bin";
        qDebug("doCipherFile fileconfcipher: %s", qPrintable(fileconfcipher));
        myfile.cipherInFile(fileconfcipher);
        qDebug("...ok!");
        myfile.close();
    }
    else {
        // ****** Leyendo cifrado
        QString fileconf = SafetYAWL::pathconf+ "/" + "auth.conf.bin";
        SafetCipherFile myfile(fileconf);
        myfile.open(QIODevice::ReadOnly);
        myfile.setPassword("caracas");
        myfile.readAllCipher();
        QString line;
        while( true ) {
            line = myfile.readCipherLine();
            if (line.isNull()) {
                break;
            }
            qDebug("%s",qPrintable(line));
        }

    }
#endif // OpenSSL
}
void MainWindow::setParsValues(const QMap<QString,QString>& values) {
    _currparsvalues = values;
}

void MainWindow::evalParsValues(SafetWorkflow *wf) {
    SafetYAWL::streamlog
            << SafetLog::Debug
               << tr("MainWindow::evalParsValues()..._currconfvalues.keys().count():%1")
                  .arg(_currparsvalues.keys().count());
    Q_CHECK_PTR(wf);
    QMap<uint,QString> mypars;
    bool ok;
    QVector<QString> mytmpvt(20);
    int countpars = _currparsvalues.keys().count();
    if ( countpars > 20 ) {
                   SYE << tr("El número de parametros del flujo de trabajo es excesivo: \"%1\""
                         ".Tiene que ser menor o igual a veinte (20)")
                      .arg(countpars);
        return;
    }
    for(int i=0; i< countpars;i++) {
        QString mykey = _currparsvalues.keys().at(i);
        QString myvalue = _currparsvalues[mykey];
        uint myintkey = mykey.toUInt(&ok);
        if (myintkey < 20 ) {
            mytmpvt[myintkey] = myvalue;
            mypars[myintkey+1] = myvalue;
            SYD << tr("...***MainWindow::evalParsValues...mytmpvt[%1+1]:|%2|")
                   .arg(myintkey)
                   .arg(myvalue);

        }
    }
    wf->putParameters(mypars);
}

void MainWindow::setConffileValues(const QMap<QString,QString>& values) {
    _currconfvalues = values;
}

void MainWindow::evalConffileValues() {

    SafetYAWL::streamlog
            << SafetLog::Debug
               << tr("MainWindow::evalConffileValues()..._currconfvalues.keys().count():%1")
                  .arg(_currconfvalues.keys().count());
    for(int i=0; i< _currconfvalues.keys().count();i++) {
        QString mykey = _currconfvalues.keys().at(i);
        QString myvalue = _currconfvalues[mykey];

        if ( SafetYAWL::getConf().getMap().contains(mykey)) {
            SafetYAWL::getConf().getMap()[mykey] = myvalue;
        }
    }
    _currconfvalues.clear();

}

void MainWindow::listTasks()
{
        Q_CHECK_PTR( MainWindow::configurator );
        QString outtasks = configurator->getWorkflows().at(0)->listTasks( commands['C'].length() > 0 );
        streamText << "Lista de identificadores  de tareas/actividades:"  << endl;
                streamText << outtasks;
}



void MainWindow::manageData() {
//	streamText << "Data: <" << commands['D'] << ">" << endl;
        SafetTextParser parser;
        parser.setStr( commands['D'].toUtf8() );
        QString str = "agregar,eliminar,actualizar,mostrar";
        QString commandstr = "INSERT INTO,DELETE,UPDATE,SELECT";
        parser.setCommands(str.split(","),commandstr.split(","));
        QString xml = parser.toXml();
        SafetYAWL::streamlog << SafetLog::Debug << tr("Cadena XML generada de la entrada: \n\"%1\"").arg(xml);
//	qDebug("\n\n....xml:\n%s", qPrintable(xml));
        parser.processInput( xml );
        parser.openXml();
        parser.processXml();
}


void MainWindow::version() {
streamText << SafetYAWL::toUcode(QString(INFO_VERSION)) << endl;

}


QMap<QString,QDateTime> MainWindow::doGetPlannedGraph(const QString& namegraph) {
    QMap<QString,QDateTime> result;

    doRestoreGraph(Safet::PLANNEDGRAPHSFILENAME);
    if (graphs().contains(namegraph)) {
        SYW << tr("El nombre de grafo \"%1\" no se encuentra en el repositorio")
               .arg(namegraph);
        return result;
    }

    QString code =  graphs()[namegraph].first;

    if (code.isEmpty()) {
        SYW << tr("El registro para el grafo \"%1\" está vacío")
               .arg(namegraph);
        return result;
    }

    QStringList mylist = code.split("\n",QString::SkipEmptyParts);

    foreach(QString node, mylist) {
        QStringList flist = node.split(",",QString::SkipEmptyParts);
        QString s = flist.at(flist.count()-1);
        SYD << tr(".......MainWindow::doGetPlannedGraph...s:|%1|")
               .arg(s);
        QStringList parlist = s.split("...",QString::SkipEmptyParts);
        Q_ASSERT(parlist.count() > 3 );
        SYD << tr("parlist.count() > 3 ");
        QDateTime mydate;
        mydate.fromString(parlist.at(3));


    }

    return result;
}

void MainWindow::listDocuments(const QString& key) {
    char buffer[20];
    strncpy(buffer, qPrintable(SafetYAWL::getConf()["Graphviz.Plugins/graphtype"]), 3);
    buffer[3] = 0;
    QString code = configurator->getWorkflows().at(0)->generateCodeGraph(buffer,key,false);


    SYD << tr("..............****MainWindow::listDocuments....");

    SYD << tr(".....listDocuments...MainWindow::listDocuments....code:\n|%1|\n")
           .arg(code);
    SYD << tr("..............****MainWindow::listDocuments....");


    QList<SafetYAWL::Miles> ordermiles;

    QString namefields = "completekey,wftask,currkey,rol,timeprev,timecurr,secondswait,porc";

    QString namevalues;




    if(!code.isEmpty()) { // !code.isEmpty
        SYD << tr("1.Existe: %1").arg(QFile::exists("/home/vbravo/.safet/stats/stats.db"));
        SafetBinaryRepo myrepo;

        SYD << tr("...***MainWindow::listDocuments***....(1)...");
        SYD << tr("2.Existe: %1").arg(QFile::exists("/home/vbravo/.safet/stats/stats.db"));
        if (!myrepo.fileExists()) {
            myrepo.open();
            if (!myrepo.createTable("graphs","completekey text primary key,wftask text, currkey text,"
                                    "rol text,timeprev integer, timecurr "
                               "integer, secondswait integer, porc integer"))  {
               SYW << tr("...MainWindow::listDocuments....No se pudo crear el archivo de estadísticas");
            }
            else {
               SYW << tr("...MainWindow::listDocuments....Creado el archivo de estadísticas");
            }

        }
        {
            myrepo.open();
        }

        QMap<QString,QDateTime> myplanneds = doGetPlannedGraph("POA Proyecto Seguridad Formato DDOC 2011 Version 1");
        SafetWorkflow::ExtraInfoSearchKey& sk = configurator->getWorkflows().at(0)->searchKey();
        SYD << tr("...sk.key():|%1|").arg(sk.key);
        SYD << tr("sk.extrainfo.keys(): |%1|").arg(sk.extrainfo.keys().count());

        QDateTime previewdate;

        SYD << tr("...........MainWindow::listDocuments...workflow id:|%1|")
               .arg(configurator->getWorkflows().at(0)->id());

                SYD << tr("...........MainWindow::listDocuments...workflow key:|%1|")
                       .arg(key);
        for( int i = 0; i < sk.extrainfo.keys().count(); i++) {
            QString mykey = sk.extrainfo.keys().at(i);
            SYD << tr("...%1->%2")
                   .arg(mykey)
                   .arg(sk.extrainfo[ mykey]);

            QString mydata = sk.extrainfo[ mykey];
            QStringList mylist = mydata.split(QRegExp(";|<br/>"));
//            foreach(QString d, mylist) {
//                SYD << tr ("...d:|%1|").arg(d);
//            }
            if (mylist.count() < 3 ) {
                continue;
            }
            QDateTime mydate = QDateTime::fromString(mylist.at(1),"dd/MM/yyyy hh:mmap");
            if (!mydate.isValid()) {
                SYD << tr(".....listDocuments....no Valid datetime");
                continue;
            }

            SafetYAWL::Miles mymile;
            mymile.nametask = mykey;

            mymile.ts = mydate;

            mymile.secondswait = 0;


            mymile.humandate = mylist.at(2);
            QStringList myinfolist = mylist.at(0).split(QRegExp("\\s+"),QString::SkipEmptyParts);
            mymile.rol = myinfolist.at(0);
            mymile.porc = "";
            if (myinfolist.count() > 1 ) {
                mymile.porc = myinfolist.at(1);
            }

            int pos = -1;
            for(int j=0; j < ordermiles.count(); j++) {
                if ( mymile.ts  < ordermiles.at(j).ts ) {
                    pos = j;
                    break;

                }
            }
            if (pos == -1 ) {
                pos = ordermiles.count();
            }
            SYD << tr ("....MainWindow::listDocuments insertando en la posicion: %1")
                   .arg(pos);
            ordermiles.insert(pos,mymile);
            previewdate  = mydate; // Colocar fecha anterior
        }


        for(int i = 0; i< ordermiles.count();i++) {
            int days;
            SafetYAWL::Miles &m = ordermiles[i];

            m.humanwait = tr("n/a");

            namevalues =  "'"+configurator->getWorkflows().at(0)->id()+m.nametask+key+"',";
            namevalues += "'"+configurator->getWorkflows().at(0)->id()+m.nametask+"',";
            namevalues += "'"+key+"',";
            namevalues += "'"+m.rol +"',";
            if ( i > 0 ) {
                SafetYAWL::Miles &prev = ordermiles[i-1];
                m.secondswait = m.ts.toTime_t()-prev.ts.toTime_t();
                m.humanwait = SafetWorkflow::humanizeDate(days,prev.ts.toString("dd/MM/yyyy hh:mm:ssap"),
                                                             "dd/MM/yyyy hh:mm:ssap",
                                                             m.ts,
                                                             SafetWorkflow::WaitTime);

                SYD << tr("...........m.prevdate:|%1|").arg(prev.ts.toTime_t());
                SYD << tr("m.secondstowait (prev):|%1|").arg(prev.secondswait);

                namevalues += QString("%1,").arg(prev.ts.toTime_t());
                namevalues += QString("%1,").arg(m.ts.toTime_t());
                namevalues += QString("%1,").arg(m.ts.toTime_t()-prev.ts.toTime_t());
                QString mporc = m.porc;
                if (mporc.endsWith("%")) {
                    mporc.chop(1);
                }
                namevalues += QString("%1").arg(mporc);

            }
            else {
                namevalues += QString("%1,").arg(0);
                namevalues += QString("%1,").arg(m.ts.toTime_t());
                namevalues += QString("%1,").arg(0);
                QString mporc = m.porc;
                if (mporc.endsWith("%")) {
                    mporc.chop(1);
                }
                namevalues += QString("%1").arg(mporc);
            }

            SYD << tr("...........m.task:|%1|").arg(m.nametask);
            SYD << tr("...........m.date:|%1|").arg(m.ts.toTime_t());
            SYD << tr("...........m.porc:|%1|").arg(m.porc);
            SYD << tr("m.rol:|%1|").arg(m.rol);

            myrepo.append("graphs",namefields, namevalues);

            SYD << tr(".........MainWindow::listDocuments....namefields:|%1|")
                   .arg(namefields);
            SYD << tr(".........MainWindow::listDocuments....namevalues:|%1|")
                   .arg(namevalues);

        }



        QString myvalues = myrepo.search("graphs");
        SYD << tr("........MainWindow::listDocuments...values...(1):\n|%1|\n")
               .arg(myvalues);


        QList<QSqlField> myfields;
        _listprincipalcount = ordermiles.count();
        _listprincipaltitle = tr("Lista por Clave \"%1\"")
                                 .arg(key)+_listprincipaltitle;
        QString myjson = getJSONMiles(ordermiles,myfields);

         SYD << tr("...MainWindow::listDocuments...myjson (documents):\n|%1|\n")
                .arg(myjson);
        _listprincipalvariable = "";
        _listprincipalkey = key;

        SYD << tr("...antes de ejecutar: executeJSCodeAfterLoad");
        generateJScriptreports(myjson,myfields);
        executeJSCodeAfterLoad();
        SYD << tr("...después de ejecutar: executeJSCodeAfterLoad");



    } // !code.isEmpty



}

QString MainWindow::getJSONMiles(const QList<SafetYAWL::Miles>& miles,
                                 QList<QSqlField>& myfields) {
    QString str;
    QTextStream out(&str);
    myfields.clear();
    QSqlField f;
    f.setName(tr("Tarea"));
    f.setType(QVariant::String);
    myfields.append(f);
    f.setName(tr("Rol"));
    myfields.append(f);
    f.setName(tr("Fecha"));
    myfields.append(f);
    f.setName(tr("Tiempo"));
    myfields.append(f);
    f.setName(tr("Espera"));
    myfields.append(f);
    f.setName(tr("Porc"));
    myfields.append(f);

    for( int i = 0; i < miles.count(); i++) {
        QString cadena("");
        out << "\t\t{ ";
            cadena.append(" ");
            cadena.append(tr("Tarea"));
            cadena.append(": \"");
            cadena.append(miles.at(i).nametask);
            cadena.append("\", ");
            cadena.append(" ");
            cadena.append(tr("Rol"));
            cadena.append(": \"");
            cadena.append(miles.at(i).rol);
            cadena.append("\", ");
            cadena.append(" ");
            cadena.append(tr("Fecha"));
            cadena.append(": \"");
            cadena.append(miles.at(i).ts.toString("dd/MM/yyyy hh:mmap"));
            cadena.append("\", ");
            cadena.append(" ");
            cadena.append(tr("Tiempo"));
            cadena.append(": \"");
            cadena.append(miles.at(i).humandate);
            cadena.append("\"");
            cadena.append(", ");
            cadena.append(tr("Espera"));
            cadena.append(": \"");
            cadena.append(miles.at(i).humanwait);
            cadena.append("\"");
            cadena.append(", ");
            cadena.append(tr("Porc"));
            cadena.append(": \"");
            cadena.append(miles.at(i).porc);
            cadena.append("\"");
            out << cadena ;
            out << "},\n";
            cadena.clear();
    }
    str.chop(2);
    return str;
}

void MainWindow::listDocuments() {

     qDebug("...*listDocuments...commands['v']: %s", qPrintable(commands['v']));
     qDebug("...MainWindow::listDocuments()....");
     QString info;
     if ( commands.contains('k') ) {
             info = 	commands['k'];
             listDocuments(info);
             return;
     }

        SafetVariable* var = configurator->getWorkflows().at(0)->searchVariable( commands['v'] );

        if (var == NULL ) {
                streamText << tr("La variable \"%1\" NO existe en la especificacion de flujo de trabajo. Revise el nombre en el documento de flujo de trabajo").arg(commands['v']) << endl;
                SafetYAWL::streamlog
                        << SafetLog::Error
                        <<  tr("La variable \"%1\" NO existe en la especificacion de flujo de trabajo."
                               "Revise el nombre en el documento de flujo de trabajo")
                        .arg(commands['v']);
                return;
        }

        if ( commands.contains('p') ) {
          configurator->loadPlugins(commands['p']);
        }
        QList<QSqlField> fields;

        SafetVariable *myvar = configurator->getWorkflows().at(0)->searchVariable((commands['v']));

        if ( myvar != NULL ) {
            if ( !myvar->description().isEmpty()) {
                _listprincipaltitle = myvar->description()+_listprincipaltitle;
            }
            else {
                _listprincipaltitle = QString("%1%2").arg(commands['v']).arg(_listprincipaltitle);
            }
        }
        else {
            _listprincipaltitle = QString("%1%2").arg(commands['v']).arg(_listprincipaltitle);

        }


         QString documents = configurator->getWorkflows().at(0)->getDocuments(commands['v'],
        fields,_listprincipalcount,
        SafetWorkflow::JSON, "");

         SYD << tr("....MainWindow::listDocuments..._listprincipalcount:|%1|")
                .arg(_listprincipalcount);

         _listprincipalvariable = commands['v'];
         _listprincipalkey = "";

//        SYD << tr("....MainWindow::listDocuments....documents: \n|%1|\n")
//               .arg(documents);
        generateJScriptreports(documents,fields);
        executeJSCodeAfterLoad();

}


void MainWindow::iterateMap(const QMap<QString,QVariant>& map) {

     QList<QVariant> mylist = map.values("record");
     for ( int i = 0 ; i < mylist.count(); i++) {
          qDebug("\n..%d. Registro:", i+1);
          qDebug("id: %s", qPrintable(mylist.at(i).toMap()[ "id" ].toString()));
          qDebug("description: %s", qPrintable(mylist.at(i).toMap()[ "description" ].toString()));
          qDebug("summary: %s", qPrintable(mylist.at(i).toMap()[ "summary" ].toString()));
     }

}







void MainWindow::successVerification(QStringList list, const QString& msg) {
/*  // funcion comentada para eliminar dependencia de digidocpp
    qDebug("...........**......MainWindow::successVerification(QStringList list, const QString& msg) {");
    Q_CHECK_PTR(dockShowResult);
    QString message;
    if ( msg.isEmpty()) {
        message = QString("<table><tr><td><font color=green>%1</font></td></tr></table>").arg(tr("Verificación exitosa....<b>ok!</b>"));
    }
    else {
        message = QString("<table><tr><td><font color=green>%1</font></td></tr></table>").arg(msg);
    }

    dockShowResult->addHeadHtml(message);
    qDebug("....successVerification........message: %s",qPrintable(message));
    dockShowResult->addOptionsDigidoc(digiDocument,list);
    showShowResultWidget(DockSbMenu::Show);
*/
}

void MainWindow::successVerification(QStringList list, const QString& msg, SafetDocument doc){
    qDebug("...........**......MainWindow::successVerification(QStringList list, const QString& msg, SafetDocument doc)");

    QString message;
    if ( msg.isEmpty()) {
        message = QString("<table><tr><td><font color=green>%1</font></td></tr></table>").arg(tr("Verificación exitosa....<b>ok!</b>"));
    }
    else {
        message = QString("<table><tr><td><font color=green>%1</font></td></tr></table>").arg(msg);
    }


}

QString MainWindow::renderMessageStack(QStack<QPair<QDateTime,QString> >& stack, SafetLog::Level l){
    QString result;
    qDebug("...Probando el manejo de errores y advertencias: elementos: -->|%d|", stack.count());
    if ( stack.isEmpty()) return result;
    QString newtable = QString("<table>%1</table><br/>");
    QString newrow = QString("<tr>%1</tr>");
    QString newcol = QString("<td>%2%1</td>");
    QString rows, cols;
    if( l == SafetLog::Error) {
//        rows += QString("<tr><td colspan=2><font color=red>%1</font></td></tr>").arg(tr("Los siguientes errores ocurrieron en la operaci&oacute;n:"));
    }
    else {
        rows += QString("<tr><td colspan=2><font color=black>%1</font></td></tr>").arg(tr("Mensajes:"));
    }
    while ( !stack.isEmpty() ) {
        QPair<QDateTime,QString> c = stack.pop();
        if( l == SafetLog::Error) {
            cols = newcol.arg(c.first.toString(SafetYAWL::streamlog.dateFormat())).arg("<font color=red><b>&rarr;</b></font>");
        } else {
            cols = newcol.arg(c.first.toString(SafetYAWL::streamlog.dateFormat())).arg("<font color=black><b>&rarr;</b></font>");
        }
        cols += newcol.arg(c.second).arg("");
        rows += newrow.arg(cols);
    }
    result = newtable.arg(rows);

    return result;
}

// ** Servicios de Escritorio (QDesktopServices)

void MainWindow::browse( const QUrl &url )
{
        QUrl u = url;
        u.setScheme( "file" );
        bool started = false;
#if defined(Q_OS_WIN32)
        started = QProcess::startDetached( "cmd", QStringList() << "/c" <<
                QString( "explorer /select,%1" ).arg( QDir::toNativeSeparators( u.toLocalFile() ) ) );
#elif defined(Q_OS_MAC)
        started = QProcess::startDetached("/usr/bin/osascript", QStringList() <<
                                                                          "-e" << "on run argv" <<
                                                                          "-e" << "set vfile to POSIX file (item 1 of argv)" <<
                                                                          "-e" << "tell application \"Finder\"" <<
                                                                          "-e" << "select vfile" <<
                                                                          "-e" << "activate" <<
                                                                          "-e" << "end tell" <<
                                                                          "-e" << "end run" <<
                                                                          // Commandline arguments
                                                                          u.toLocalFile());
#endif
        if( started )
                return;
        QDesktopServices::openUrl( QUrl::fromLocalFile( QFileInfo( u.toLocalFile() ).absolutePath() ) );
}

void MainWindow::mailTo( const QUrl &url )
{
#ifdef SAFET_ESMTP // correo electronico
#if defined(Q_OS_WIN32)
        QString file = url.queryItemValue( "attachment" );
        QByteArray filePath = QDir::toNativeSeparators( file ).toLatin1();
        QByteArray fileName = QFileInfo( file ).fileName().toLatin1();
        QByteArray subject = url.queryItemValue( "subject" ).toLatin1();

        MapiFileDesc doc[1];
        doc[0].ulReserved = 0;
        doc[0].flFlags = 0;
        doc[0].nPosition = -1;
        doc[0].lpszPathName = filePath.data();
        doc[0].lpszFileName = fileName.data();
        doc[0].lpFileType = NULL;

        // Create message
        MapiMessage message;
        message.ulReserved = 0;
        message.lpszSubject = subject.data();
        message.lpszNoteText = "";
        message.lpszMessageType = NULL;
        message.lpszDateReceived = NULL;
        message.lpszConversationID = NULL;
        message.flFlags = 0;
        message.lpOriginator = NULL;
        message.nRecipCount = 0;
        message.lpRecips = NULL;
        message.nFileCount = 1;
        message.lpFiles = (lpMapiFileDesc)&doc;

        QLibrary lib("mapi32");
        typedef ULONG (PASCAL *SendMail)(ULONG,ULONG,MapiMessage*,FLAGS,ULONG);
        SendMail mapi = (SendMail)lib.resolve("MAPISendMail");
        if( mapi )
        {
                mapi( NULL, 0, &message, MAPI_LOGON_UI|MAPI_DIALOG, 0 );
                return;
        }
#elif defined(Q_OS_MAC)
        CFURLRef emailUrl = CFURLCreateWithString(kCFAllocatorDefault, CFSTR("mailto:info@example.com"), NULL), appUrl = NULL;
        bool started = false;
        if(LSGetApplicationForURL(emailUrl, kLSRolesEditor, NULL, &appUrl) == noErr)
        {
                CFStringRef appPath = CFURLCopyFileSystemPath(appUrl, kCFURLPOSIXPathStyle);
                if(appPath != NULL)
                {
                        if(CFStringCompare(appPath, CFSTR("/Applications/Mail.app"), 0) == kCFCompareEqualTo)
                        {
                                started = QProcess::startDetached("/usr/bin/osascript", QStringList() <<
                                        "-e" << "on run argv" <<
                                        "-e" << "set vattachment to (item 1 of argv)" <<
                                        "-e" << "set vsubject to (item 2 of argv)" <<
                                        "-e" << "tell application \"Mail\"" <<
                                        "-e" << "set composeMessage to make new outgoing message at beginning with properties {visible:true}" <<
                                        "-e" << "tell composeMessage" <<
                                        "-e" << "set subject to vsubject" <<
                                        "-e" << "tell content" <<
                                        "-e" << "make new attachment with properties {file name: vattachment} at after the last paragraph" <<
                                        "-e" << "end tell" <<
                                        "-e" << "end tell" <<
                                        "-e" << "activate" <<
                                        "-e" << "end tell" <<
                                        "-e" << "end run" <<
                                        // Commandline arguments
                                        url.queryItemValue("attachment") <<
                                        url.queryItemValue("subject"));
                        }
                        else if(CFStringFind(appPath, CFSTR("Entourage"), 0).location != kCFNotFound)
                        {
                                started = QProcess::startDetached("/usr/bin/osascript", QStringList() <<
                                        "-e" << "on run argv" <<
                                        "-e" << "set vattachment to (item 1 of argv)" <<
                                        "-e" << "set vsubject to (item 2 of argv)" <<
                                        "-e" << "tell application \"Microsoft Entourage\"" <<
                                        "-e" << "set vmessage to make new outgoing message with properties" <<
                                        "-e" << "{subject:vsubject, attachments:vattachment}" <<
                                        "-e" << "open vmessage" <<
                                        "-e" << "activate" <<
                                        "-e" << "end tell" <<
                                        "-e" << "end run" <<
                                        // Commandline arguments
                                        url.queryItemValue("attachment") <<
                                        url.queryItemValue("subject"));
                        }
                        else if(CFStringCompare(appPath, CFSTR("/Applications/Thunderbird.app"), 0) == kCFCompareEqualTo)
                        {
                                // TODO: Handle Thunderbird here? Impossible?
                        }
                        CFRelease(appPath);
                }
                CFRelease(appUrl);
        }
        CFRelease(emailUrl);
        if( started )
                return;
#elif defined(Q_OS_LINUX)
        QByteArray thunderbird;
        QProcess p;
        QStringList env = QProcess::systemEnvironment();
        if( env.indexOf( QRegExp("KDE_FULL_SESSION.*") ) != -1 )
        {
                p.start( "kreadconfig", QStringList()
                        << "--file" << "emaildefaults"
                        << "--group" << "PROFILE_Default"
                        << "--key" << "EmailClient" );
                p.waitForFinished();
                QByteArray data = p.readAllStandardOutput().trimmed();
                if( data.contains("thunderbird") )
                        thunderbird = data;
        }
        else if( env.indexOf( QRegExp("GNOME_DESKTOP_SESSION_ID.*") ) != -1 )
        {
                p.start( "gconftool-2", QStringList()
                        << "--get" << "/desktop/gnome/url-handlers/mailto/command" );
                p.waitForFinished();
                QByteArray data = p.readAllStandardOutput();
                if( data.contains("thunderbird") )
                        thunderbird = data.split(' ').value(0);
        }
        if( !thunderbird.isEmpty() )
        {
                bool started = p.startDetached( thunderbird, QStringList() << "-compose"
                        << QString( "subject='%1',attachment='%2,'" )
                                .arg( url.queryItemValue( "subject" ) )
                                .arg( QUrl::fromLocalFile( url.queryItemValue( "attachment" ) ).toString() ) );
                if( started )
                        return;
        }
#endif
        QDesktopServices::openUrl( url );
#endif // Correo Electronico
}

void MainWindow::manageDataSources(){

    //QString driver = "database.driver.";
    QString hostName = "database.host.";
    QString dataBaseName = "database.db.";
    QString userName = "database.user.";
    QString portName = "database.port.";

    int i = 0;
//    QString driverConf = SafetYAWL::getAuthConf()
//                         .getValue("Database", driver+QString::number(i+1)).toString();
    QString hostNameConf = SafetYAWL::getAuthConf()
                           .getValue("Database", hostName+QString::number(i+1)).toString();
    //qDebug("hostname: %s", qPrintable(hostNameConf));

    QString dataBaseNameConf = SafetYAWL::getAuthConf()
                       .getValue("Database", dataBaseName+QString::number(i+1)).toString();
    //qDebug("database: %s", qPrintable(dataBaseNameConf));
    QString userNameConf = SafetYAWL::getAuthConf()
                           .getValue("Database", userName+QString::number(i+1)).toString();
    //qDebug("user: %s", qPrintable(userNameConf));
    QString portConf = SafetYAWL::getAuthConf()
                       .getValue("Database", portName+QString::number(i+1)).toString();
    //qDebug("port: %s", qPrintable(portConf ));

    /*if ( result != QDialog::Accepted ){
            return;
    }*/
    
    return;
}



void MainWindow::setEnableCompletingButtons(bool b){

    qDebug("MainWindow::setEnableCompletingButtons(bool b)");
    // habilitar el boton de enviar
    completingButtonForm->setEnabled(b);
    completingButtonCons->setEnabled(b);
    //completingButtonSign->setEnabled(false);
    completingButtonConf->setEnabled(b);
    completingButtonUsers->setEnabled(b);
}


void MainWindow::doLoadConfiguration() {
    

}

bool MainWindow::processDirTar(const QString& f, bool isprincipal) {

}


void MainWindow::doDelAllFilesOnDirectory(const QString &d) {
    QDir dir(d);
    if ( !dir.exists() ) {
        SafetYAWL::streamlog
                << SafetLog::Error
                << tr("No se puede eliminar archivos de un directorio vacío: \"%1\"")
                .arg(d);
        return;
    }

    dir.setFilter( QDir::Files );
    dir.setSorting(QDir::Size | QDir::Reversed);
    QStringList filters;
    filters << "*";
    dir.setNameFilters( filters );
    QStringList filelist = dir.entryList(QDir::Files);
    SafetYAWL::streamlog
            << SafetLog::Debug
            << tr("(Carga de configuración) "
                  ". Número de archivos a eliminar: \"%1\"").arg(filelist.count());
    foreach(QString f, filelist) {
        bool isdeleting = dir.remove(f);
        if ( !isdeleting) {
            SafetYAWL::streamlog
                    << SafetLog::Warning
                    <<
            tr("(Carga de la configuración) No se borró el archivo: \"%1\"")
                   .arg(f);
        }

    }


}

QString MainWindow::generateListForTar(const QString& folder, QStringList& myfiles,
                                       const QStringList& exts) {


    QString result;
    QString newdir = Safet::datadir;
    if (newdir.startsWith(".")) {
        newdir = newdir.mid(1);
    }
    if (!folder.isEmpty()) {
        result =  QDir::tempPath()+"/"+newdir +"."+folder+".tar";
    }
    else {
        result =  QDir::tempPath()+"/" + newdir +".tar";
    }
    QString confpath = _currconfpath + "/" + Safet::datadir + "/" + folder;

    QDir dirconf(confpath);
    dirconf.setFilter(QDir::Files | QDir::NoSymLinks);
    if (!dirconf.exists()) {
        SafetYAWL::streamlog
                << SafetLog::Error
                << tr("Error al intentar abrir el directorio para empaquetado: \"%1\"")
                .arg(confpath);
        return QString("");

    }


    QFileInfoList mylist = dirconf.entryInfoList();

    for (int i=0; i<mylist.size(); i++)
    {
        QFileInfo fileInfo = mylist.at(i);
        foreach(QString e, exts) {
            if (fileInfo.filePath().endsWith("."+e)) {
               myfiles.append(fileInfo.filePath());
               //qDebug("...fileInfo.filePath(): %s", qPrintable(fileInfo.filePath()));
               break;
            }
        }
    }
    return result;

}

void MainWindow::loadAuthorization() {

      int countperm = 1;
    while ( true ) {
        QString operation =  SafetYAWL::getAuthConf()[QString("Permises/operation.%1").arg(countperm)];
        QString accounts = SafetYAWL::getAuthConf()[QString("Permises/accounts.%1").arg(countperm)];
        QString types =  SafetYAWL::getAuthConf()[QString("Permises/types.%1").arg(countperm)];
        QString roles =  SafetYAWL::getAuthConf()[QString("Permises/roles.%1").arg(countperm)];
        QString thesign;
        if (operation.trimmed().length() == 0 ) {
            break;
        }
        QStringList info;

        info.append(accounts);
        info.append(types);
        info.append(roles);
        info.append(thesign);

        MainWindow::permises[ operation ] = info;
        countperm++;

    }

}

void MainWindow::loadInfo() {


    int countuser = 1;

    while ( true ) {
        QString account = SafetYAWL::getAuthConf()[QString("Auth/account.%1").arg(countuser)];
        if ( account.trimmed().length() == 0 ) {
            break;
        }
        QString pass = SafetYAWL::getAuthConf()[QString("Auth/pass.%1").arg(countuser)];
        QString role = SafetYAWL::getAuthConf()[QString("Auth/role.%1").arg(countuser)];
        QString realname = SafetYAWL::getAuthConf()[QString("Auth/realname.%1").arg(countuser)];
        if ( pass.trimmed().length() > 0 ) {
            QStringList mylist;
            mylist.append(pass);
            mylist.append(role);
            mylist.append(realname);
            users[ account ] = mylist;
        }
        countuser++;
    }

}


bool MainWindow::logout() {
   if ( MainWindow::currentaccount.isEmpty() ) {
	return false;
   }
   MainWindow::currentaccount = "";
   MainWindow::currentrole = "";
   MainWindow::currentrealname = "";
   return true;

}

bool MainWindow::login(const QString& name, const QString& pass) {

    QString curuser = name;
    if ( !users.contains(curuser) ) {

        SYE  <<
		tr("El usuario \"%1\" no existe en la base de datos de autorización"); 

        return false;

    }
    Q_ASSERT( users[curuser].count() > 0 );

    QByteArray textvalue = QByteArray(qPrintable(pass));
    QByteArray hashvalue = QCryptographicHash::hash( textvalue, QCryptographicHash::Sha1 );
    if ( users[curuser].at(0) != QString(hashvalue.toHex().data()) ) {
	SafetYAWL::streamlog << SafetLog::Error <<
            trUtf8("La contraseña para el usuario \"%1\" es incorrecta");        
	qDebug("Contraseña incorrecta");
        return false;
    }

    MainWindow::currentaccount = curuser;
    SafetYAWL::setCurrentAuthUser(MainWindow::currentaccount);
            SYA << tr("El usuario (sistema de autorizacion a cambiado a \"%1\"")
            .arg(SafetYAWL::currentAuthUser());

    if ( users[curuser].count() > 1 ) {
        MainWindow::currentrole = users[curuser].at(1);
        if ( users[curuser].count() > 2 ) {
            MainWindow::currentrealname = users[curuser].at(2);            
        }
    }
    else {
        MainWindow::currentrole = "";
    }

    return true;
}

void MainWindow::doSaveConfiguration() {


}

QString MainWindow::currentError() {
      qDebug("...*****MainWindow::currentError...");
      qDebug("_currenterror: |%s|", qPrintable(_currenterror));
      QString result = _currenterror;
      _currenterror = "";
      return result;
}

QString MainWindow::currentJSON()   {
    QString result = _currentjson;

    _currentjson = QLatin1String("");
    return result;

}

QString MainWindow:: hostURL() {
    if (_hosturl.endsWith("/")) {
        _hosturl.chop(1);
    }
    return _hosturl;
}

void MainWindow::setHostURL(const QString& u) {
    _hosturl = u;
    if (_hosturl.endsWith("/")) {
        _hosturl.chop(1);
    }

}



#ifdef SAFET_ESMTP // correo electronico
#include <auth-client.h>
#include <libesmtp.h>
#endif // ESTMP

#include <fcntl.h>
#include <signal.h>
#include <openssl/ssl.h>
#include <ctype.h>

#ifdef SAFET_ESMTP // correo electronico
static void
build_message(FILE *fp);

int
handle_invalid_peer_certificate(long vfy_result)
{
  const char *k ="rare error";
  switch(vfy_result) {
  case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT:
    k="X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT"; break;
  case X509_V_ERR_UNABLE_TO_GET_CRL:
    k="X509_V_ERR_UNABLE_TO_GET_CRL"; break;
  case X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE:
    k="X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE"; break;
  case X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE:
    k="X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE"; break;
  case X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY:
    k="X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY"; break;
  case X509_V_ERR_CERT_SIGNATURE_FAILURE:
    k="X509_V_ERR_CERT_SIGNATURE_FAILURE"; break;
  case X509_V_ERR_CRL_SIGNATURE_FAILURE:
    k="X509_V_ERR_CRL_SIGNATURE_FAILURE"; break;
  case X509_V_ERR_CERT_NOT_YET_VALID:
    k="X509_V_ERR_CERT_NOT_YET_VALID"; break;
  case X509_V_ERR_CERT_HAS_EXPIRED:
    k="X509_V_ERR_CERT_HAS_EXPIRED"; break;
  case X509_V_ERR_CRL_NOT_YET_VALID:
    k="X509_V_ERR_CRL_NOT_YET_VALID"; break;
  case X509_V_ERR_CRL_HAS_EXPIRED:
    k="X509_V_ERR_CRL_HAS_EXPIRED"; break;
  case X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD:
    k="X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD"; break;
  case X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD:
    k="X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD"; break;
  case X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD:
    k="X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD"; break;
  case X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD:
    k="X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD"; break;
  case X509_V_ERR_OUT_OF_MEM:
    k="X509_V_ERR_OUT_OF_MEM"; break;
  case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT:
    k="X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT"; break;
  case X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN:
    k="X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN"; break;
  case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY:
    k="X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY"; break;
  case X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE:
    k="X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE"; break;
  case X509_V_ERR_CERT_CHAIN_TOO_LONG:
    k="X509_V_ERR_CERT_CHAIN_TOO_LONG"; break;
  case X509_V_ERR_CERT_REVOKED:
    k="X509_V_ERR_CERT_REVOKED"; break;
  case X509_V_ERR_INVALID_CA:
    k="X509_V_ERR_INVALID_CA"; break;
  case X509_V_ERR_PATH_LENGTH_EXCEEDED:
    k="X509_V_ERR_PATH_LENGTH_EXCEEDED"; break;
  case X509_V_ERR_INVALID_PURPOSE:
    k="X509_V_ERR_INVALID_PURPOSE"; break;
  case X509_V_ERR_CERT_UNTRUSTED:
    k="X509_V_ERR_CERT_UNTRUSTED"; break;
  case X509_V_ERR_CERT_REJECTED:
    k="X509_V_ERR_CERT_REJECTED"; break;
  }
  printf("SMTP_EV_INVALID_PEER_CERTIFICATE: %ld: %s\n", vfy_result, k);
  return 1; /* Accept the problem */
}


void event_cb (smtp_session_t session, int event_no, void *arg,...)
{
  va_list alist;
  int *ok;

  va_start(alist, arg);
  switch(event_no) {
  case SMTP_EV_CONNECT:
  case SMTP_EV_MAILSTATUS:
  case SMTP_EV_RCPTSTATUS:
  case SMTP_EV_MESSAGEDATA:
  case SMTP_EV_MESSAGESENT:
  case SMTP_EV_DISCONNECT: break;
  case SMTP_EV_WEAK_CIPHER: {
    int bits;
    bits = va_arg(alist, long); ok = va_arg(alist, int*);
    printf("SMTP_EV_WEAK_CIPHER, bits=%d - accepted.\n", bits);
    *ok = 1; break;
  }
  case SMTP_EV_STARTTLS_OK:
    puts("SMTP_EV_STARTTLS_OK - TLS started here."); break;
  case SMTP_EV_INVALID_PEER_CERTIFICATE: {
    long vfy_result;
    vfy_result = va_arg(alist, long); ok = va_arg(alist, int*);
    *ok = handle_invalid_peer_certificate(vfy_result);
    break;
  }
  case SMTP_EV_NO_PEER_CERTIFICATE: {
    ok = va_arg(alist, int*);
    puts("SMTP_EV_NO_PEER_CERTIFICATE - accepted.");
    *ok = 1; break;
  }
  case SMTP_EV_WRONG_PEER_CERTIFICATE: {
    ok = va_arg(alist, int*);
    puts("SMTP_EV_WRONG_PEER_CERTIFICATE - accepted.");
    *ok = 1; break;
  }
  case SMTP_EV_NO_CLIENT_CERTIFICATE: {
    ok = va_arg(alist, int*);
    puts("SMTP_EV_NO_CLIENT_CERTIFICATE - accepted.");
    *ok = 1; break;
  }
  default:
    printf("Got event: %d - ignored.\n", event_no);
  }
  va_end(alist);
}



/* Callback to prnt the recipient status */
void
print_recipient_status (smtp_recipient_t recipient,
                        const char *mailbox, void *arg)
{
  const smtp_status_t *status;

  status = smtp_recipient_status (recipient);
  printf ("%s: %d %s", mailbox, status->code, status->text);
}

static int
_mutt_libesmtp_auth_interact (auth_client_request_t request,
                              char **result, int fields, void *arg)
{
  int i;

  for (i = 0; i < fields; i++) {
    if (request[i].flags & AUTH_USER) {
        result[i] = "vbravo";
    }
    else if (request[i].flags & AUTH_PASS) {
        result[i] = "4cajicA!";
    }
  }

  return 1;
}
#endif // ESMTP

void SAFETsendMail(const char *messageContents)
{
#ifdef SAFET_ESMTP // correo electronico
        smtp_session_t session;
        smtp_message_t message;
        smtp_recipient_t recipient;
        const smtp_status_t *status;
        struct sigaction sa;
        char *host = "mail.cenditel.gob.ve:25";
        char *from = "vbravo@cenditel.gob.ve";
        char *subject = "Prueba con esmtp";
        const char *recipient_address = "victorrbravo@gmail.com";
         auth_context_t authctx = NULL;
        char tempFileName[1000];
        int tempFd;
        FILE *fp;
        enum notify_flags notify = (notify_flags) (Notify_SUCCESS | Notify_FAILURE);

        auth_client_init();
        session = smtp_create_session();
        message = smtp_add_message(session);

        /* Ignore sigpipe */
        sa.sa_handler = SIG_IGN;
        sigemptyset(&sa.sa_mask);
        sa.sa_flags = 0;
        sigaction(SIGPIPE, &sa, NULL);

        /* Set the Subject: header.  For no reason, we want the supplied subject
         to override any subject line in the message headers. */
//        if (subject != NULL) {
//            smtp_set_header(message, "Subject", "prueba");
//                smtp_set_header_option(message, "Subject", Hdr_OVERRIDE, 1);
//        }

        smtp_starttls_enable(session,Starttls_ENABLED);
        smtp_set_server(session, host);
        authctx = auth_create_context ();
        auth_set_mechanism_flags (authctx, AUTH_PLUGIN_PLAIN, 0);
        auth_set_interact_cb (authctx, _mutt_libesmtp_auth_interact, NULL);
        smtp_auth_set_context (session, authctx);





        smtp_set_eventcb(session, event_cb, NULL);

        /* Set the reverse path for the mail envelope.  (NULL is ok)
         */

        smtp_set_header(message, "From", "vbravo",from);
        smtp_set_header(message, "To", "Victor Bravo","victorrbravo@gmail.com");
//        smtp_set_header(message, "Subject", "Prueba de mensaje");
//        smtp_set_header(message, "Message-Id", NULL);
        smtp_set_reverse_path(message, from);


        /* Prepare message */
        memset(tempFileName, 0, sizeof(tempFileName));
        sprintf(tempFileName, "/tmp/messageXXXXXX");
        tempFd = mkstemp(tempFileName);
        fp = fdopen(tempFd, "w");
        build_message(fp);
//        fprintf(fp, "%s", messageContents);
        fclose(fp);
        fp = fopen(tempFileName, "r");
        smtp_set_message_fp(message, fp);





        recipient = smtp_add_recipient(message, recipient_address);

        smtp_dsn_set_notify (recipient, notify);

        /* Initiate a connection to the SMTP server and transfer the
         message. */
        if (!smtp_start_session(session)) {
                char buf[128];

                fprintf(stderr, "SMTP server problem %s\n", smtp_strerror(smtp_errno(),
                                buf, sizeof buf));
        } else {
                /* Report on the success or otherwise of the mail transfer.
                 */

            status = smtp_message_transfer_status(message);
            printf("%d %s", status->code, (status->text != NULL) ? status->text
                                                                 : "\n");
            smtp_enumerate_recipients(message, print_recipient_status, NULL);
        }

        /* Free resources consumed by the program.
         */
        smtp_destroy_session(session);
        fclose(fp);
        auth_client_exit();
#endif
}


#ifdef SAFET_ESMTP // correo electronico
static void
build_message(FILE *fp)
{

  fprintf(fp, "Return-Path: <%s>\r\n", "vbravo@cenditel.gob.ve");
  fprintf(fp, "Subject: %s\r\n", "Correo de activacion Gestion");
//  fprintf(fp, "From: %s %s\r\n", "vbravo","vbravo@cenditel.gob.ve");
//  fprintf(fp, "To: %s %s\r\n", "Victor Bravo","victorrbravo@gmail.com");
  fprintf(fp, "MIME-Version: 1.0\r\n");
  fprintf(fp, "Content-Type: text/plain;\r\n");
  fprintf(fp, "  charset=iso-8859-1\r\n");
  fprintf(fp, "Content-Transfer-Encoding: 7bit\r\n");
//  fprintf(fp, "X-send-pr-version: Evolution \r\n");
//  fprintf(fp, "X-GNATS-Notify: \r\n");
//  fprintf(fp, "\r\n\r\n");
//  fprintf(fp, ">Submitter-Id:	%s \r\n", "1");
//  fprintf(fp, ">Originator:	%s \r\n", "vbravo@cenditel.gob.ve");
//  fprintf(fp, ">Organization:	%s \r\n", "CENDITEL");
//  fprintf(fp, ">Confidential:	no \r\n");
//  fprintf(fp, ">Synopsis:	%s \r\n", "Correo de activacion");
//  fprintf(fp, ">Severity:	%s \r\n", "prueba6");
//  fprintf(fp, ">Priority:	%s \r\n", "(Highest)");
//  fprintf(fp, ">Category:	%s \r\n", "prueba8");
//  fprintf(fp, ">Class:		%s \r\n", "prueba9");
//  fprintf(fp, ">Release:	%s \r\n", "prueba10");

  fprintf(fp, ">Environment:\r\n");
  fprintf(fp, "\r\n\r\n");
  fprintf(fp, "%s\r\n", "prueba11");
  fprintf(fp, "\r\n\r\n");

  fprintf(fp, ">Description:\r\n");
  fprintf(fp, "\r\n\r\n");
  fprintf(fp, "%s\r\n", "Mensaje de activacion");
  fprintf(fp, "\r\n\r\n");

  fprintf(fp, ">How-To-Repeat:\r\n");
  fprintf(fp, "\r\n\r\n");
  fprintf(fp, "%s\r\n", "prueba13");
  fprintf(fp, "\r\n\r\n");

  fprintf(fp, ">Fix:\r\n");
  fprintf(fp, "\r\n\r\n");
  fprintf(fp, "%s\r\n", "prueba14");
  fprintf(fp, "\r\n\r\n");

}
#endif // ESMTP


