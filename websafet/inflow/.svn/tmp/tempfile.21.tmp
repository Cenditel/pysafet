/****************************************************************************
**
** Copyright (C) 2006-2006 Trolltech ASA. All rights reserved.
**
** This file is part of the example classes of the Qt Toolkit.
**
** This file may be used under the terms of the GNU General Public
** License version 2.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of
** this file.  Please review the following information to ensure GNU
** General Public Licensing requirements will be met:
** http://www.trolltech.com/products/qt/opensource.html
**
** If you are unsure which license is appropriate for your use, please
** review the following information:
** http://www.trolltech.com/products/qt/licensing.html or contact the
** sales department at sales@trolltech.com.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/
/*
* SAFET Sistema Automatizado para la Firma Electrï¿½nica y Estampado de Tiempo
* Copyright (C) 2008 Vï¿½ctor Bravo (vbravo@cenditel.gob.ve), Antonio Araujo (aaraujo@cenditel.gob.ve
*
* CENDITEL Fundacion Centro Nacional de Desarrollo e Investigaciï¿½n en TecnologÃ­as Libres
*
* Este programa es software libre; Usted puede usarlo bajo los tï¿½rminos de la licencia de
* software GPL versiï¿½n 2.0 de la Free Software Foundation.
*
* Este programa se distribuye con la esperanza de que sea ï¿½til, pero SI NINGUNA GARANTï¿½A;
* tampoco las implï¿½ï¿½citas garantï¿½ï¿½as de MERCANTILIDAD o ADECUACIÃ“N A UN PROPï¿½SITO PARTICULAR.
* Consulte la licencia GPL para mï¿½s detalles. Usted debe recibir una copia de la GPL junto
* con este programa; si no, escriba a la Free Software Foundation Inc. 51 Franklin Street,
* 5ï¿½ Piso, Boston, MA 02110-1301, USA.
*
*/
#ifndef MAINWINDOW_H
#define MAINWINDOW_H
 #include <QWebView>
#include <QMainWindow>
#include <QTextStream>
#include <QSettings>
#include <QGraphicsSvgItem>
#include <QMutex>
#include <QWaitCondition>
#include <QApplication>
//#include <QTcpServer>
#include <QStackedWidget>

#include "SafetYAWL.h"

#include "graphicsworkflow.h"
#include "graphicssvgitemlive.h"
#include "threadconsole.h"
#include "threadinfoserver.h"
//#include "SafetConsoleApp.h"
//#include "principalframe.h"
#include "SafetTextParser.h"
//#include "DigiDoc.h"
#include "SafetDocument.h"
//#include "QProgressIndicator.h"
//#include "inflowthread.h"
#include "threadconsole.h"

class QAbstractItemModel;
class QComboBox;
class QCmdCompleter;
class QLabel;
class QLineEdit;
class QProgressBar;
class QDomDocument;
class DomModel;
class ThreadConsole;
//class GraphicsWorkflow;
class GraphicsSvgItemLive;
class InflowThread;
//class ThreadConsole;


const QString SAFETCONSOLEFILE = "defconsole.xml";
const QString  SAFETCONFIGFILE = "defconfigure.xml";
const QString  SAFETUSERSFILE = "defusers.xml";
const QString  SAFETMANAGEMENTSIGNFILE = "defmanagementsignfile.xml";

namespace Safet {
    const QString LOADFLOWFILE_NAMEFIELD = QObject::tr("Cargar_archivo_flujo");
const QString AUTOFILTERFLOW_NAMEFIELD = QObject::tr("Autofiltro");
const QString RECURSIVEFILTERFLOW_NAMEFIELD = QObject::tr("Filtro_recursivo");
const QString GRAPHSFILENAME = "graphs";
const QString PLANNEDGRAPHSFILENAME = "plannedgraphs";
const QString COLONMARK = "##SAFETCOLON##";
const int NOKEY = 10;
}


class MainWindow : public QObject 
{

    Q_OBJECT
    static QStatusBar *mystatusbar;


    QString _currenterror;

    QToolBar *standardbar;
    QTextEdit *myoutput;
    QTableView *listviewoutput;
//    GraphicsWorkflow *gviewoutput;
    QPushButton *changeUserButton;
    QLabel *titleApplication;

    QStandardItemModel *listviewoutputmodel;
    QWebView* weboutput;
    QString _dirInput; // Directorio de archivos imÃ¡genes, iconos, archivos utilitarios

    // *** Valores de formato para listado y grÃ¡fico de flujo
    QString _listprincipaltitle;    
    int _listprincipalcount;
    QString _listprincipalvariable;
    QString _listprincipalkey;

    // *** Valores de formato para listado y grÃ¡fico de flujo
    QString  _pathdoc; // Archivo de entrada para generar la consulta
    QString gopt;
    int verbose_flag;
    bool parsed;

    QMap<int,QString> commands;
    //QMap<QString,QString> _permiseshierarchy; // jerarquia de permisos

    QStringList filecompleters;
    QStringList _plugs;

    GraphicsSvgItemLive* _itemredraw;

    QString styleDigidoc;
    friend class ThreadConsole;

    bool initApp; // para iniciar la aplicacion
    bool _issmartmenuvisible;

     QMutex *mutexconsole;
     bool runningConsole;



    // Cadena que mantiene la ruta completa de un documento SafetDocument
    // cargado con SafetDocument::readDigidocFile
    QString pathOfSafetDocument;

     bool _checkgoprincipal; // Chequeo para habilitaciÃ³n de barra de botones




    bool _isloadeditactions; // Se cargaron las acciones

    // indicador de progreso
    //QProgressIndicator* progressIndicator;


    /** variable para thread
    *
    */
    //static ThreadConsole myThreadConsole;


    bool _isgui;
    QMap<QString,QStringList> users;

    QString _currentjson;
    QString _inputpath;
    QString _hostmediapath;
    QString _hosturl;
     uint _wfnumpars;
public:

    // Estructura utilitaria para listar documentos por clave



    // indicador de progreso
//    QProgressIndicator* progressIndicator;

    // Enumeraciones


    // Datos estaticos
    static SafetYAWL *configurator;
    static MainWindow *mymainwindow;
    static QStringList sbmenulist;
    static int gviewoutputwidth;
    static int gviewoutputheight;

    static bool _issigning;
    static QString _currentCommonName;

    // puntero a Thread
    static InflowThread * mythread;

    static QString showString;
    static bool _isrestarting;

    static int _seconstohide; // Segundos para ocultar panel de resultados
    static QTimer _panelinfotimer;
    QString _currconfpath; // Ruta de acceso para el directorio .safet p.e. /home/vbravo
    QString _mediapath;
    QString _templatepath;



    static QMap<QString,QPair<QString,QString> > _graphs;

    // Primer campo: nombre de la operacion
    // Primer elemento del QStringList corresponde a los usuarios para esa operaciÃ³n
    // Segundo elemento del QStringList corresponde a las acciones que pueden ejecutar los usuarios
    // Tercer elemento del QStringList corresponde al SHA1 (firma de la operacion)

    static QMap<QString,QStringList> permises; // Estructura para guardar los permisos

    static QString currentaccount; // cuenta actual de usuario
    static QString currentrole; // rol de la cuenta actual de usuario
    static QString currentrealname;
    // Funciones
    /**
      \brief ejecuta un funcion de safet segun los parametros que se encuentran en memoria
      (como consola)
     \return retorna true si se ejecutÃ³ correctamente, false en caso contrario
     */
    bool executeParsed();
    /**
      \brief Retornando JSON Actual
      */
    QString currentJSON();

    /**

      Retorna la ruta completa del archivo de entrada que se está procesando
      */
    QString inputPath() { return _inputpath;}
    void setInputPath(const QString& p) { _inputpath = p;}

    QString hostURL();
    void setHostURL(const QString& u);

    bool parse(int &argc, char **argv);
    bool parseArgs(const QString& a);
    QStringList& plugs() { return _plugs;}
    void refreshListView(const QString& doc);
    void buildModel(QMap<QString,QVariant>& mymap);

    bool isGui() const { return _isgui;}

    QStringList& getFileCompleters() { return filecompleters;}
    /*
      \brief Funcion que revisa la pila de errores y devuelve Verdadero (true)
             si existen errores. TambiÃ©n muestra el panel de errores con los mensajes de errores
      \return Verdadero (true) si existen errores en la pila, Falso (false) de otra forma
      */
    bool queryForErrors();

public:
    MainWindow(const QString& path = QLatin1String(""));
    ~MainWindow();
    void setupToolbar();
    void setupTabWidget();

   QString currentError();
   void loadAuthorization(); 
   void loadInfo();
   
   bool login(const QString& name, const QString& pass);
   bool logout(); 

   void setMediaPath(const QString& m);
   QString mediaPath();

   void setTemplatePath(const QString& t) { _templatepath = t; }
   QString templatePath() { return _templatepath;}

   void setHostMediaPath(const QString& m);
   QString hostMediaPath();

   QMutex* mutexConsole() { Q_CHECK_PTR(mutexconsole); return mutexconsole;}


    /**
     ** \brief Obtiene la plantilla de estilo principal
     * \return Plantilla de estilo en formato CSS
     */

    QString getPrincipalCSS() const;


    /**
    * \brief Borra todos los archivos que se encuentran en el directorio d
      \param d Directorio donde se eliminarÃ¡n los archivos
    */
    static void doDelAllFilesOnDirectory(const QString& d);
    /**
    * \brief Funcion delegada (Callback) para gestionar un error
    */
    static void evalEventOnExit(SafetLog::Level);


    /**
      * \brief Retorna el mapa de los grafos visibles (nombre, codigo para ser generado)
      */
    static QMap<QString,QPair<QString,QString> >& graphs() { return _graphs; }

    /**
     * \brief Evalua si la firma de una operacion es vÃ¡lida segun un determinado permiso
              (read,view,modify)
        \param op Firma de la operaciÃ³n
        \param permise Tipo de permiso (read,view,modify);

     */
     static bool doPermiseExecOperation(const QString& op, QMap<QString,QString>& phierarchy,
                                        const QString& permise = "read");

     /**
      * \brief Evalua si la firma de una operacion es vÃ¡lida segun un determinado permiso
               (read,view,modify)
         \param op Firma de la operaciÃ³n
         \param permise Tipo de permiso (diferentes tipos de lecturay);
         \return mapas de tipo de accion (claves) -> permiso para el usuario actual

      */
     static QMap<QString,bool> doPermiseExecOperationAction(const QString& op);

        /*
          *  \brief Coloca el conjunto de comandos para ser utilizado en la consola
          * \param cmds conjunto de comandos
          */
        void setCommands(QMap<int,QString>& cmds) { commands = cmds;}

       /*
         * \brief Coloca el item a redibujar
         * \brief item a redibujar
         */
        void setItemRedraw(GraphicsSvgItemLive* i = 0) { _itemredraw = i; }
    /**
    * \brief Funcion delegada (Callback) para gestionar la entrada
    */
    static QString evalEventOnInput(SafetYAWL::TypeInput,const QString&, bool&);

     // Metodos para la Consola
    void listTasks();
    void listDocuments(const QString& key);
    void listDocuments();
    void manageData();
    bool genGraph();
    void signDocument();
    void calStatistics();
    /**
        * \brief Muestra la ayuda del uso de la aplicacion de consola safet
        */
    void displayUsage();

    void version();

    /*
          * \brief Genera una Consola (Shell)
          * \param command nÃºmero de parÃ¡metro
          * \return true si el resultado fue exitoso, falso en caso contrario
          */
    bool  processCommand(int command);

    /**
       \brief Dada una sentencia SQL (sql) se procesa un archivo de texto ( por defecto se procesa safet.conf)
              modificando las diferentes opciones segï¿½n  la expresiï¿½n SQL
       \param sql Sentencia SQL (INSERT, UPDATE, etc..)
       \param filename ruta completa  del archivo de configuraciï¿½n, si no se especifica se toma por defecto safet.conf
       \param multiplefields Admite sustituciones de campo multiples terminados en ".*"
       \param numberreg NÃºmero de registro a cambiar
       */
    void proccessConfFile(const QString& sql, const QString& filename = "", bool multiplefields = false);
    void setCommands(const QMap<int,QString>& cmds) { commands = cmds; }
    void setModelCompleter(int opt);
    bool loadWidgetPlugins(const QString& f, bool add = false);
    void loadSettings();
    void writeSettings();
    QString evalJS(const QString &js);


    /**
      \brief Traduce el contenido de la pila "stack" a una cadena en formato HTML, en funcion
      de del tipo de mensaje denotado por "l"
      \param stack Pila de mensajes, al finalizar esta pila estara vacia
      \param l Tipo del mensaje (Error, Warning, Action,Debug)
      \return Cadena en formato HTML que contiene hora y texto de cada mensaje
      */
    QString renderMessageStack(QStack<QPair<QDateTime,QString> >& stack, SafetLog::Level l);

    /**
      * Verificaciones
      */
    void successVerification(QStringList list = QStringList(), const QString& msg = "");

    /** Funcion agregada para eliminar dependencia de digidocpp realiza la verificacion
    * de un contenedor. Se utiliza para desplegar el widget SafetSignatureWidget
    * \param list lista de cadena
    * \param msg mensaje
    * \param doc objeto SafetDocument asociado al contenedor
    */
    void successVerification(QStringList list, const QString& msg, SafetDocument doc);


    /**
      Copia los archivos iniciales para el directorio "home" / .safet
      **/
    void copyInitialFiles();


    QStackedWidget* getStackedWidget() { return stackWidget;}

    /**
      \brief Cifrar o descifrar  un archivo indicado por pathname
      \param pathname ruta completa del archivo a cifrar
      \param operation 0 cifrar y 1 para descifrar
      */
    void doCipherFile(bool iscipher = false);


    /**
      \brief Comparar dos grÃ¡ficos (first,second) y generar un tercero con la diferencia de fichas
             entre los dos
      \param first Fuente del primer grÃ¡fico
      \param second Fuente del segundo grÃ¡fico
      \return Fuente del grÃ¡fico con la estadÃ­stica
      */
    QString generateGraphCompared(const QString& first, const QString& second);


    /**
      \brief Dibuja el grÃ¡fico especificado por "code" en la pestana de flujos de trabajos (GrÃ¡fico)
      y le agrega la etiqueta de fecha "datetag"
      \param code CÃ³digo del grÃ¡fico a dibujar
      \param datetag Etiqueta de la fecha
      */
    void doRenderGraph(const QString& code, const QString& datetag);

    /**
      \brief Habilita/Deshabilita los botones enviar de las pestanas una vez que se conecta
      a la fuente de datos correctamente
      **/
    void setEnableCompletingButtons(bool b);



    /**
      * \brief Chequea la lista de argumentos que se pasa en un cuadro de ediciÃ³n , segÃºn la
                lista colocada en el archivo de configuraciÃ³n (widgets.arguments.*)
      * \param s Cadena a chequar en el formato <campo>:<value>
      */
    static void checkSafetArguments(const QString &s);


    /**
      \brief Carga la plantilla que se muestra en la pestaÃ±a de "Reportes". Buscar la  etiqueta <SAFET/>
      \param json texto a reemplizar
      \param filename ruta completa de la plantilla
      */
    QString loadReportTemplate(const QString& json, const QString &filename = QString(""),
                               const QString& nameoperation = QString("Listar_datos"));



    QStringList autoComplete(const QString &path);
    /**
      * \brief Obtener una cadena HTML, con el menú para acceder
        a las operaciones de Formulario
        */
    QString menuCommands();

    /**
      \brief Obtiene el formulario para la operación especifica como "o"
      */
    QString menuForm(const QString &o);
    /**
      \brief Obtiene algunos valores de un formulario HTML de la operacion "o" filtrado por
            clave keyvalue
      */
    QString formFieldsForKey(const QString &o, const QString& fieldname,
                             const QString &keyvalue, DomModel* mymodel);
    /**
      \brief genera el texto HTML Cabecera correspondiente a la operación que señalada en "o"
      */
    QString generateFormHead(const QString &o);

    /**
      \brief genera el texto HTML de final de página correspondiente a la operación que señalada en "o"
      */
    QString generateFormFooter(const QString &o);
    /**
      \brief Generar una cadena en lenguaje HTML que contiene el registro encontrado según los parametros
      operation, fieldname y key
      Devuelve una cadena vacía si no consigue el valor
      */
    QString generateModifyHTML(const QString &operation, const QString &fieldname, const QString &key);
    /**
      * \brief Agrega el texto HTML para los parámetros según la operación "nameoperation"
      * \return texto HTML con cuadro  de diálogo basado en jquery.ui
      */
    QString addParametersDialog(const QString &nameoperation);
    /**
      \brief Devuelve valor interno (innerHTML, JQuery) para el cuadro diálogo de parámetros de SAFET

      */
    QString getFlowParameters(const QString &flowfilename);
    QString getWidget(SafetParameter *p); // Obtener el objeto HTML del widget según el parámetro
    /**
      * \brief Cargar las acciones o Consultas guardardas
      * \return Lista de acciones
      */
    QMap<QString,QString> loadEditActions();

    /**
      * \brief Genera un menú con los enlaces a los módulos principales
      */
    QString generateModulesMenu();

    /**
      * \brief Convierte una operacion del tipo operacion:nombre_n... a un título
               Sin caracteres "_" y sin la palabra "operacion:"
               */
    static QString convertOpToTitle(const QString &op);
    QString returnFormLink(const QString& nameoperation); // "Retornar a Consulta"

    /**
      \brief Registrar el ingreso de un usuario al sistema
      \param user nombre del usuario
      */
    void registerLogin(const QString &user);

    /**
      \brief Registrar la salida de un usuario al sistema
      \param user nombre del usuario
      */
    void registerLogout(const QString &user);

    /**
      * \brief Escribir un mensaje (message) en el registro de eventos
      */
    void log(const QString& message);
    /**
      ** \brief reemplaza marcas como ##SAFETCOLON## (Safet::COLONMARK)
      */
    static QString replaceMarks(const QString &s);

    /**
      * \brief
      * \return Retorna dos parámetros, el primero el código del grafo,
            el segundo la hora y fecha que se realizó el grafo
            */
    QStringList lastInfoGraph();
    /**
      * \brief  Borra un gráfico del archivo por defecto (graphs.gph)
      * \param n nombre del gráfico a borrar
      * \return true si el gráfico fue eliminado, false en caso contrario
      */
    bool deleteGraph(const QString &n, const QString& gfn = Safet::GRAPHSFILENAME);

    /**
      * \brief  Guarda lo que está contenido en en el mapa estático graphs()
      * \param gfn nombre del repositorio de grafos (sin extensión)
      * \return true si el gráfico fue eliminado, false en caso contrario
      */
     bool doSaveCompleteMapGraphs(const QString &gfn = Safet::GRAPHSFILENAME);
    /**
      \brief Crea un registro de grafo en el archivo de grafos planificados (~/.safet/graphs/plannedgraphs.gph)
      \param pathflow ruta completa del archivo de flujo de trabajo
      \param name Nombre del grafo
      \return true si la acción fue exitosa, false en caso contrario
      */
    bool doGeneratePlannedGraph(const QString &pathflow, const QString &name);

    /**
      \brief Modifica la fecha de un codigo de grafo
      */
    QString doModifyDateGraph(const QString &nametask, const QDateTime &mydate, const QString &code);

    /**
      *  \brief Obtener un mapa con las tareas y fecha del grafo guardado con nombre "namegraph"
      */
    QMap<QString, QDateTime> doGetPlannedGraph(const QString &namegraph);
    /**
      Cargar jerarquia de permisos
      */

    static QMap<QString,QString> loadPermisesHierarchy();
    /**
      \brief chequea si el permiso tiene jerarquia
      */
    static bool checkPermiseInHierarchy(const QString &permise, const QMap<QString, QString> &myphierarchy, const QString &realtypes);
    /**
      \brief extrae los parametros de una consulta (todos los parametros que tenga como prefijo
      la palabra "parameters."
      */
    QString extractParameters(const QString &action);
public Q_SLOTS: // Slots para el manejo de los servicios de Escritorio (QDesktopServices)

        void browse( const QUrl &url );
        void mailTo( const QUrl &url );

            void toSend(bool sign = false);


    bool toInputForm(const QString& action);
    bool toInputConsole(const QString& action);

    void setParsValues(const QMap<QString, QString> &values);
    void evalParsValues(SafetWorkflow *wf);
    /**
      *\brief Colocar valores de configuración intermedios (Conffile)
      *\param values Valores según formato <Seccion>/<Clave> que se pasa directo al mapa de configuracion

      */
    void setConffileValues(const QMap<QString,QString>& values);

    /**
        \brief Agregar Fecha y Hora según formato
        \return Retorna Cadena con la fecha y/o hora
        */
    QString addInfoGraphDateText();

    /**
      \brief Devuelve el título actual colocado en el archivo safet.conf
      \return Retorna texto colocado en (generaloptions.currentflowtitle)
      */
    QString currentGraphTitle();

    /**
      \brief Funciones para guardar, restaurar y comparar grafos
      \param mypars recibe tres parametros para guardar en el archivo,
      el primer es el nombre del grafo, el segundo es el código del grafo y
      el tercero es la etiqueta de fecha.
      \return true si se logró guardar el grafo, false en caso contrario
      */

    bool doSaveGraph(const QStringList& mypars);

    static void doRestoreGraph(const QString& gfn = Safet::GRAPHSFILENAME);
    QString doCompareGraphs(const QString& firstgraph, const QString& secondgraph);

private slots:

    void timeHideResult();

    void about();

    void toLoadWeb();

    void toInputSign();
    void toInputConfigure();
    void toInputUsers();
    void toDelAllWorkflow();
    void toDelOneWorkflow();
    void toClearTextEdit();
//    void selInputCombo(int);
    void checkSelInputTab(int opt);
    void selInputTab(int);
    void doQuit();
    void doPrint();
    void doPrintPreview();
    void doGeneralOptions();
    void doWidgetsOptions();
    void setToInputForm();
    void setToInputConsole();
    void setToInputReports();
    void setToInputFlowGraph();
    void setToInputManagementSignDocument();
    void doGetSignDocument();
    void doSendSignDocument();
    void checkGoPrincipal();

    void addToHistoryList();
    void editToHistoryList();
    void delToHistoryList();
    void saveToHistoryList();


    void insertFromHistoryList(QListWidgetItem *);
    void showSmartMenu();
    void showSuccessfulMessage(const QString& m);

    QString drawWorkflow(const QString& filename);


    void doAssistantHelp();
    void toChangeUser();
    void doLoadConfiguration();
    void doSaveConfiguration();

    // establece la ruta completa de un documento SafetDocument
    // cargado con SafetDocument::readDigidocFile
    void setPathOfSafetDocument(QString path) { pathOfSafetDocument = path; }

    // retorna la ruta completa de un documento SafetDocument
    // cargado con SafetDocument::readDigidocFile
    QString getPathOfSafetDocument() { return pathOfSafetDocument; }

    void doInsertInAuthConfFile(QRegExp& rx); // Insertar un grupo de campos en una secciÃ³n
    /**
     \brief Busca los campos que coinciden con la clave key y devuelve los
            nombres separados por ","
     \param key Clave en el archivo de autorizaciÃ³n (auth conf) de la
     \return Campos separados por el caracter ","
     */
    QString searchFieldsInAuthConf(const QString& key);

public slots:
    void linkClickedSbMenu(const QUrl& url);
    void linkClickedSbResult(const QUrl& url);
    void setEnabledToolBar(bool e = true); // Habilitar o Desahabilitar barra de herramientas
    void doExit();
    /**
      \brief Funcion para preguntar antes de salir
      */
    bool maybeSave();
    /*
      * \brief va a la pantalla principal
      */
    void goPrincipal();



    // slot para ejecutar acciones cuando se termina de ejecutar el thread de MainWindow
    void threadEndJob();

    // se encarga de ejecutar executedParsed() a traves del thread de MainWindow
    void processMainWindowThread();

    // slot para desplegar el dialogo para modificar la configuracion de la fuente de datos
    void manageDataSources();

protected:
    void saveWindowState();
    void restoreWindowState();

    void closeEvent(QCloseEvent *event);    
    void moveEvent(QMoveEvent *event);
    void showEvent(QShowEvent *event);


    QPoint m_lastPos;
    QSize m_lastSize;

    QString outputText;
    QTextStream streamText;
    void sendStreamToOutput();
    void iterateMap(const QMap<QString,QVariant>& map);
    void createDockWindow();    
    void createDockShowResultWindow();
    virtual void resizeEvent ( QResizeEvent * event );    
    void buildMenuOnPanelsbMenu(const QString& option);


    /**
       *\brief Genera la lista de archivos (en "myfiles") para un paquete tar
       *\param folder Nombre de ruta completa de la carpeta para generar el archivo tar
       *\param myfiles parÃ¡metro de salida con la lista de archivos agregada
       *\param exts Lista de extensiones para cargar los archivos (xml,png,html,etc...)
       *\return nombre del archivo .tar
       */
    QString generateListForTar(const QString& folder, QStringList& myfiles,
                               const QStringList& exts);


    /**
      \brief Genera una cadena en formato JSON dado un conjunto de hitos
      \param miles Lista de hitos ordenados por fecha (orden cronologico)
      \param Parametro de entrada (campos que se agregan en el documento JSON)
      \return cadena JSON
      */

    QString getJSONMiles(const QList<SafetYAWL::Miles>& miles,QList<QSqlField>& myfields);
private:

    /**
      * \brief Evalua el mapa de configuraciones actual (_currconfvalues)
      */
    void evalConffileValues();
    /**
      * \brief Procesa un archivo tar (f) y descomprime los archivos en
      el directorio de configuraciÃ³n por defecto
      * \param f archivo con extensiÃ³n .tar a descomprimir
      * \param isprincipal si es el directorio principal
      * \return retorna verdadero si la operaciÃ³n fue exitosa, falso en caso contrario
      */
    bool processDirTar(const QString& f, bool isprincipal = false);
    bool searchInHistoryList(const QString& str);
    QString getScriptLen(const QSqlField& f); // Calcular la longitud del campo para la tabla generada en Listar_Datos

    void createMenu();
    void configureStatusBar();
    QAbstractItemModel *modelFromFile(const QString& fileName);

    void generateJScriptreports(const QString& documents, const QList<QSqlField>& fields);
    void setupStackedWebviews(const QIcon& icon, const QString& name, const QString& desc = QString(""));


    QListWidget *listEditForm, *listEditCons, *listEditSign, *listEditConf;
    QToolButton *buttonListEditConsAdd,*buttonListEditConsEdit, *buttonListEditConsDel;
    QToolButton *buttonListEditConsSave;

    QCommandLinkButton* completingButtonForm;
    QCommandLinkButton* cancelButtonForm;
    QCommandLinkButton* showdockButtonForm;

    QCommandLinkButton* completingButtonCons;
    QCommandLinkButton* cancelButtonCons;
    QCommandLinkButton* showdockButtonCons;

    QCommandLinkButton* completingButtonSign;
    QCommandLinkButton* cancelButtonSign;
    QCommandLinkButton* showdockButtonSign;


    QCommandLinkButton* completingButtonConf;
    QCommandLinkButton* cancelButtonConf;
    QCommandLinkButton* showdockButtonConf;

    QCommandLinkButton* completingButtonUsers;
    QCommandLinkButton* cancelButtonUsers;
    QCommandLinkButton* showdockButtonUsers;

    //    QComboBox *comboMode;
    QTabBar *centralBar;
    QTabWidget *centralWidget;
    QStackedWidget *stackWidget;
    QList<QWebView*> stackedwebviews;

//    PrincipalFrame *principalFrame;

    QCmdCompleter *completer;

    // Utilizado para reporte en web
    QString jscriptarray;
    QString jscriptcolumns;
    bool jscriptload;
    QString currentDocuments;
    QList<QSqlField> currentFields;

    // para mostrar el Assistant

    // Objeto SafetDocument asociado a MainWindow
    //SafetDocument safetDocument;

    QMap<QString,QString> _currconfvalues;
    QMap<QString,QString> _currparsvalues;

  private slots:
    void executeJSCodeAfterLoad( /*bool ok */ );



};


#endif // MAINWINDOW_H
